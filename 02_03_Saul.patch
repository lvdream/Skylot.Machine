Index: src/main/java/com/fangda/skylot/mathine/mapper/customer/IftbItemCustomerMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/mapper/customer/IftbItemCustomerMapper.xml	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/mapper/customer/IftbItemCustomerMapper.xml	(date 1516245468000)
@@ -265,6 +265,9 @@
             <if test="record.iicUpdateuser != null">
                 iic_updateuser = #{record.iicUpdateuser,jdbcType=VARCHAR},
             </if>
+            <if test="record.iccCarCode != null">
+                icc_car_code = #{record.iccCarCode,jdbcType=VARCHAR},
+            </if>
         </set>
         <if test="_parameter != null">
             <include refid="Update_By_Example_Where_Clause"/>
@@ -283,7 +286,8 @@
         iic_createdate = #{record.iicCreatedate,jdbcType=VARCHAR},
         iic_createuser = #{record.iicCreateuser,jdbcType=VARCHAR},
         iic_updatedate = #{record.iicUpdatedate,jdbcType=VARCHAR},
-        iic_updateuser = #{record.iicUpdateuser,jdbcType=VARCHAR}
+        iic_updateuser = #{record.iicUpdateuser,jdbcType=VARCHAR},
+        icc_car_code = #{record.iccCarCode,jdbcType=VARCHAR}
         <if test="_parameter != null">
             <include refid="Update_By_Example_Where_Clause"/>
         </if>
@@ -324,6 +328,9 @@
             <if test="iicUpdateuser != null">
                 iic_updateuser = #{iicUpdateuser,jdbcType=VARCHAR},
             </if>
+            <if test="iccCarCode != null">
+                icc_car_code = #{iccCarCode,jdbcType=VARCHAR},
+            </if>
         </set>
         where iic_id = #{iicId,jdbcType=INTEGER}
     </update>
@@ -339,7 +346,8 @@
       iic_createdate = #{iicCreatedate,jdbcType=VARCHAR},
       iic_createuser = #{iicCreateuser,jdbcType=VARCHAR},
       iic_updatedate = #{iicUpdatedate,jdbcType=VARCHAR},
-      iic_updateuser = #{iicUpdateuser,jdbcType=VARCHAR}
+        iic_updateuser = #{iicUpdateuser,jdbcType=VARCHAR},
+        icc_car_code = #{iccCarCode,jdbcType=VARCHAR}
     where iic_id = #{iicId,jdbcType=INTEGER}
   </update>
 </mapper>
\ No newline at end of file
Index: src/main/java/com/fangda/skylot/mathine/mapper/parking/IftbMachineActionMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/mapper/parking/IftbMachineActionMapper.xml	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/mapper/parking/IftbMachineActionMapper.xml	(date 1517651182000)
@@ -1,329 +1,367 @@
 <?xml version="1.0" encoding="UTF-8" ?>
 <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
-<mapper namespace="com.fangda.skylot.mathine.dao.parking.IftbMachineActionMapper" >
-  <resultMap id="BaseResultMap" type="com.fangda.skylot.mathine.model.parking.IftbMachineAction" >
-    <id column="ima_id" property="imaId" jdbcType="VARCHAR"/>
-    <result column="mm_id" property="mmId" jdbcType="INTEGER" />
-    <result column="ma_id" property="maId" jdbcType="INTEGER" />
-    <result column="ima_code" property="imaCode" jdbcType="VARCHAR" />
-    <result column="ima_name" property="imaName" jdbcType="VARCHAR" />
-    <result column="ima_address" property="imaAddress" jdbcType="VARCHAR" />
-    <result column="ima_port" property="imaPort" jdbcType="VARCHAR" />
-    <result column="ima_status" property="imaStatus" jdbcType="VARCHAR" />
-    <result column="ima_createtime" property="imaCreatetime" jdbcType="VARCHAR" />
-    <result column="ima_createuser" property="imaCreateuser" jdbcType="VARCHAR" />
-    <result column="ima_updatetime" property="imaUpdatetime" jdbcType="VARCHAR" />
-    <result column="ima_updateuser" property="imaUpdateuser" jdbcType="VARCHAR" />
-  </resultMap>
-  <sql id="Example_Where_Clause" >
-    <where >
-      <foreach collection="oredCriteria" item="criteria" separator="or" >
-        <if test="criteria.valid" >
-          <trim prefix="(" suffix=")" prefixOverrides="and" >
-            <foreach collection="criteria.criteria" item="criterion" >
-              <choose >
-                <when test="criterion.noValue" >
-                  and ${criterion.condition}
-                </when>
-                <when test="criterion.singleValue" >
-                  and ${criterion.condition} #{criterion.value}
-                </when>
-                <when test="criterion.betweenValue" >
-                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
-                </when>
-                <when test="criterion.listValue" >
-                  and ${criterion.condition}
-                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
-                    #{listItem}
-                  </foreach>
-                </when>
-              </choose>
-            </foreach>
-          </trim>
-        </if>
-      </foreach>
-    </where>
-  </sql>
-  <sql id="Update_By_Example_Where_Clause" >
-    <where >
-      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
-        <if test="criteria.valid" >
-          <trim prefix="(" suffix=")" prefixOverrides="and" >
-            <foreach collection="criteria.criteria" item="criterion" >
-              <choose >
-                <when test="criterion.noValue" >
-                  and ${criterion.condition}
-                </when>
-                <when test="criterion.singleValue" >
-                  and ${criterion.condition} #{criterion.value}
-                </when>
-                <when test="criterion.betweenValue" >
-                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
-                </when>
-                <when test="criterion.listValue" >
-                  and ${criterion.condition}
-                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
-                    #{listItem}
-                  </foreach>
-                </when>
-              </choose>
-            </foreach>
-          </trim>
-        </if>
-      </foreach>
-    </where>
-  </sql>
-  <sql id="Base_Column_List" >
-    ima_id, mm_id, ma_id, ima_code, ima_name, ima_address, ima_port, ima_status, ima_createtime, 
-    ima_createuser, ima_updatetime, ima_updateuser
-  </sql>
-  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.fangda.skylot.mathine.model.parking.IftbMachineActionCriteria" >
-    select
-    <if test="distinct" >
-      distinct
-    </if>
-    <include refid="Base_Column_List" />
-    from iftb_machine_action
-    <if test="_parameter != null" >
-      <include refid="Example_Where_Clause" />
-    </if>
-    <if test="orderByClause != null" >
-      order by ${orderByClause}
-    </if>
-    <if test="page != null" >
-      limit #{page.begin} , #{page.length}
-    </if>
-  </select>
+<mapper namespace="com.fangda.skylot.mathine.dao.parking.IftbMachineActionMapper">
+    <resultMap id="BaseResultMap" type="com.fangda.skylot.mathine.model.parking.IftbMachineAction">
+        <id column="ima_id" property="imaId" jdbcType="VARCHAR"/>
+        <result column="mm_id" property="mmId" jdbcType="INTEGER"/>
+        <result column="ma_id" property="maId" jdbcType="INTEGER"/>
+        <result column="ima_code" property="imaCode" jdbcType="VARCHAR"/>
+        <result column="ima_name" property="imaName" jdbcType="VARCHAR"/>
+        <result column="ima_address" property="imaAddress" jdbcType="VARCHAR"/>
+        <result column="ima_port" property="imaPort" jdbcType="VARCHAR"/>
+        <result column="ima_status" property="imaStatus" jdbcType="VARCHAR"/>
+        <result column="ima_createtime" property="imaCreatetime" jdbcType="VARCHAR"/>
+        <result column="ima_createuser" property="imaCreateuser" jdbcType="VARCHAR"/>
+        <result column="ima_updatetime" property="imaUpdatetime" jdbcType="VARCHAR"/>
+        <result column="ima_updateuser" property="imaUpdateuser" jdbcType="VARCHAR"/>
+        <result column="ima_error_json" property="imaErrorJson" jdbcType="VARCHAR"/>
+        <result column="ima_physical_status" property="imaPhysicalStatus" jdbcType="VARCHAR"/>
+    </resultMap>
+    <sql id="Example_Where_Clause">
+        <where>
+            <foreach collection="oredCriteria" item="criteria" separator="or">
+                <if test="criteria.valid">
+                    <trim prefix="(" suffix=")" prefixOverrides="and">
+                        <foreach collection="criteria.criteria" item="criterion">
+                            <choose>
+                                <when test="criterion.noValue">
+                                    and ${criterion.condition}
+                                </when>
+                                <when test="criterion.singleValue">
+                                    and ${criterion.condition} #{criterion.value}
+                                </when>
+                                <when test="criterion.betweenValue">
+                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                                </when>
+                                <when test="criterion.listValue">
+                                    and ${criterion.condition}
+                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
+                                             separator=",">
+                                        #{listItem}
+                                    </foreach>
+                                </when>
+                            </choose>
+                        </foreach>
+                    </trim>
+                </if>
+            </foreach>
+        </where>
+    </sql>
+    <sql id="Update_By_Example_Where_Clause">
+        <where>
+            <foreach collection="example.oredCriteria" item="criteria" separator="or">
+                <if test="criteria.valid">
+                    <trim prefix="(" suffix=")" prefixOverrides="and">
+                        <foreach collection="criteria.criteria" item="criterion">
+                            <choose>
+                                <when test="criterion.noValue">
+                                    and ${criterion.condition}
+                                </when>
+                                <when test="criterion.singleValue">
+                                    and ${criterion.condition} #{criterion.value}
+                                </when>
+                                <when test="criterion.betweenValue">
+                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                                </when>
+                                <when test="criterion.listValue">
+                                    and ${criterion.condition}
+                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
+                                             separator=",">
+                                        #{listItem}
+                                    </foreach>
+                                </when>
+                            </choose>
+                        </foreach>
+                    </trim>
+                </if>
+            </foreach>
+        </where>
+    </sql>
+    <sql id="Base_Column_List">
+        ima_id, mm_id, ma_id, ima_code, ima_name, ima_address, ima_port, ima_status, ima_createtime,
+        ima_createuser, ima_updatetime, ima_updateuser, ima_error_json, ima_physical_status
+    </sql>
+    <select id="selectByExample" resultMap="BaseResultMap"
+            parameterType="com.fangda.skylot.mathine.model.parking.IftbMachineActionCriteria">
+        select
+        <if test="distinct">
+            distinct
+        </if>
+        <include refid="Base_Column_List"/>
+        from iftb_machine_action
+        <if test="_parameter != null">
+            <include refid="Example_Where_Clause"/>
+        </if>
+        <if test="orderByClause != null">
+            order by ${orderByClause}
+        </if>
+        <if test="page != null">
+            limit #{page.begin} , #{page.length}
+        </if>
+    </select>
 
-  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
-    select 
-    <include refid="Base_Column_List" />
-    from iftb_machine_action
-    where ima_id = #{imaId,jdbcType=INTEGER}
-  </select>
-  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
-    delete from iftb_machine_action
-    where ima_id = #{imaId,jdbcType=INTEGER}
-  </delete>
-  <delete id="deleteByExample" parameterType="com.fangda.skylot.mathine.model.parking.IftbMachineActionCriteria" >
-    delete from iftb_machine_action
-    <if test="_parameter != null" >
-      <include refid="Example_Where_Clause" />
-    </if>
+    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
+        select
+        <include refid="Base_Column_List"/>
+        from iftb_machine_action
+        where ima_id = #{imaId,jdbcType=VARCHAR}
+    </select>
+    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
+        DELETE FROM iftb_machine_action
+        WHERE ima_id = #{imaId,jdbcType=INTEGER}
+    </delete>
+    <delete id="deleteByExample" parameterType="com.fangda.skylot.mathine.model.parking.IftbMachineActionCriteria">
+        delete from iftb_machine_action
+        <if test="_parameter != null">
+            <include refid="Example_Where_Clause"/>
+        </if>
 
-  </delete>
+    </delete>
 
-  <insert id="insert" parameterType="com.fangda.skylot.mathine.model.parking.IftbMachineAction" >
-    insert into iftb_machine_action (ima_id, mm_id, ma_id, 
-      ima_code, ima_name, ima_address, 
-      ima_port, ima_status, ima_createtime, 
-      ima_createuser, ima_updatetime, ima_updateuser
-      )
-    values (#{imaId,jdbcType=VARCHAR}, #{mmId,jdbcType=INTEGER}, #{maId,jdbcType=INTEGER},
-      #{imaCode,jdbcType=VARCHAR}, #{imaName,jdbcType=VARCHAR}, #{imaAddress,jdbcType=VARCHAR}, 
-      #{imaPort,jdbcType=VARCHAR}, #{imaStatus,jdbcType=VARCHAR}, #{imaCreatetime,jdbcType=VARCHAR}, 
-      #{imaCreateuser,jdbcType=VARCHAR}, #{imaUpdatetime,jdbcType=VARCHAR}, #{imaUpdateuser,jdbcType=VARCHAR}
-      )
-  </insert>
-  <insert id="insertSelective" parameterType="com.fangda.skylot.mathine.model.parking.IftbMachineAction" >
-    insert into iftb_machine_action
-    <trim prefix="(" suffix=")" suffixOverrides="," >
-      <if test="imaId != null" >
-        ima_id,
-      </if>
-      <if test="mmId != null" >
-        mm_id,
-      </if>
-      <if test="maId != null" >
-        ma_id,
-      </if>
-      <if test="imaCode != null" >
-        ima_code,
-      </if>
-      <if test="imaName != null" >
-        ima_name,
-      </if>
-      <if test="imaAddress != null" >
-        ima_address,
-      </if>
-      <if test="imaPort != null" >
-        ima_port,
-      </if>
-      <if test="imaStatus != null" >
-        ima_status,
-      </if>
-      <if test="imaCreatetime != null" >
-        ima_createtime,
-      </if>
-      <if test="imaCreateuser != null" >
-        ima_createuser,
-      </if>
-      <if test="imaUpdatetime != null" >
-        ima_updatetime,
-      </if>
-      <if test="imaUpdateuser != null" >
-        ima_updateuser,
-      </if>
-    </trim>
-    <trim prefix="values (" suffix=")" suffixOverrides="," >
-      <if test="imaId != null" >
-        #{imaId,jdbcType=VARCHAR},
-      </if>
-      <if test="mmId != null" >
-        #{mmId,jdbcType=INTEGER},
-      </if>
-      <if test="maId != null" >
-        #{maId,jdbcType=INTEGER},
-      </if>
-      <if test="imaCode != null" >
-        #{imaCode,jdbcType=VARCHAR},
-      </if>
-      <if test="imaName != null" >
-        #{imaName,jdbcType=VARCHAR},
-      </if>
-      <if test="imaAddress != null" >
-        #{imaAddress,jdbcType=VARCHAR},
-      </if>
-      <if test="imaPort != null" >
-        #{imaPort,jdbcType=VARCHAR},
-      </if>
-      <if test="imaStatus != null" >
-        #{imaStatus,jdbcType=VARCHAR},
-      </if>
-      <if test="imaCreatetime != null" >
-        #{imaCreatetime,jdbcType=VARCHAR},
-      </if>
-      <if test="imaCreateuser != null" >
-        #{imaCreateuser,jdbcType=VARCHAR},
-      </if>
-      <if test="imaUpdatetime != null" >
-        #{imaUpdatetime,jdbcType=VARCHAR},
-      </if>
-      <if test="imaUpdateuser != null" >
-        #{imaUpdateuser,jdbcType=VARCHAR},
-      </if>
-    </trim>
-  </insert>
-  <select id="countByExample" parameterType="com.fangda.skylot.mathine.model.parking.IftbMachineActionCriteria" resultType="java.lang.Integer" >
-    select count(*) from iftb_machine_action
-    <if test="_parameter != null" >
-      <include refid="Example_Where_Clause" />
-    </if>
-  </select>
-  <update id="updateByExampleSelective" parameterType="map" >
-    update iftb_machine_action
-    <set >
-      <if test="record.imaId != null" >
-        ima_id = #{record.imaId,jdbcType=VARCHAR},
-      </if>
-      <if test="record.mmId != null" >
-        mm_id = #{record.mmId,jdbcType=INTEGER},
-      </if>
-      <if test="record.maId != null" >
-        ma_id = #{record.maId,jdbcType=INTEGER},
-      </if>
-      <if test="record.imaCode != null" >
-        ima_code = #{record.imaCode,jdbcType=VARCHAR},
-      </if>
-      <if test="record.imaName != null" >
-        ima_name = #{record.imaName,jdbcType=VARCHAR},
-      </if>
-      <if test="record.imaAddress != null" >
-        ima_address = #{record.imaAddress,jdbcType=VARCHAR},
-      </if>
-      <if test="record.imaPort != null" >
-        ima_port = #{record.imaPort,jdbcType=VARCHAR},
-      </if>
-      <if test="record.imaStatus != null" >
-        ima_status = #{record.imaStatus,jdbcType=VARCHAR},
-      </if>
-      <if test="record.imaCreatetime != null" >
-        ima_createtime = #{record.imaCreatetime,jdbcType=VARCHAR},
-      </if>
-      <if test="record.imaCreateuser != null" >
-        ima_createuser = #{record.imaCreateuser,jdbcType=VARCHAR},
-      </if>
-      <if test="record.imaUpdatetime != null" >
-        ima_updatetime = #{record.imaUpdatetime,jdbcType=VARCHAR},
-      </if>
-      <if test="record.imaUpdateuser != null" >
-        ima_updateuser = #{record.imaUpdateuser,jdbcType=VARCHAR},
-      </if>
-    </set>
-    <if test="_parameter != null" >
-      <include refid="Update_By_Example_Where_Clause" />
-    </if>
-  </update>
-  <update id="updateByExample" parameterType="map" >
-    update iftb_machine_action
-    set ima_id = #{record.imaId,jdbcType=VARCHAR},
-      mm_id = #{record.mmId,jdbcType=INTEGER},
-      ma_id = #{record.maId,jdbcType=INTEGER},
-      ima_code = #{record.imaCode,jdbcType=VARCHAR},
-      ima_name = #{record.imaName,jdbcType=VARCHAR},
-      ima_address = #{record.imaAddress,jdbcType=VARCHAR},
-      ima_port = #{record.imaPort,jdbcType=VARCHAR},
-      ima_status = #{record.imaStatus,jdbcType=VARCHAR},
-      ima_createtime = #{record.imaCreatetime,jdbcType=VARCHAR},
-      ima_createuser = #{record.imaCreateuser,jdbcType=VARCHAR},
-      ima_updatetime = #{record.imaUpdatetime,jdbcType=VARCHAR},
-      ima_updateuser = #{record.imaUpdateuser,jdbcType=VARCHAR}
-    <if test="_parameter != null" >
-      <include refid="Update_By_Example_Where_Clause" />
-    </if>
-  </update>
-  <update id="updateByPrimaryKeySelective" parameterType="com.fangda.skylot.mathine.model.parking.IftbMachineAction" >
-    update iftb_machine_action
-    <set >
-      <if test="mmId != null" >
-        mm_id = #{mmId,jdbcType=INTEGER},
-      </if>
-      <if test="maId != null" >
-        ma_id = #{maId,jdbcType=INTEGER},
-      </if>
-      <if test="imaCode != null" >
-        ima_code = #{imaCode,jdbcType=VARCHAR},
-      </if>
-      <if test="imaName != null" >
-        ima_name = #{imaName,jdbcType=VARCHAR},
-      </if>
-      <if test="imaAddress != null" >
-        ima_address = #{imaAddress,jdbcType=VARCHAR},
-      </if>
-      <if test="imaPort != null" >
-        ima_port = #{imaPort,jdbcType=VARCHAR},
-      </if>
-      <if test="imaStatus != null" >
-        ima_status = #{imaStatus,jdbcType=VARCHAR},
-      </if>
-      <if test="imaCreatetime != null" >
-        ima_createtime = #{imaCreatetime,jdbcType=VARCHAR},
-      </if>
-      <if test="imaCreateuser != null" >
-        ima_createuser = #{imaCreateuser,jdbcType=VARCHAR},
-      </if>
-      <if test="imaUpdatetime != null" >
-        ima_updatetime = #{imaUpdatetime,jdbcType=VARCHAR},
-      </if>
-      <if test="imaUpdateuser != null" >
-        ima_updateuser = #{imaUpdateuser,jdbcType=VARCHAR},
-      </if>
-    </set>
-    where ima_id = #{imaId,jdbcType=VARCHAR}
-  </update>
-  <update id="updateByPrimaryKey" parameterType="com.fangda.skylot.mathine.model.parking.IftbMachineAction" >
-    update iftb_machine_action
-    set mm_id = #{mmId,jdbcType=INTEGER},
-      ma_id = #{maId,jdbcType=INTEGER},
-      ima_code = #{imaCode,jdbcType=VARCHAR},
-      ima_name = #{imaName,jdbcType=VARCHAR},
-      ima_address = #{imaAddress,jdbcType=VARCHAR},
-      ima_port = #{imaPort,jdbcType=VARCHAR},
-      ima_status = #{imaStatus,jdbcType=VARCHAR},
-      ima_createtime = #{imaCreatetime,jdbcType=VARCHAR},
-      ima_createuser = #{imaCreateuser,jdbcType=VARCHAR},
-      ima_updatetime = #{imaUpdatetime,jdbcType=VARCHAR},
-      ima_updateuser = #{imaUpdateuser,jdbcType=VARCHAR}
-    where ima_id = #{imaId,jdbcType=VARCHAR}
-  </update>
+    <insert id="insert" parameterType="com.fangda.skylot.mathine.model.parking.IftbMachineAction">
+        INSERT INTO iftb_machine_action (ima_id, mm_id, ma_id,
+                                         ima_code, ima_name, ima_address,
+                                         ima_port, ima_status, ima_createtime,
+                                         ima_createuser, ima_updatetime, ima_updateuser, ima_error_json, ima_physical_status
+        )
+        VALUES (#{imaId,jdbcType=VARCHAR}, #{mmId,jdbcType=INTEGER}, #{maId,jdbcType=INTEGER},
+                                           #{imaCode,jdbcType=VARCHAR}, #{imaName,jdbcType=VARCHAR},
+                                           #{imaAddress,jdbcType=VARCHAR},
+                                           #{imaPort,jdbcType=VARCHAR}, #{imaStatus,jdbcType=VARCHAR},
+                                           #{imaCreatetime,jdbcType=VARCHAR},
+                                           #{imaCreateuser,jdbcType=VARCHAR}, #{imaUpdatetime,jdbcType=VARCHAR},
+                #{imaUpdateuser,jdbcType=VARCHAR}, #{imaErrorJson,jdbcType=VARCHAR},
+                #{imaPhysicalStatus,jdbcType=VARCHAR}
+        )
+    </insert>
+    <insert id="insertSelective" parameterType="com.fangda.skylot.mathine.model.parking.IftbMachineAction">
+        insert into iftb_machine_action
+        <trim prefix="(" suffix=")" suffixOverrides=",">
+            <if test="imaId != null">
+                ima_id,
+            </if>
+            <if test="mmId != null">
+                mm_id,
+            </if>
+            <if test="maId != null">
+                ma_id,
+            </if>
+            <if test="imaCode != null">
+                ima_code,
+            </if>
+            <if test="imaName != null">
+                ima_name,
+            </if>
+            <if test="imaAddress != null">
+                ima_address,
+            </if>
+            <if test="imaPort != null">
+                ima_port,
+            </if>
+            <if test="imaStatus != null">
+                ima_status,
+            </if>
+            <if test="imaCreatetime != null">
+                ima_createtime,
+            </if>
+            <if test="imaCreateuser != null">
+                ima_createuser,
+            </if>
+            <if test="imaUpdatetime != null">
+                ima_updatetime,
+            </if>
+            <if test="imaUpdateuser != null">
+                ima_updateuser,
+            </if>
+            <if test="imaErrorJson != null">
+                ima_error_json,
+            </if>
+            <if test="imaPhysicalStatus != null">
+                ima_physical_status,
+            </if>
+        </trim>
+        <trim prefix="values (" suffix=")" suffixOverrides=",">
+            <if test="imaId != null">
+                #{imaId,jdbcType=VARCHAR},
+            </if>
+            <if test="mmId != null">
+                #{mmId,jdbcType=INTEGER},
+            </if>
+            <if test="maId != null">
+                #{maId,jdbcType=INTEGER},
+            </if>
+            <if test="imaCode != null">
+                #{imaCode,jdbcType=VARCHAR},
+            </if>
+            <if test="imaName != null">
+                #{imaName,jdbcType=VARCHAR},
+            </if>
+            <if test="imaAddress != null">
+                #{imaAddress,jdbcType=VARCHAR},
+            </if>
+            <if test="imaPort != null">
+                #{imaPort,jdbcType=VARCHAR},
+            </if>
+            <if test="imaStatus != null">
+                #{imaStatus,jdbcType=VARCHAR},
+            </if>
+            <if test="imaCreatetime != null">
+                #{imaCreatetime,jdbcType=VARCHAR},
+            </if>
+            <if test="imaCreateuser != null">
+                #{imaCreateuser,jdbcType=VARCHAR},
+            </if>
+            <if test="imaUpdatetime != null">
+                #{imaUpdatetime,jdbcType=VARCHAR},
+            </if>
+            <if test="imaUpdateuser != null">
+                #{imaUpdateuser,jdbcType=VARCHAR},
+            </if>
+            <if test="imaErrorJson != null">
+                #{imaErrorJson,jdbcType=VARCHAR},
+            </if>
+            <if test="imaPhysicalStatus != null">
+                #{imaPhysicalStatus,jdbcType=VARCHAR},
+            </if>
+        </trim>
+    </insert>
+    <select id="countByExample" parameterType="com.fangda.skylot.mathine.model.parking.IftbMachineActionCriteria"
+            resultType="java.lang.Integer">
+        select count(*) from iftb_machine_action
+        <if test="_parameter != null">
+            <include refid="Example_Where_Clause"/>
+        </if>
+    </select>
+    <update id="updateByExampleSelective" parameterType="map">
+        update iftb_machine_action
+        <set>
+            <if test="record.imaId != null">
+                ima_id = #{record.imaId,jdbcType=VARCHAR},
+            </if>
+            <if test="record.mmId != null">
+                mm_id = #{record.mmId,jdbcType=INTEGER},
+            </if>
+            <if test="record.maId != null">
+                ma_id = #{record.maId,jdbcType=INTEGER},
+            </if>
+            <if test="record.imaCode != null">
+                ima_code = #{record.imaCode,jdbcType=VARCHAR},
+            </if>
+            <if test="record.imaName != null">
+                ima_name = #{record.imaName,jdbcType=VARCHAR},
+            </if>
+            <if test="record.imaAddress != null">
+                ima_address = #{record.imaAddress,jdbcType=VARCHAR},
+            </if>
+            <if test="record.imaPort != null">
+                ima_port = #{record.imaPort,jdbcType=VARCHAR},
+            </if>
+            <if test="record.imaStatus != null">
+                ima_status = #{record.imaStatus,jdbcType=VARCHAR},
+            </if>
+            <if test="record.imaCreatetime != null">
+                ima_createtime = #{record.imaCreatetime,jdbcType=VARCHAR},
+            </if>
+            <if test="record.imaCreateuser != null">
+                ima_createuser = #{record.imaCreateuser,jdbcType=VARCHAR},
+            </if>
+            <if test="record.imaUpdatetime != null">
+                ima_updatetime = #{record.imaUpdatetime,jdbcType=VARCHAR},
+            </if>
+            <if test="record.imaUpdateuser != null">
+                ima_updateuser = #{record.imaUpdateuser,jdbcType=VARCHAR},
+            </if>
+            <if test="record.imaErrorJson != null">
+                ima_error_json = #{record.imaErrorJson,jdbcType=VARCHAR},
+            </if>
+            <if test="record.imaPhysicalStatus != null">
+                ima_physical_status = #{record.imaPhysicalStatus,jdbcType=VARCHAR},
+            </if>
+        </set>
+        <if test="_parameter != null">
+            <include refid="Update_By_Example_Where_Clause"/>
+        </if>
+    </update>
+    <update id="updateByExample" parameterType="map">
+        update iftb_machine_action
+        set ima_id = #{record.imaId,jdbcType=VARCHAR},
+        mm_id = #{record.mmId,jdbcType=INTEGER},
+        ma_id = #{record.maId,jdbcType=INTEGER},
+        ima_code = #{record.imaCode,jdbcType=VARCHAR},
+        ima_name = #{record.imaName,jdbcType=VARCHAR},
+        ima_address = #{record.imaAddress,jdbcType=VARCHAR},
+        ima_port = #{record.imaPort,jdbcType=VARCHAR},
+        ima_status = #{record.imaStatus,jdbcType=VARCHAR},
+        ima_createtime = #{record.imaCreatetime,jdbcType=VARCHAR},
+        ima_createuser = #{record.imaCreateuser,jdbcType=VARCHAR},
+        ima_updatetime = #{record.imaUpdatetime,jdbcType=VARCHAR},
+        ima_updateuser = #{record.imaUpdateuser,jdbcType=VARCHAR},
+        ima_error_json = #{record.imaErrorJson,jdbcType=VARCHAR},
+        ima_physical_status = #{record.imaPhysicalStatus,jdbcType=VARCHAR}
+        <if test="_parameter != null">
+            <include refid="Update_By_Example_Where_Clause"/>
+        </if>
+    </update>
+    <update id="updateByPrimaryKeySelective" parameterType="com.fangda.skylot.mathine.model.parking.IftbMachineAction">
+        update iftb_machine_action
+        <set>
+            <if test="mmId != null">
+                mm_id = #{mmId,jdbcType=INTEGER},
+            </if>
+            <if test="maId != null">
+                ma_id = #{maId,jdbcType=INTEGER},
+            </if>
+            <if test="imaCode != null">
+                ima_code = #{imaCode,jdbcType=VARCHAR},
+            </if>
+            <if test="imaName != null">
+                ima_name = #{imaName,jdbcType=VARCHAR},
+            </if>
+            <if test="imaAddress != null">
+                ima_address = #{imaAddress,jdbcType=VARCHAR},
+            </if>
+            <if test="imaPort != null">
+                ima_port = #{imaPort,jdbcType=VARCHAR},
+            </if>
+            <if test="imaStatus != null">
+                ima_status = #{imaStatus,jdbcType=VARCHAR},
+            </if>
+            <if test="imaCreatetime != null">
+                ima_createtime = #{imaCreatetime,jdbcType=VARCHAR},
+            </if>
+            <if test="imaCreateuser != null">
+                ima_createuser = #{imaCreateuser,jdbcType=VARCHAR},
+            </if>
+            <if test="imaUpdatetime != null">
+                ima_updatetime = #{imaUpdatetime,jdbcType=VARCHAR},
+            </if>
+            <if test="imaUpdateuser != null">
+                ima_updateuser = #{imaUpdateuser,jdbcType=VARCHAR},
+            </if>
+            <if test="imaErrorJson != null">
+                ima_error_json = #{imaErrorJson,jdbcType=VARCHAR},
+            </if>
+            <if test="imaPhysicalStatus != null">
+                ima_physical_status = #{imaPhysicalStatus,jdbcType=VARCHAR},
+            </if>
+        </set>
+        where ima_id = #{imaId,jdbcType=VARCHAR}
+    </update>
+    <update id="updateByPrimaryKey" parameterType="com.fangda.skylot.mathine.model.parking.IftbMachineAction">
+        UPDATE iftb_machine_action
+        SET mm_id               = #{mmId,jdbcType=INTEGER},
+            ma_id               = #{maId,jdbcType=INTEGER},
+            ima_code            = #{imaCode,jdbcType=VARCHAR},
+            ima_name            = #{imaName,jdbcType=VARCHAR},
+            ima_address         = #{imaAddress,jdbcType=VARCHAR},
+            ima_port            = #{imaPort,jdbcType=VARCHAR},
+            ima_status          = #{imaStatus,jdbcType=VARCHAR},
+            ima_createtime      = #{imaCreatetime,jdbcType=VARCHAR},
+            ima_createuser      = #{imaCreateuser,jdbcType=VARCHAR},
+            ima_updatetime      = #{imaUpdatetime,jdbcType=VARCHAR},
+            ima_updateuser      = #{imaUpdateuser,jdbcType=VARCHAR},
+            ima_error_json      = #{imaErrorJson,jdbcType=VARCHAR},
+            ima_physical_status = #{imaPhysicalStatus,jdbcType=VARCHAR}
+        WHERE ima_id = #{imaId,jdbcType=VARCHAR}
+    </update>
 </mapper>
\ No newline at end of file
Index: src/main/java/com/fangda/skylot/mathine/mapper/parking/TstbFtpCarInformationMapper.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/mapper/parking/TstbFtpCarInformationMapper.xml	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/mapper/parking/TstbFtpCarInformationMapper.xml	(date 1517195908000)
@@ -1,262 +1,335 @@
 <?xml version="1.0" encoding="UTF-8" ?>
 <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
-<mapper namespace="com.fangda.skylot.mathine.dao.parking.TstbFtpCarInformationMapper" >
-  <resultMap id="BaseResultMap" type="com.fangda.skylot.mathine.model.parking.TstbFtpCarInformation" >
-    <id column="tfc_id" property="tfcId" jdbcType="INTEGER" />
-    <result column="ima_id" property="imaId" jdbcType="VARCHAR"/>
-    <result column="tfc_car_code" property="tfcCarCode" jdbcType="VARCHAR" />
-    <result column="tfc_status" property="tfcStatus" jdbcType="INTEGER" />
-    <result column="tfc_createtime" property="tfcCreatetime" jdbcType="VARCHAR" />
-    <result column="tfc_createuser" property="tfcCreateuser" jdbcType="VARCHAR" />
-    <result column="tfc_updatetime" property="tfcUpdatetime" jdbcType="VARCHAR" />
-    <result column="tfc_updateuser" property="tfcUpdateuser" jdbcType="VARCHAR" />
-  </resultMap>
-  <sql id="Example_Where_Clause" >
-    <where >
-      <foreach collection="oredCriteria" item="criteria" separator="or" >
-        <if test="criteria.valid" >
-          <trim prefix="(" suffix=")" prefixOverrides="and" >
-            <foreach collection="criteria.criteria" item="criterion" >
-              <choose >
-                <when test="criterion.noValue" >
-                  and ${criterion.condition}
-                </when>
-                <when test="criterion.singleValue" >
-                  and ${criterion.condition} #{criterion.value}
-                </when>
-                <when test="criterion.betweenValue" >
-                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
-                </when>
-                <when test="criterion.listValue" >
-                  and ${criterion.condition}
-                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
-                    #{listItem}
-                  </foreach>
-                </when>
-              </choose>
-            </foreach>
-          </trim>
-        </if>
-      </foreach>
-    </where>
-  </sql>
-  <sql id="Update_By_Example_Where_Clause" >
-    <where >
-      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
-        <if test="criteria.valid" >
-          <trim prefix="(" suffix=")" prefixOverrides="and" >
-            <foreach collection="criteria.criteria" item="criterion" >
-              <choose >
-                <when test="criterion.noValue" >
-                  and ${criterion.condition}
-                </when>
-                <when test="criterion.singleValue" >
-                  and ${criterion.condition} #{criterion.value}
-                </when>
-                <when test="criterion.betweenValue" >
-                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
-                </when>
-                <when test="criterion.listValue" >
-                  and ${criterion.condition}
-                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
-                    #{listItem}
-                  </foreach>
-                </when>
-              </choose>
-            </foreach>
-          </trim>
-        </if>
-      </foreach>
-    </where>
-  </sql>
-  <sql id="Base_Column_List" >
-    tfc_id, ima_id, tfc_car_code, tfc_status, tfc_createtime, tfc_createuser, tfc_updatetime, 
-    tfc_updateuser
-  </sql>
-  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.fangda.skylot.mathine.model.parking.TstbFtpCarInformationCriteria" >
-    select
-    <if test="distinct" >
-      distinct
-    </if>
-    <include refid="Base_Column_List" />
-    from tstb_ftp_car_information
-    <if test="_parameter != null" >
-      <include refid="Example_Where_Clause" />
-    </if>
-    <if test="orderByClause != null" >
-      order by ${orderByClause}
-    </if>
-    <if test="page != null" >
-      limit #{page.begin} , #{page.length}
-    </if>
-  </select>
-  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
-    select 
-    <include refid="Base_Column_List" />
-    from tstb_ftp_car_information
-    where tfc_id = #{tfcId,jdbcType=INTEGER}
-  </select>
-  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
-    delete from tstb_ftp_car_information
-    where tfc_id = #{tfcId,jdbcType=INTEGER}
-  </delete>
-  <delete id="deleteByExample" parameterType="com.fangda.skylot.mathine.model.parking.TstbFtpCarInformationCriteria" >
-    delete from tstb_ftp_car_information
-    <if test="_parameter != null" >
-      <include refid="Example_Where_Clause" />
-    </if>
-  </delete>
-  <insert id="insert" parameterType="com.fangda.skylot.mathine.model.parking.TstbFtpCarInformation" >
-    insert into tstb_ftp_car_information (tfc_id, ima_id, tfc_car_code, 
-      tfc_status, tfc_createtime, tfc_createuser, 
-      tfc_updatetime, tfc_updateuser)
-    values (#{tfcId,jdbcType=INTEGER}, #{imaId,jdbcType=VARCHAR}, #{tfcCarCode,jdbcType=VARCHAR},
-      #{tfcStatus,jdbcType=INTEGER}, #{tfcCreatetime,jdbcType=VARCHAR}, #{tfcCreateuser,jdbcType=VARCHAR}, 
-      #{tfcUpdatetime,jdbcType=VARCHAR}, #{tfcUpdateuser,jdbcType=VARCHAR})
-  </insert>
-  <insert id="insertSelective" parameterType="com.fangda.skylot.mathine.model.parking.TstbFtpCarInformation" >
-    insert into tstb_ftp_car_information
-    <trim prefix="(" suffix=")" suffixOverrides="," >
-      <if test="tfcId != null" >
-        tfc_id,
-      </if>
-      <if test="imaId != null" >
-        ima_id,
-      </if>
-      <if test="tfcCarCode != null" >
-        tfc_car_code,
-      </if>
-      <if test="tfcStatus != null" >
-        tfc_status,
-      </if>
-      <if test="tfcCreatetime != null" >
-        tfc_createtime,
-      </if>
-      <if test="tfcCreateuser != null" >
-        tfc_createuser,
-      </if>
-      <if test="tfcUpdatetime != null" >
-        tfc_updatetime,
-      </if>
-      <if test="tfcUpdateuser != null" >
-        tfc_updateuser,
-      </if>
-    </trim>
-    <trim prefix="values (" suffix=")" suffixOverrides="," >
-      <if test="tfcId != null" >
-        #{tfcId,jdbcType=INTEGER},
-      </if>
-      <if test="imaId != null" >
-        #{imaId,jdbcType=VARCHAR},
-      </if>
-      <if test="tfcCarCode != null" >
-        #{tfcCarCode,jdbcType=VARCHAR},
-      </if>
-      <if test="tfcStatus != null" >
-        #{tfcStatus,jdbcType=INTEGER},
-      </if>
-      <if test="tfcCreatetime != null" >
-        #{tfcCreatetime,jdbcType=VARCHAR},
-      </if>
-      <if test="tfcCreateuser != null" >
-        #{tfcCreateuser,jdbcType=VARCHAR},
-      </if>
-      <if test="tfcUpdatetime != null" >
-        #{tfcUpdatetime,jdbcType=VARCHAR},
-      </if>
-      <if test="tfcUpdateuser != null" >
-        #{tfcUpdateuser,jdbcType=VARCHAR},
-      </if>
-    </trim>
-  </insert>
-  <select id="countByExample" parameterType="com.fangda.skylot.mathine.model.parking.TstbFtpCarInformationCriteria" resultType="java.lang.Integer" >
-    select count(*) from tstb_ftp_car_information
-    <if test="_parameter != null" >
-      <include refid="Example_Where_Clause" />
-    </if>
-  </select>
-  <update id="updateByExampleSelective" parameterType="map" >
-    update tstb_ftp_car_information
-    <set >
-      <if test="record.tfcId != null" >
-        tfc_id = #{record.tfcId,jdbcType=INTEGER},
-      </if>
-      <if test="record.imaId != null" >
-        ima_id = #{record.imaId,jdbcType=VARCHAR},
-      </if>
-      <if test="record.tfcCarCode != null" >
-        tfc_car_code = #{record.tfcCarCode,jdbcType=VARCHAR},
-      </if>
-      <if test="record.tfcStatus != null" >
-        tfc_status = #{record.tfcStatus,jdbcType=INTEGER},
-      </if>
-      <if test="record.tfcCreatetime != null" >
-        tfc_createtime = #{record.tfcCreatetime,jdbcType=VARCHAR},
-      </if>
-      <if test="record.tfcCreateuser != null" >
-        tfc_createuser = #{record.tfcCreateuser,jdbcType=VARCHAR},
-      </if>
-      <if test="record.tfcUpdatetime != null" >
-        tfc_updatetime = #{record.tfcUpdatetime,jdbcType=VARCHAR},
-      </if>
-      <if test="record.tfcUpdateuser != null" >
-        tfc_updateuser = #{record.tfcUpdateuser,jdbcType=VARCHAR},
-      </if>
-    </set>
-    <if test="_parameter != null" >
-      <include refid="Update_By_Example_Where_Clause" />
-    </if>
-  </update>
-  <update id="updateByExample" parameterType="map" >
-    update tstb_ftp_car_information
-    set tfc_id = #{record.tfcId,jdbcType=INTEGER},
-    ima_id = #{record.imaId,jdbcType=VARCHAR},
-      tfc_car_code = #{record.tfcCarCode,jdbcType=VARCHAR},
-      tfc_status = #{record.tfcStatus,jdbcType=INTEGER},
-      tfc_createtime = #{record.tfcCreatetime,jdbcType=VARCHAR},
-      tfc_createuser = #{record.tfcCreateuser,jdbcType=VARCHAR},
-      tfc_updatetime = #{record.tfcUpdatetime,jdbcType=VARCHAR},
-      tfc_updateuser = #{record.tfcUpdateuser,jdbcType=VARCHAR}
-    <if test="_parameter != null" >
-      <include refid="Update_By_Example_Where_Clause" />
-    </if>
-  </update>
-  <update id="updateByPrimaryKeySelective" parameterType="com.fangda.skylot.mathine.model.parking.TstbFtpCarInformation" >
-    update tstb_ftp_car_information
-    <set >
-      <if test="imaId != null" >
-        ima_id = #{imaId,jdbcType=VARCHAR},
-      </if>
-      <if test="tfcCarCode != null" >
-        tfc_car_code = #{tfcCarCode,jdbcType=VARCHAR},
-      </if>
-      <if test="tfcStatus != null" >
-        tfc_status = #{tfcStatus,jdbcType=INTEGER},
-      </if>
-      <if test="tfcCreatetime != null" >
-        tfc_createtime = #{tfcCreatetime,jdbcType=VARCHAR},
-      </if>
-      <if test="tfcCreateuser != null" >
-        tfc_createuser = #{tfcCreateuser,jdbcType=VARCHAR},
-      </if>
-      <if test="tfcUpdatetime != null" >
-        tfc_updatetime = #{tfcUpdatetime,jdbcType=VARCHAR},
-      </if>
-      <if test="tfcUpdateuser != null" >
-        tfc_updateuser = #{tfcUpdateuser,jdbcType=VARCHAR},
-      </if>
-    </set>
-    where tfc_id = #{tfcId,jdbcType=INTEGER}
-  </update>
-  <update id="updateByPrimaryKey" parameterType="com.fangda.skylot.mathine.model.parking.TstbFtpCarInformation" >
-    update tstb_ftp_car_information
-    set ima_id = #{imaId,jdbcType=VARCHAR},
-      tfc_car_code = #{tfcCarCode,jdbcType=VARCHAR},
-      tfc_status = #{tfcStatus,jdbcType=INTEGER},
-      tfc_createtime = #{tfcCreatetime,jdbcType=VARCHAR},
-      tfc_createuser = #{tfcCreateuser,jdbcType=VARCHAR},
-      tfc_updatetime = #{tfcUpdatetime,jdbcType=VARCHAR},
-      tfc_updateuser = #{tfcUpdateuser,jdbcType=VARCHAR}
-    where tfc_id = #{tfcId,jdbcType=INTEGER}
-  </update>
+<mapper namespace="com.fangda.skylot.mathine.dao.parking.TstbFtpCarInformationMapper">
+    <resultMap id="BaseResultMap" type="com.fangda.skylot.mathine.model.parking.TstbFtpCarInformation">
+        <id column="tfc_id" property="tfcId" jdbcType="INTEGER"/>
+        <result column="ima_id" property="imaId" jdbcType="VARCHAR"/>
+        <result column="tfc_car_code" property="tfcCarCode" jdbcType="VARCHAR"/>
+        <result column="tfc_status" property="tfcStatus" jdbcType="INTEGER"/>
+        <result column="tfc_createtime" property="tfcCreatetime" jdbcType="VARCHAR"/>
+        <result column="tfc_createuser" property="tfcCreateuser" jdbcType="VARCHAR"/>
+        <result column="tfc_updatetime" property="tfcUpdatetime" jdbcType="VARCHAR"/>
+        <result column="tfc_updateuser" property="tfcUpdateuser" jdbcType="VARCHAR"/>
+        <result column="tfc_car_color" property="tfcCarColor" jdbcType="VARCHAR"/>
+        <result column="tfc_car_type" property="tfcCarType" jdbcType="VARCHAR"/>
+        <result column="tfc_car_action" property="tfcCarAction" jdbcType="VARCHAR"/>
+        <result column="tfc_car_in_code" property="tfcCarInCode" jdbcType="VARCHAR"/>
+        <result column="tfc_car_in_type" property="tfcCarInType" jdbcType="VARCHAR"/>
+        <result column="tfc_car_in_color" property="tfcCarInColor" jdbcType="VARCHAR"/>
+        <result column="tfc_is_canceled" property="tfcIsCanceled" jdbcType="VARCHAR"/>
+    </resultMap>
+    <sql id="Example_Where_Clause">
+        <where>
+            <foreach collection="oredCriteria" item="criteria" separator="or">
+                <if test="criteria.valid">
+                    <trim prefix="(" suffix=")" prefixOverrides="and">
+                        <foreach collection="criteria.criteria" item="criterion">
+                            <choose>
+                                <when test="criterion.noValue">
+                                    and ${criterion.condition}
+                                </when>
+                                <when test="criterion.singleValue">
+                                    and ${criterion.condition} #{criterion.value}
+                                </when>
+                                <when test="criterion.betweenValue">
+                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                                </when>
+                                <when test="criterion.listValue">
+                                    and ${criterion.condition}
+                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
+                                             separator=",">
+                                        #{listItem}
+                                    </foreach>
+                                </when>
+                            </choose>
+                        </foreach>
+                    </trim>
+                </if>
+            </foreach>
+        </where>
+    </sql>
+    <sql id="Update_By_Example_Where_Clause">
+        <where>
+            <foreach collection="example.oredCriteria" item="criteria" separator="or">
+                <if test="criteria.valid">
+                    <trim prefix="(" suffix=")" prefixOverrides="and">
+                        <foreach collection="criteria.criteria" item="criterion">
+                            <choose>
+                                <when test="criterion.noValue">
+                                    and ${criterion.condition}
+                                </when>
+                                <when test="criterion.singleValue">
+                                    and ${criterion.condition} #{criterion.value}
+                                </when>
+                                <when test="criterion.betweenValue">
+                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                                </when>
+                                <when test="criterion.listValue">
+                                    and ${criterion.condition}
+                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
+                                             separator=",">
+                                        #{listItem}
+                                    </foreach>
+                                </when>
+                            </choose>
+                        </foreach>
+                    </trim>
+                </if>
+            </foreach>
+        </where>
+    </sql>
+    <sql id="Base_Column_List">
+        tfc_id, ima_id, tfc_car_code, tfc_status, tfc_createtime, tfc_createuser, tfc_updatetime,
+        tfc_updateuser, tfc_car_color, tfc_car_type, tfc_car_in_code, tfc_car_in_type, tfc_car_in_color, tfc_car_action, tfc_is_canceled
+    </sql>
+    <select id="selectByExample" resultMap="BaseResultMap"
+            parameterType="com.fangda.skylot.mathine.model.parking.TstbFtpCarInformationCriteria">
+        select
+        <if test="distinct">
+            distinct
+        </if>
+        <include refid="Base_Column_List"/>
+        from tstb_ftp_car_information
+        <if test="_parameter != null">
+            <include refid="Example_Where_Clause"/>
+        </if>
+        <if test="orderByClause != null">
+            order by ${orderByClause}
+        </if>
+        <if test="page != null">
+            limit #{page.begin} , #{page.length}
+        </if>
+    </select>
+    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
+        select
+        <include refid="Base_Column_List"/>
+        from tstb_ftp_car_information
+        where tfc_id = #{tfcId,jdbcType=INTEGER}
+    </select>
+    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
+        DELETE FROM tstb_ftp_car_information
+        WHERE tfc_id = #{tfcId,jdbcType=INTEGER}
+    </delete>
+    <delete id="deleteByExample" parameterType="com.fangda.skylot.mathine.model.parking.TstbFtpCarInformationCriteria">
+        delete from tstb_ftp_car_information
+        <if test="_parameter != null">
+            <include refid="Example_Where_Clause"/>
+        </if>
+    </delete>
+    <insert id="insert" parameterType="com.fangda.skylot.mathine.model.parking.TstbFtpCarInformation">
+        INSERT INTO tstb_ftp_car_information (tfc_id, ima_id, tfc_car_code,
+                                              tfc_status, tfc_createtime, tfc_createuser,
+                                              tfc_updatetime, tfc_updateuser, tfc_car_action, tfc_is_canceled)
+        VALUES (#{tfcId,jdbcType=INTEGER}, #{imaId,jdbcType=VARCHAR}, #{tfcCarCode,jdbcType=VARCHAR},
+                #{tfcStatus,jdbcType=INTEGER}, #{tfcCreatetime,jdbcType=VARCHAR}, #{tfcCreateuser,jdbcType=VARCHAR},
+                #{tfcUpdatetime,jdbcType=VARCHAR}, #{tfcUpdateuser,jdbcType=VARCHAR}, #{tfcCarAction,jdbcType=VARCHAR},
+                #{tfcIsCanceled,jdbcType=VARCHAR})
+    </insert>
+    <insert id="insertSelective" parameterType="com.fangda.skylot.mathine.model.parking.TstbFtpCarInformation">
+        insert into tstb_ftp_car_information
+        <trim prefix="(" suffix=")" suffixOverrides=",">
+            <if test="tfcId != null">
+                tfc_id,
+            </if>
+            <if test="imaId != null">
+                ima_id,
+            </if>
+            <if test="tfcCarCode != null">
+                tfc_car_code,
+            </if>
+            <if test="tfcStatus != null">
+                tfc_status,
+            </if>
+            <if test="tfcCreatetime != null">
+                tfc_createtime,
+            </if>
+            <if test="tfcCreateuser != null">
+                tfc_createuser,
+            </if>
+            <if test="tfcUpdatetime != null">
+                tfc_updatetime,
+            </if>
+            <if test="tfcUpdateuser != null">
+                tfc_updateuser,
+            </if>
+            <if test="tfcCarAction != null">
+                tfc_car_action,
+            </if>
+            <if test="tfcIsCanceled != null">
+                tfc_is_canceled,
+            </if>
+        </trim>
+        <trim prefix="values (" suffix=")" suffixOverrides=",">
+            <if test="tfcId != null">
+                #{tfcId,jdbcType=INTEGER},
+            </if>
+            <if test="imaId != null">
+                #{imaId,jdbcType=VARCHAR},
+            </if>
+            <if test="tfcCarCode != null">
+                #{tfcCarCode,jdbcType=VARCHAR},
+            </if>
+            <if test="tfcStatus != null">
+                #{tfcStatus,jdbcType=INTEGER},
+            </if>
+            <if test="tfcCreatetime != null">
+                #{tfcCreatetime,jdbcType=VARCHAR},
+            </if>
+            <if test="tfcCreateuser != null">
+                #{tfcCreateuser,jdbcType=VARCHAR},
+            </if>
+            <if test="tfcUpdatetime != null">
+                #{tfcUpdatetime,jdbcType=VARCHAR},
+            </if>
+            <if test="tfcUpdateuser != null">
+                #{tfcUpdateuser,jdbcType=VARCHAR},
+            </if>
+            <if test="tfcCarAction != null">
+                #{tfcCarAction,jdbcType=VARCHAR},
+            </if>
+            <if test="tfcIsCanceled != null">
+                #{tfcIsCanceled,jdbcType=VARCHAR},
+            </if>
+        </trim>
+    </insert>
+    <select id="countByExample" parameterType="com.fangda.skylot.mathine.model.parking.TstbFtpCarInformationCriteria"
+            resultType="java.lang.Integer">
+        select count(*) from tstb_ftp_car_information
+        <if test="_parameter != null">
+            <include refid="Example_Where_Clause"/>
+        </if>
+    </select>
+    <update id="updateByExampleSelective" parameterType="map">
+        update tstb_ftp_car_information
+        <set>
+            <if test="record.tfcId != null">
+                tfc_id = #{record.tfcId,jdbcType=INTEGER},
+            </if>
+            <if test="record.imaId != null">
+                ima_id = #{record.imaId,jdbcType=VARCHAR},
+            </if>
+            <if test="record.tfcCarCode != null">
+                tfc_car_code = #{record.tfcCarCode,jdbcType=VARCHAR},
+            </if>
+            <if test="record.tfcStatus != null">
+                tfc_status = #{record.tfcStatus,jdbcType=INTEGER},
+            </if>
+            <if test="record.tfcCreatetime != null">
+                tfc_createtime = #{record.tfcCreatetime,jdbcType=VARCHAR},
+            </if>
+            <if test="record.tfcCreateuser != null">
+                tfc_createuser = #{record.tfcCreateuser,jdbcType=VARCHAR},
+            </if>
+            <if test="record.tfcUpdatetime != null">
+                tfc_updatetime = #{record.tfcUpdatetime,jdbcType=VARCHAR},
+            </if>
+            <if test="record.tfcUpdateuser != null">
+                tfc_updateuser = #{record.tfcUpdateuser,jdbcType=VARCHAR},
+            </if>
+            <if test="record.tfcCarColor != null">
+                tfc_car_color = #{record.tfcCarColor,jdbcType=VARCHAR},
+            </if>
+            <if test="record.tfcCarType != null">
+                tfc_car_type = #{record.tfcCarType,jdbcType=VARCHAR},
+            </if>
+            <if test="record.tfcCarInCode != null">
+                tfc_car_in_code = #{record.tfcCarInCode,jdbcType=VARCHAR},
+            </if>
+            <if test="record.tfcCarInType != null">
+                tfc_car_in_type = #{record.tfcCarInType,jdbcType=VARCHAR},
+            </if>
+            <if test="record.tfcCarInColor != null">
+                tfc_car_in_color = #{record.tfcCarInColor,jdbcType=VARCHAR},
+            </if>
+            <if test="record.tfcIsCanceled != null">
+                tfc_is_canceled = #{record.tfcIsCanceled,jdbcType=VARCHAR},
+            </if>
+        </set>
+        <if test="_parameter != null">
+            <include refid="Update_By_Example_Where_Clause"/>
+        </if>
+    </update>
+    <update id="updateByExample" parameterType="map">
+        update tstb_ftp_car_information
+        set tfc_id = #{record.tfcId,jdbcType=INTEGER},
+        ima_id = #{record.imaId,jdbcType=VARCHAR},
+        tfc_car_code = #{record.tfcCarCode,jdbcType=VARCHAR},
+        tfc_status = #{record.tfcStatus,jdbcType=INTEGER},
+        tfc_createtime = #{record.tfcCreatetime,jdbcType=VARCHAR},
+        tfc_createuser = #{record.tfcCreateuser,jdbcType=VARCHAR},
+        tfc_updatetime = #{record.tfcUpdatetime,jdbcType=VARCHAR},
+        tfc_updateuser = #{record.tfcUpdateuser,jdbcType=VARCHAR},
+        tfc_car_color = #{record.tfcCarColor,jdbcType=VARCHAR},
+        tfc_car_type = #{record.tfcCarType,jdbcType=VARCHAR},
+        tfc_car_in_code = #{record.tfcCarInCode,jdbcType=VARCHAR},
+        tfc_car_in_type = #{record.tfcCarInType,jdbcType=VARCHAR},
+        tfc_car_in_color = #{record.tfcCarInColor,jdbcType=VARCHAR},
+        tfc_is_canceled = #{record.tfcIsCanceled,jdbcType=VARCHAR}
+        <if test="_parameter != null">
+            <include refid="Update_By_Example_Where_Clause"/>
+        </if>
+    </update>
+    <update id="updateByPrimaryKeySelective"
+            parameterType="com.fangda.skylot.mathine.model.parking.TstbFtpCarInformation">
+        update tstb_ftp_car_information
+        <set>
+            <if test="imaId != null">
+                ima_id = #{imaId,jdbcType=VARCHAR},
+            </if>
+            <if test="tfcCarCode != null">
+                tfc_car_code = #{tfcCarCode,jdbcType=VARCHAR},
+            </if>
+            <if test="tfcStatus != null">
+                tfc_status = #{tfcStatus,jdbcType=INTEGER},
+            </if>
+            <if test="tfcCreatetime != null">
+                tfc_createtime = #{tfcCreatetime,jdbcType=VARCHAR},
+            </if>
+            <if test="tfcCreateuser != null">
+                tfc_createuser = #{tfcCreateuser,jdbcType=VARCHAR},
+            </if>
+            <if test="tfcUpdatetime != null">
+                tfc_updatetime = #{tfcUpdatetime,jdbcType=VARCHAR},
+            </if>
+            <if test="tfcUpdateuser != null">
+                tfc_updateuser = #{tfcUpdateuser,jdbcType=VARCHAR},
+            </if>
+            <if test="tfcCarColor != null">
+                tfc_car_color = #{tfcCarColor,jdbcType=VARCHAR},
+            </if>
+            <if test="tfcCarType != null">
+                tfc_car_type = #{tfcCarType,jdbcType=VARCHAR},
+            </if>
+            <if test="tfcCarInCode != null">
+                tfc_car_in_code = #{tfcCarInCode,jdbcType=VARCHAR},
+            </if>
+            <if test="tfcCarInType != null">
+                tfc_car_in_type = #{tfcCarInType,jdbcType=VARCHAR},
+            </if>
+            <if test="tfcCarInColor != null">
+                tfc_car_in_color = #{tfcCarInColor,jdbcType=VARCHAR},
+            </if>
+            <if test="tfcIsCanceled != null">
+                tfc_is_canceled = #{tfcCarInColor,jdbcType=VARCHAR},
+            </if>
+        </set>
+        where tfc_id = #{tfcId,jdbcType=INTEGER}
+    </update>
+    <update id="updateByPrimaryKey" parameterType="com.fangda.skylot.mathine.model.parking.TstbFtpCarInformation">
+        UPDATE tstb_ftp_car_information
+        SET ima_id           = #{imaId,jdbcType=VARCHAR},
+            tfc_car_code     = #{tfcCarCode,jdbcType=VARCHAR},
+            tfc_status       = #{tfcStatus,jdbcType=INTEGER},
+            tfc_createtime   = #{tfcCreatetime,jdbcType=VARCHAR},
+            tfc_createuser   = #{tfcCreateuser,jdbcType=VARCHAR},
+            tfc_updatetime   = #{tfcUpdatetime,jdbcType=VARCHAR},
+            tfc_updateuser   = #{tfcUpdateuser,jdbcType=VARCHAR},
+            tfc_car_color    = #{tfcCarColor,jdbcType=VARCHAR},
+            tfc_car_type     = #{tfcCarType,jdbcType=VARCHAR},
+            tfc_car_in_code  = #{tfcCarInCode,jdbcType=VARCHAR},
+            tfc_car_in_type  = #{tfcCarInType,jdbcType=VARCHAR},
+            tfc_car_in_color = #{tfcCarInColor,jdbcType=VARCHAR},
+            tfc_is_canceled  = #{tfcIsCanceled,jdbcType=VARCHAR}
+        WHERE tfc_id = #{tfcId,jdbcType=INTEGER}
+    </update>
 </mapper>
\ No newline at end of file
Index: src/main/java/com/fangda/skylot/mathine/model/customer/IftbItemCustomerCriteria.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/model/customer/IftbItemCustomerCriteria.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/model/customer/IftbItemCustomerCriteria.java	(date 1516372748000)
@@ -496,6 +496,11 @@
             return (Criteria) this;
         }
 
+        public Criteria andIccCarCodeEqualTo(String value) {
+            addCriterion("icc_car_code =", value, "iccCarCode");
+            return (Criteria) this;
+        }
+
         public Criteria andIicEnddateNotIn(List<String> values) {
             addCriterion("iic_enddate not in", values, "iicEnddate");
             return (Criteria) this;
Index: src/main/java/com/fangda/skylot/mathine/model/parking/IftbMachineAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/model/parking/IftbMachineAction.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/model/parking/IftbMachineAction.java	(date 1517388082000)
@@ -25,5 +25,7 @@
     private String imaCreateuser;
     private String imaUpdatetime;
     private String imaUpdateuser;
+    private String imaErrorJson;
+    private String imaPhysicalStatus;
 
 }
\ No newline at end of file
Index: src/main/java/com/fangda/skylot/mathine/model/parking/TstbFtpCarInformation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/model/parking/TstbFtpCarInformation.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/model/parking/TstbFtpCarInformation.java	(date 1517195908000)
@@ -27,5 +27,12 @@
     private String tfcUpdatetime;
 
     private String tfcUpdateuser;
+    private String tfcCarColor;
+    private String tfcCarType;
+    private String tfcCarAction;
+    private String tfcCarInCode;
+    private String tfcCarInType;
+    private String tfcCarInColor;
+    private String tfcIsCanceled;
 
 }
\ No newline at end of file
Index: src/main/java/com/fangda/skylot/mathine/model/utils/ErrorCode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/model/utils/ErrorCode.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/model/utils/ErrorCode.java	(date 1517562591000)
@@ -2,11 +2,13 @@
 
 
 import com.fangda.skylot.mathine.utils.SkylotUtils;
+import com.google.common.collect.Maps;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
-import org.apache.commons.collections.MapUtils;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -19,23 +21,35 @@
 @Builder
 @AllArgsConstructor
 @NoArgsConstructor
+@Slf4j
 public class ErrorCode {
 
     /**
      * 定义错误代码Map
      */
     private Map codeMap;
+    /**
+     * 定义错误代码Map__PLC
+     */
+    private Map codePLC;
+    private String targetLot;
 
     /**
      * 处理错误逻辑
      */
-    public void doErrorLogic(JsonResult result, Map resultMap, String errorCode) {
+    public void doErrorLogic(JsonResult result, Map resultMap, String errorCodes) {
         result.setResultType(false);
         List list = new ArrayList();
-        ErrorCodeObj errorCodeObj = ErrorCodeObj.builder().build();
-        errorCodeObj.setErrorCode(errorCode);
-        errorCodeObj.setErrorMsg(MapUtils.getString(getCodeMap(), getCodeMap().get(errorCode)));
-        list.add(errorCode);
+        String[] errorCodeArray = StringUtils.split(errorCodes, ",");
+        for (int i = 0; i < errorCodeArray.length; i++) {
+            String s = errorCodeArray[i];
+            ErrorCodeObj errorCodeObj = ErrorCodeObj.builder().build();
+            errorCodeObj.setErrorCode(s);
+            errorCodeObj.setErrorMsg(codeMap.get(s).toString());
+            Map errorMap = Maps.newHashMap();
+            errorMap.put("ErrorCodeObj", SkylotUtils.beanToHashMap(errorCodeObj));
+            list.add(errorMap);
+        }
         result.setError(list);
         resultMap = SkylotUtils.beanToHashMap(result);
     }
Index: src/main/java/com/fangda/skylot/mathine/model/utils/ErrorCodeObj.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/model/utils/ErrorCodeObj.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/model/utils/ErrorCodeObj.java	(date 1516377532000)
@@ -13,9 +13,9 @@
     /**
      * 错误代码
      */
-    private String errorCode;
+    private String errorCode = "";
     /**
      * 错误信息
      */
-    private String errorMsg;
+    private String errorMsg = "";
 }
Index: src/main/java/com/fangda/skylot/mathine/model/utils/JsonDataResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/model/utils/JsonDataResult.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/model/utils/JsonDataResult.java	(date 1517560369000)
@@ -17,13 +17,17 @@
 @NoArgsConstructor
 public class JsonDataResult {
     /**
-     * 操作类型  操作类型 0.取车 1.停车 2. 预约取车
+     * 操作状态  1-车台旋转中, 2-车台位置就绪, 3-操作完成
      */
     private String operatingType;
     /**
-     * 工控机状态 0.空闲 1.运转 9.故障
+     * 工控机状态 1-空置,2-工作中, 9-严重错误
      */
     private String machineStatus;
+    /**
+     * 运行状态 1-无操作, 2-取车操作, 3-存车操作, 4-预约取车, 5-取车完成后，配载操作
+     */
+    private String operationStatus;
 
     /**
      * 车牌号
@@ -38,6 +42,10 @@
      * 内外摄像头 0. 外摄像头 1.内摄像头
      */
     private String sideType;
+    /**
+     * 目标旋转车台
+     */
+    private String targetLot;
 
     /**
      * 汽车车牌
Index: src/main/java/com/fangda/skylot/mathine/model/utils/JsonResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/model/utils/JsonResult.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/model/utils/JsonResult.java	(date 1516373444000)
@@ -1,5 +1,6 @@
 package com.fangda.skylot.mathine.model.utils;
 
+import com.google.common.collect.Lists;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
@@ -31,5 +32,5 @@
     /**
      * 错误对象
      */
-    private List<Object> error;
+    private List<Object> error = Lists.newArrayList();
 }
Index: src/main/java/com/fangda/skylot/mathine/scheduler/springtask/SyncFTPUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/scheduler/springtask/SyncFTPUtil.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/scheduler/springtask/SyncFTPUtil.java	(date 1517045607000)
@@ -4,6 +4,7 @@
 import com.fangda.skylot.mathine.service.parking.ParkingLogService;
 import com.fangda.skylot.mathine.service.sync.SyncService;
 import com.fangda.skylot.mathine.utils.GetProperties;
+import com.fangda.skylot.mathine.utils.MarqueeUtil;
 import com.fangda.skylot.mathine.utils.SkylotUtils;
 import com.fangda.skylot.mathine.utils.constant.Constant;
 import com.fangda.skylot.mathine.utils.exception.SkyLotException;
@@ -21,7 +22,7 @@
 import java.text.SimpleDateFormat;
 import java.util.*;
 
-import static com.fangda.skylot.mathine.utils.constant.Constant.PARKING_PULLING_STATUS_PROGRESS;
+import static com.fangda.skylot.mathine.utils.constant.Constant.FN_RETURN_STATUS_ERROR;
 
 /**
  * Created by Saul on 16/06/2017.
@@ -36,6 +37,8 @@
     @Autowired
     public Map<String, IBaseService> serviceMap;
     private Logger loggerParking = Logger.getLogger("Parking");
+    @Autowired
+    private MarqueeUtil marqueeUtil;
 
 
     /**
@@ -73,7 +76,7 @@
                     loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作车辆序号[" + strings[0] + "],当前车辆是[" + strings[2] + "]");
                     if (strings[1].equals("存车")) {
                         loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[存车],当前车辆是[" + strings[2] + "]");
-                        statusMap = syncServiceImpl.parkCar(StringUtils.remove(strings[2], " "));
+                        statusMap = syncServiceImpl.parkCar(StringUtils.remove(strings[2], " "), false);
 
                     } else if (strings[1].equals("取车")) {
                         loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[取车],当前车辆是[" + strings[2] + "]");
@@ -103,8 +106,9 @@
                     FTPFile file = ftpFiles[i];
                     //直接将获取到车牌对象插入到数据中
                     String actualName = StringUtils.substringBeforeLast(StringUtils.substringAfterLast(file.getName(), GetProperties.getProperties("system.properties", "ftp.image.file.split")), GetProperties.getProperties("system.properties", "ftp.image.file.extention"));
-                    int result = ((ParkingLogService) serviceMap.get("parkinglogService")).parkingAction(actualName);
-                    if (result == NumberUtils.toInt(PARKING_PULLING_STATUS_PROGRESS)) {
+                    int result = ((ParkingLogService) serviceMap.get("parkinglogService")).parkingAction(actualName, true);
+//                    ftpUtils.removeFile(actualName);
+                    if (result == NumberUtils.toInt(FN_RETURN_STATUS_ERROR)) {
                         errorList.add(file.getName());
                     }
                 }
Index: src/main/java/com/fangda/skylot/mathine/scheduler/springtask/SyncHeartbeatPLCTask.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/scheduler/springtask/SyncHeartbeatPLCTask.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/scheduler/springtask/SyncHeartbeatPLCTask.java	(date 1517209041000)
@@ -2,14 +2,12 @@
 
 import com.fangda.skylot.mathine.service.sync.SyncService;
 import com.fangda.skylot.mathine.utils.exception.SkyLotException;
+import com.fangda.skylot.mathine.utils.socket.WSThreadMgt;
+import com.google.common.collect.Maps;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
-import java.text.DateFormat;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-
 /**
  * 心跳同步类,进行PLC心跳同步,每个10秒运行一次
  * Created by damon on 2016/12/30.
@@ -19,15 +17,19 @@
 public class SyncHeartbeatPLCTask {
     @Autowired
     private SyncService syncServiceImpl;
+    @Autowired
+    private WSThreadMgt wsThreadMgt;
 
     public void syncPLC() throws SkyLotException {
         int result = 0;
         try {
-            result = syncServiceImpl.heartbeatSyncPLC();
+            if (wsThreadMgt.checkCommander() == 0) {
+                wsThreadMgt.putCommander(Maps.newHashMap());
+                result = syncServiceImpl.heartbeatSyncPLC();
+                wsThreadMgt.getCommands();
+            }
         } catch (Exception e) {
             throw new SkyLotException(e);
         }
-        DateFormat df = new SimpleDateFormat("HH:mm:ss");
-        log.warn(df.format(new Date()) + "********syncPLC 任务执行完毕****** 执行结果: " + result);
     }
 }
Index: src/main/java/com/fangda/skylot/mathine/service/customer/CodeInfoService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/service/customer/CodeInfoService.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/service/customer/CodeInfoService.java	(date 1517651182000)
@@ -11,6 +11,8 @@
 import com.fangda.skylot.mathine.model.customer.OftbCodeInfoCriteria;
 import com.fangda.skylot.mathine.service.IBaseService;
 
+import java.util.Map;
+
 /**
  * 预订取车时间
  */
@@ -23,5 +25,5 @@
      * @param originalCode 原始代码原始代码,支持密码或者二维码
      * @return 0.操作成功 1.临停未支付 2. 二维码/密码有误 3. 月租车位过期
      */
-    int verifyCode(String originalCode) throws Exception;
+    Map verifyCode(String originalCode, boolean canceled) throws Exception;
 }
\ No newline at end of file
Index: src/main/java/com/fangda/skylot/mathine/service/impl/customer/CodeInfoServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/service/impl/customer/CodeInfoServiceImpl.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/service/impl/customer/CodeInfoServiceImpl.java	(date 1517651182000)
@@ -1,23 +1,24 @@
 package com.fangda.skylot.mathine.service.impl.customer;
 
+import com.fangda.skylot.mathine.dao.IBaseDao;
 import com.fangda.skylot.mathine.dao.customer.OftbCodeInfoDAO;
 import com.fangda.skylot.mathine.model.customer.MstbCustomer;
 import com.fangda.skylot.mathine.model.customer.MstbCustomerCriteria;
 import com.fangda.skylot.mathine.model.customer.OftbCodeInfo;
 import com.fangda.skylot.mathine.model.customer.OftbCodeInfoCriteria;
-import com.fangda.skylot.mathine.model.parking.IftbMachineAction;
-import com.fangda.skylot.mathine.model.parking.IftbMachineActionCriteria;
-import com.fangda.skylot.mathine.model.parking.TstbMathineParking;
-import com.fangda.skylot.mathine.model.parking.TstbMathineParkingCriteria;
+import com.fangda.skylot.mathine.model.parking.*;
 import com.fangda.skylot.mathine.service.IBaseService;
 import com.fangda.skylot.mathine.service.customer.CodeInfoService;
 import com.fangda.skylot.mathine.service.customer.CustomerService;
 import com.fangda.skylot.mathine.service.impl.BaseServiceImpl;
+import com.fangda.skylot.mathine.service.parking.FTPCarService;
 import com.fangda.skylot.mathine.service.parking.MachineActionService;
 import com.fangda.skylot.mathine.service.parking.ParkingService;
 import com.fangda.skylot.mathine.utils.DateUtil;
 import com.fangda.skylot.mathine.utils.SkylotUtils;
+import com.google.common.collect.Maps;
 import lombok.extern.slf4j.Slf4j;
+import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections.MapUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.math.NumberUtils;
@@ -26,6 +27,7 @@
 import org.springframework.transaction.annotation.Transactional;
 
 import java.util.Date;
+import java.util.List;
 import java.util.Map;
 
 import static com.fangda.skylot.mathine.utils.constant.Constant.*;
@@ -37,6 +39,8 @@
         implements CodeInfoService {
     @Autowired
     private Map<String, IBaseService> serviceMap;
+    @Autowired
+    private Map<String, IBaseDao> daoMap;
 
     @Autowired
     public void setBaseDao(OftbCodeInfoDAO codeInfoDao) {
@@ -48,16 +52,19 @@
      * 验证密码或者二维码
      *
      * @param originalCode 原始代码,支持密码或者二维码
+     * @param canceled     是否验证取消操作
      * @return 0.操作成功 1.临停未支付 2. 二维码/密码有误 3. 月租车位过期
+     * @throws Exception
      */
     @Override
-    public int verifyCode(String originalCode) throws Exception {
+    public Map verifyCode(String originalCode, boolean canceled) throws Exception {
+        Map resultMap = Maps.newHashMap();
         try {
             Map map = SkylotUtils.verifyCode(originalCode);
             if (MapUtils.isEmpty(map)) {
                 OftbCodeInfoCriteria codeInfoCriteria = new OftbCodeInfoCriteria();
                 codeInfoCriteria.createCriteria().andOciPasswordEqualTo(originalCode);
-                OftbCodeInfo oftbCodeInfo = ((CodeInfoService) serviceMap.get("codeInfoService")).query(codeInfoCriteria);
+                OftbCodeInfo oftbCodeInfo = ((OftbCodeInfoDAO) daoMap.get("codeInfoDao")).ReadSingle(codeInfoCriteria);
                 if (oftbCodeInfo != null) {
                     map = SkylotUtils.verifyCode(oftbCodeInfo.getOciCodeUrl());
                 }
@@ -71,30 +78,40 @@
                     if (iftbMachineAction != null) {
                         Date veriableDate = DateUtil.strToDateLong(MapUtils.getString(map, MAP_QRCODE_ENDDATE));
                         Date systemDate = DateUtil.strToDateLong(DateUtil.getNowDate());
+                        resultMap.put(SCHEDULEACTION_BUSINESSOBJ_CUSTOMER, MapUtils.getString(map, MAP_QRCODE_CARCODE));
                         boolean dateBoolean = veriableDate.after(systemDate);
                         if (!dateBoolean) {//二维码有效期小于当前系统时间
                             if (iftbMachineAction.getImaCode().equals("0")) {//月租
-                                return 3;
+                                resultMap.put(MAP_PARKING_STATUS, SCHEDULEACTION_STATUS_ERROR);
                             } else {//临停
-                                return 1;
+                                resultMap.put(MAP_PARKING_STATUS, FN_RETURN_STATUS_ERROR);
                             }
                         } else {
                             TstbMathineParkingCriteria tstbMathineParkingCriteria = new TstbMathineParkingCriteria();
                             tstbMathineParkingCriteria.createCriteria().andTmpCarCodeEqualTo(MapUtils.getString(map, MAP_QRCODE_CARCODE)).andTmpPhysicalCodeLike(MapUtils.getString(map, MAP_QRCODE_PHYSICALCODE));
+
                             //判断车牌和位置
                             TstbMathineParking parking = ((ParkingService) serviceMap.get("parkingService")).query(tstbMathineParkingCriteria);
                             if (null != parking) {
                                 //判断用户,月租用户需要判断
+                                resultMap.put(MAP_PARKING_STATUS, FN_RETURN_STATUS_SUCCESS);
                                 if (iftbMachineAction.getImaCode().equals("0")) {//月租
                                     MstbCustomerCriteria customerCriteria = new MstbCustomerCriteria();
                                     customerCriteria.createCriteria().andMcIdEqualTo(NumberUtils.toInt(MapUtils.getString(map, MAP_QRCODE_MCID)));
                                     MstbCustomer customer = ((CustomerService) serviceMap.get("customerService")).query(customerCriteria);
                                     if (null == customer) {
-                                        return 2;
+                                        resultMap.put(MAP_PARKING_STATUS, FN_RETURN_STATUS_HANDLE);
                                     }
                                 }
-                                return 0;
                             }
+                            if (canceled) {//检查是否要取消停车
+                                TstbFtpCarInformationCriteria tstbFtpCarInformationCriteria = new TstbFtpCarInformationCriteria();
+                                tstbFtpCarInformationCriteria.createCriteria().andTfcCarCodeEqualTo(MapUtils.getString(map, MAP_QRCODE_CARCODE));//当前扫描的二维码是不是当前要取得汽车
+                                List dataList = ((FTPCarService) serviceMap.get("ftpcarService")).queryForAll(tstbFtpCarInformationCriteria);
+                                if (CollectionUtils.isEmpty(dataList)) {
+                                    resultMap.put(MAP_PARKING_STATUS, FN_RETURN_STATUS_HANDLE);
+                                }
+                            }
                         }
                     }
                 }
@@ -102,6 +119,6 @@
         } catch (Exception e) {
             e.printStackTrace();
         }
-        return 2;
+        return resultMap;
     }
 }
Index: src/main/java/com/fangda/skylot/mathine/service/impl/customer/CustomerServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/service/impl/customer/CustomerServiceImpl.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/service/impl/customer/CustomerServiceImpl.java	(date 1517564355000)
@@ -34,6 +34,8 @@
 import java.util.List;
 import java.util.Map;
 
+import static com.fangda.skylot.mathine.utils.constant.Constant.MAP_QRCODE_CARCODE;
+
 @Slf4j
 @Transactional
 @Service("customerService")
@@ -78,7 +80,7 @@
                         for (int i = 0; i < iftbItemCustomers.size(); i++) {
                             IftbItemCustomer iftbItemCustomer = iftbItemCustomers.get(i);
                             Map strMap = Maps.newHashMap();
-                            strMap.put("carCode", iftbItemCustomer.getIccCarCode());
+                            strMap.put(MAP_QRCODE_CARCODE, iftbItemCustomer.getIccCarCode());
                             carCodeReturn.add(strMap);
                         }
                         return carCodeReturn;
Index: src/main/java/com/fangda/skylot/mathine/service/impl/parking/ParkingLogServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/service/impl/parking/ParkingLogServiceImpl.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/service/impl/parking/ParkingLogServiceImpl.java	(date 1517535725000)
@@ -5,11 +5,14 @@
 import com.fangda.skylot.mathine.service.impl.BaseServiceImpl;
 import com.fangda.skylot.mathine.service.parking.ParkingLogService;
 import com.fangda.skylot.mathine.service.sync.SyncService;
+import com.fangda.skylot.mathine.utils.DateUtil;
 import com.fangda.skylot.mathine.utils.GetProperties;
+import com.fangda.skylot.mathine.utils.MarqueeUtil;
 import com.fangda.skylot.mathine.utils.SkylotUtils;
 import com.fangda.skylot.mathine.utils.exception.SkyLotException;
 import com.fangda.skylot.mathine.utils.ftp.FtpUtils;
 import lombok.extern.slf4j.Slf4j;
+import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections.MapUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.math.NumberUtils;
@@ -18,7 +21,7 @@
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
-import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.regex.Pattern;
 
@@ -38,6 +41,8 @@
     @Autowired
     FtpUtils ftpUtils;
     private Logger loggerParking = Logger.getLogger("Parking");
+    @Autowired
+    private MarqueeUtil marqueeUtil;
 
     @Override
     public int parkingFromCallbak(Map map) throws Exception {
@@ -54,7 +59,17 @@
                         if (!Pattern.compile(rex).matcher(actualName).find()) {//// TODO: 21/12/2017 车牌验证规则需要更新,如果武警和使馆
                             return 1;
                         } else {
-                            return parkingAction(actualName);
+                            TstbFtpCarInformationCriteria carInformationCriteria = new TstbFtpCarInformationCriteria();
+                            carInformationCriteria.setOrderByClause("tfc_id asc");
+                            List dataList = serviceMap.get("ftpcarService").queryForAll(carInformationCriteria);
+                            if (CollectionUtils.isNotEmpty(dataList)) {
+                                TstbFtpCarInformation tstbFtpCarInformation = (TstbFtpCarInformation) dataList.get(0);
+                                tstbFtpCarInformation.setTfcCarInCode(actualName);
+                                tstbFtpCarInformation.setTfcUpdatetime(DateUtil.getNowDate());
+                                tstbFtpCarInformation.setTfcStatus(1);
+                                carInformationCriteria.createCriteria().andTfcIdEqualTo(tstbFtpCarInformation.getTfcId());
+                                serviceMap.get("ftpcarService").update(tstbFtpCarInformation, carInformationCriteria);
+                            }
                         }
                     }
                 }
@@ -64,12 +79,13 @@
     }
 
     @Override
-    public int parkingAction(String parkingCar) throws Exception {
+    public int parkingAction(String parkingCar, boolean firstPark) throws Exception {
         TstbFtpCarInformationCriteria carInformationCriteria = new TstbFtpCarInformationCriteria();
         TstbFtpCarInformation tstbFtpCarInformation = TstbFtpCarInformation.builder().build();
         tstbFtpCarInformation.setTfcCarCode(parkingCar);
         tstbFtpCarInformation.setTfcCreatetime(SkylotUtils.getStrDate());
         tstbFtpCarInformation.setTfcStatus(NumberUtils.toInt(PARKING_PULLING_STATUS_PROGRESS));//进入停车流程
+        tstbFtpCarInformation.setTfcCarAction(PARKING_PULLING_STATUS_FINISH);
         tstbFtpCarInformation.setTfcCreateuser("auto");
         tstbFtpCarInformation.setImaId(GetProperties.getProperties("system.properties", "skylot.machine.id"));
         //验证车牌号
@@ -78,43 +94,50 @@
             return 1;
         }
         try {
+            //查询ima设备是否可以停车
+            IftbMachineActionCriteria criteria = new IftbMachineActionCriteria();
+            criteria.createCriteria().andImaIdEqualTo(SkylotUtils.imaId);
+            IftbMachineAction iftbMachineAction = (IftbMachineAction) serviceMap.get("machineActionService").query(criteria);
+            if (iftbMachineAction != null) {
+                if (StringUtils.equals(FN_RETURN_STATUS_ERROR, iftbMachineAction.getImaPhysicalStatus())) {
+                    marqueeUtil.sendText("错误", "当前设备暂停服务!", true);
+                    return 1;
+                }
+            } else {
+                marqueeUtil.sendText("错误", "当前设备暂时无法提供服务!", true);
+                return 1;
+            }
             //查询是否有车正在进行停车操作
             carInformationCriteria.createCriteria().andTfcStatusEqualTo(NumberUtils.toInt(PARKING_PULLING_STATUS_PROGRESS));
             TstbFtpCarInformation ftpCarInformation = (TstbFtpCarInformation) serviceMap.get("ftpcarService").query(carInformationCriteria);
             if (null != ftpCarInformation && !StringUtils.equals(ftpCarInformation.getTfcCarCode(), parkingCar)) {
                 loggerParking.warn("当前已有车辆正在停车,请稍后");
+                marqueeUtil.sendText("错误", "当前已有车辆正在停车,请稍后", true);
                 ftpUtils.removeFile(parkingCar);
-                return NumberUtils.toInt(PARKING_PULLING_STATUS_PROGRESS);
             }
-            serviceMap.get("ftpcarService").add(tstbFtpCarInformation);//存储识别到的车牌号
+            if (syncServiceImpl.checkCarFromDB(parkingCar) == NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS)) {//检查车辆是否授权
+                if (syncServiceImpl.getParkingPhysicalCode(parkingCar) == NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS)) {//检查车辆是否已经停车
+                    serviceMap.get("ftpcarService").add(tstbFtpCarInformation);//存储识别到的车牌号
+
+                } else {
+                    loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],车牌[" + parkingCar + "],不能重复停车");
+                    marqueeUtil.sendText("错误", parkingCar + "不能重复停车", true);
+                    return NumberUtils.toInt(FN_RETURN_STATUS_HANDLE);//车辆已经在停车台上
+                }
+            } else {
+                loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],车牌[" + parkingCar + "]没有授权");
+                marqueeUtil.sendText("错误", parkingCar + "没有授权", true);
+                return NumberUtils.toInt(FN_RETURN_STATUS_ERROR);
+            }
+
         } catch (Exception e) {
-            if (StringUtils.contains(e.getMessage(), "tstb_ftp_car_information_tfc_car_code_uindex")) {//出现唯一车牌信息
-                //判断当前车牌是否已经停车
-                TstbMathineParkingCriteria tstbMathineParkingCriteria = new TstbMathineParkingCriteria();
-                tstbMathineParkingCriteria = new TstbMathineParkingCriteria();
-                tstbMathineParkingCriteria.createCriteria().andTmpCarCodeEqualTo(parkingCar);
-                if (null == serviceMap.get("parkingService").query(tstbMathineParkingCriteria)) {
-                    //二次识别正常,车辆可以放行停车
-                    Map statusMap = new HashMap();
-                    loggerParking.warn("正常停车模式,开始停车");
-                    loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],,当前车辆是[" + parkingCar + "]");
-                    statusMap = syncServiceImpl.parkCar(StringUtils.remove(parkingCar, " "));
-                    if (MapUtils.getIntValue(statusMap, MAP_PARKING_STATUS) == NumberUtils.toInt(PARKING_PULLING_STATUS_FINISH)) {
-                        tstbFtpCarInformation = TstbFtpCarInformation.builder().build();
-                        tstbFtpCarInformation.setTfcStatus(NumberUtils.toInt(PARKING_PULLING_STATUS_FINISH));
-                        tstbFtpCarInformation.setTfcUpdatetime(SkylotUtils.getStrDate());
-                        tstbFtpCarInformation.setTfcUpdateuser("auto");
-                        carInformationCriteria = new TstbFtpCarInformationCriteria();
-                        carInformationCriteria.createCriteria().andTfcStatusEqualTo(NumberUtils.toInt(PARKING_PULLING_STATUS_PROGRESS)).andTfcCarCodeEqualTo(parkingCar);
-                        serviceMap.get("ftpcarService").update(tstbFtpCarInformation, carInformationCriteria);
-                    }
-                    layoutMessage(statusMap, "存车");
-                }
-
+            if (StringUtils.contains(e.getMessage(), "HY400")) {//可以识别的车辆大于2
+                loggerParking.warn("无法处理大于数量2的停车请求");
             } else {
                 throw new SkyLotException(e);
             }
-
+        } finally {
+            ftpUtils.removeFile(parkingCar);
         }
         return 0;
     }
Index: src/main/java/com/fangda/skylot/mathine/service/impl/sync/SyncServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/service/impl/sync/SyncServiceImpl.java	(revision 6842)
+++ src/main/java/com/fangda/skylot/mathine/service/impl/sync/SyncServiceImpl.java	(date 1517651182000)
@@ -11,8 +11,10 @@
 import com.fangda.skylot.mathine.dao.parking.TstbMathineParkingLogDAO;
 import com.fangda.skylot.mathine.model.customer.*;
 import com.fangda.skylot.mathine.model.parking.*;
+import com.fangda.skylot.mathine.model.utils.ErrorCode;
 import com.fangda.skylot.mathine.model.utils.IftbScheduleAction;
 import com.fangda.skylot.mathine.model.utils.IftbScheduleActionCriteria;
+import com.fangda.skylot.mathine.scheduler.springtask.MainThreadUtil;
 import com.fangda.skylot.mathine.service.IBaseService;
 import com.fangda.skylot.mathine.service.SocketService;
 import com.fangda.skylot.mathine.service.parking.ParkingLogService;
@@ -23,9 +25,9 @@
 import com.fangda.skylot.mathine.utils.exception.SkyLotException;
 import com.fangda.skylot.mathine.utils.socket.WSThreadMgtSend;
 import com.fasterxml.jackson.core.JsonProcessingException;
+import com.google.common.collect.Lists;
 import lombok.Data;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.beanutils.BeanUtils;
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections.MapUtils;
 import org.apache.commons.lang3.StringUtils;
@@ -39,6 +41,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
 import java.util.*;
 import java.util.concurrent.*;
 
@@ -64,6 +67,10 @@
     private String maId;
     private MstbCustomer mstbCustomer;
     private Client client;
+    @Autowired
+    private MainThreadUtil mainThreadUtil;
+    @Autowired
+    private ErrorCode code;
 
     /**
      * @return
@@ -105,15 +112,35 @@
                 return 2;
             }
         }
-        if (checkPLC(0) != 0) {//PLC心跳正常
-            plcStatus = 1;
-        }
+        if (hasSyncError("1", false)) {//PLC通信失败,先同步数据
+            comparePLC2Local();
+        }
+        int a = 0;
+        int r = checkPLC(9, true);
+        while (r != 0) {
+            r = checkPLC(9, true);
+            Thread.sleep(1000);
+            if (a > 10) {//PLC连接超时
+                addSyncError("1");
+                break;
+            }
+            if (r == 1 || r == -1) {
+                addSyncError("1");
+                break;
+            }
+            a++;
+        }
+        if (r == 0) {
+            hasSyncError("1", true);//删除上一次失败数据
+        }
+        plcStatus = 1;
         try {
             Map scheduleMap = new HashMap();
             scheduleMap.put(SCHEDULEACTION_TYPE_HEARTBEAT, SCHEDULEACTION_TYPE_HEARTBEAT_PLC);
             scheduleMap.put(SCHEDULEACTION_TYPE_ITEM, plcStatus + "");
-            scheduleMap.put(SCHEDULEACTION_MESSAGE, SingletonObjectMapper.getInstance().writeValueAsString(socketService.getAllStatus()));
+            scheduleMap.put(SCHEDULEACTION_MESSAGE, SingletonObjectMapper.getInstance().writeValueAsString(socketService.getAllStatus(true)));
             updateSchedule(scheduleMap);
+            mainThreadUtil.updateStatus("1", "1", "3", null, null, "0", code.getTargetLot());
             return 0;
         } catch (JsonProcessingException e) {
             throw new SkyLotException(e);
@@ -124,7 +151,7 @@
     }
 
     @Override
-    public Map parkCar(String carNumber) throws Exception {
+    public Map parkCar(String carNumber, boolean firstPark) throws Exception {
         Map parkingMap = new HashMap();
         Logger loggerParking = Logger.getLogger("Parking");
         try {
@@ -134,7 +161,7 @@
                 if (parkingStatus == 0) {//PLC是否准备好停车
                     loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[存车],当前车辆是[" + carNumber + "],PLC设备可用,准备停车!");
                     if (getParkingPhysicalCode(carNumber) == 0) {//车牌已经停车,不能再存
-                        parkingMap = socketService.doParking(carNumber);
+                        parkingMap = socketService.doParking(carNumber, firstPark);
                         if (MapUtils.getIntValue(parkingMap, MAP_PARKING_STATUS) == 0) {
                             if (createParkinglog(carNumber, parkingMap, 0) == 0) {
                                 ((TstbMathineParkingLogDAO) this.daoMap.get("tstbMathineParkingLogDao")).save(this.getTmpl());
@@ -191,7 +218,7 @@
                     loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[取车],当前车辆是[" + carNumber + "],PLC设备可用,准备取车!");
                     int positionNumber = getParkingPhysicalCode(carNumber);
                     if (positionNumber > 0) {
-                        parkingMap = socketService.doPulling(positionNumber + "");
+                        parkingMap = socketService.doPulling(positionNumber + "", true);
                         if (MapUtils.getIntValue(parkingMap, MAP_PARKING_STATUS) == 0) {
                             parkingMap.put(MAP_PARKING_LOCATION, positionNumber);
                             if (createParkinglog(carNumber, parkingMap, 1) == 0) {
@@ -236,7 +263,7 @@
      * @param carNumber 车牌
      * @return 0, 已授权, 1, 未授权,其中临停设备,可以直接停车
      */
-    private int checkCarFromDB(String carNumber) throws Exception {
+    public int checkCarFromDB(String carNumber) throws Exception {
         try {
             //增加临时车牌停车逻辑,验证当前设备是否是临停设备
             IftbMachineActionCriteria iftbMachineActionCriteria = new IftbMachineActionCriteria();
@@ -249,14 +276,14 @@
             }
             OftbCustomerCarCriteria customerCarCriteria = new OftbCustomerCarCriteria();
             customerCarCriteria.createCriteria().andOccCodeEqualTo(carNumber);
-            OftbCustomerCar customerCar = ((OftbCustomerCarDAO) this.daoMap.get("oftbCustomerCarDao")).ReadSingle(customerCarCriteria);
+            OftbCustomerCar customerCar = ((OftbCustomerCarDAO) this.daoMap.get("customerCarDao")).ReadSingle(customerCarCriteria);
             if (customerCar != null) {//车牌是否存在
                 MstbCustomerCriteria customerCriteria = new MstbCustomerCriteria();
                 customerCriteria.createCriteria().andMcIdEqualTo(customerCar.getMcId());
                 MstbCustomer customer = ((MstbCustomerDAO) this.daoMap.get("mstbCustomerDao")).ReadSingle(customerCriteria);
                 setMstbCustomer(customer);
                 if (customer != null) {//客户是否存在
-                    if (checkCarBelongToCurrentMachine(customer.getMcId().intValue()) == NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS)) {
+                    if (checkCarBelongToCurrentMachine(customer.getMcId().intValue(), carNumber) == NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS)) {
                         return NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS);
                     }
                 }
@@ -273,7 +300,7 @@
      * @param cusId 客户序号
      * @return 0, 车牌可以授权, 1车牌无法授权
      */
-    private int checkCarBelongToCurrentMachine(int cusId) throws Exception {
+    private int checkCarBelongToCurrentMachine(int cusId, String carNumber) throws Exception {
         String machineId = GetProperties.getProperties("system.properties", "skylot.machine.id");//设备ID
         IftbMachineActionCriteria criteria = new IftbMachineActionCriteria();
         criteria.createCriteria().andImaIdEqualTo(machineId);
@@ -290,7 +317,7 @@
                     OftbMathineItem next = oftbMathineItemIterator.next();
                     ids.add(next.getOmiId());
                 }
-                customerCriteria.createCriteria().andMcIdEqualTo(cusId).andOmiIdIn(ids); // TODO: 29/06/2017 增加车牌查询 
+                customerCriteria.createCriteria().andMcIdEqualTo(cusId).andOmiIdIn(ids).andIccCarCodeEqualTo(carNumber);
                 List iftbItemCustomers = ((IftbItemCustomerDAO) this.daoMap.get("iftbItemCustomerDao")).ReadAll(customerCriteria);
                 if (CollectionUtils.isNotEmpty(iftbItemCustomers)) {//用户在当前设备已经绑定车牌
                     return 0;
@@ -306,10 +333,10 @@
      * @param carNumber 车牌
      * @return 0, 没有位置, 其他就是位置信息
      */
-    private int getParkingPhysicalCode(String carNumber) throws Exception {
+    public int getParkingPhysicalCode(String carNumber) throws Exception {
         try {
             TstbMathineParkingCriteria criteria = new TstbMathineParkingCriteria();
-            criteria.createCriteria().andTmpCarCodeEqualTo(carNumber).andImaIdEqualTo(getMaId());
+            criteria.createCriteria().andTmpCarCodeEqualTo(carNumber).andImaIdEqualTo(SkylotUtils.imaId);
             TstbMathineParking tstbMathineParking = ((TstbMathineParkingDAO) this.daoMap.get("tstbMathineParkingDao")).ReadSingle(criteria);
             if (tstbMathineParking == null) {
                 return 0;
@@ -325,20 +352,25 @@
     /**
      * 检查PLC的状态
      *
-     * @param checkType 检查类型,0,状态检查,1,状态和空闲车位检查
+     * @param checkType 检查类型,0,状态检查,1,状态和空闲车位检查,9:心跳检查
      * @return 0, 检查成功, 1, 检查失败,2,没有空位可以停车
      * @throws Exception
      */
-    private int checkPLC(int checkType) throws Exception {
-        if (socketService.confirmStatus(2) == 0) {//设备状态是否正常
-            if (checkType == 1) {//是否有可用车位可以进行停车
-                if (socketService.enableParking() == 0) {
-                    return 0;
-                } else {
-                    return 2;
+    public int checkPLC(int checkType, boolean... check) throws Exception {
+        if (checkType == 3 || checkType == 9) {
+            int r = socketService.confirmStatus(9, check);
+            return r;
+        } else {
+            if (socketService.confirmStatus(2, check) == NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS)) {//设备状态是否正常
+                if (checkType == 1) {//是否有可用车位可以进行停车
+                    if (socketService.enableParking() == NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS)) {
+                        return NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS);
+                    } else {
+                        return 2;
+                    }
                 }
+                return NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS);
             }
-            return 0;
         }
         return 1;
     }
@@ -351,14 +383,14 @@
      * @param isParking
      * @return 0, 成功, 1, 失败
      */
-    private int createParkinglog(String carNumber, Map parkingMap, int isParking) {
+    public int createParkinglog(String carNumber, Map parkingMap, int isParking) {
         try {
             TstbMathineParkingLog tstbMathineParkingLog = TstbMathineParkingLog.builder().build();
-            tstbMathineParkingLog.setImaId(getMaId());
+            tstbMathineParkingLog.setImaId(getMaId() != null ? getMaId() : SkylotUtils.imaId);
             tstbMathineParkingLog.setTmplCreatedate(DateUtil.getNowDate());
             tstbMathineParkingLog.setTmplCar(carNumber);
             tstbMathineParkingLog.setTmplPhysicalCode(MapUtils.getIntValue(parkingMap, MAP_PARKING_LOCATION) == 0 ? "" : MapUtils.getIntValue(parkingMap, MAP_PARKING_LOCATION) + "");
-            tstbMathineParkingLog.setTmplCustomer(this.getMstbCustomer().getMcNameCn());
+            tstbMathineParkingLog.setTmplCustomer("");
             tstbMathineParkingLog.setTmplType(isParking == 0 ? MACHINEPARKING_TYPE_PARK : MACHINEPARKING_TYPE_TAKE);
             tstbMathineParkingLog.setTmplStatus(PARKING_PULLING_STATUS_FINISH);
             tstbMathineParkingLog.setTmplDiectionCode(MapUtils.getString(parkingMap, MACHINEACTION_DIRECTION_CODE));
@@ -368,7 +400,11 @@
             tstbMathineParkingLog.setTmplOperationDuriationWeighting(MapUtils.getString(parkingMap, MAP_TIME_SPEND_WEIGHT));
             tstbMathineParkingLog.setTmplOperationEnergyCost(MapUtils.getString(parkingMap, MAP_ENERGY));
             this.setTmpl(tstbMathineParkingLog);
+            ((TstbMathineParkingLogDAO) this.daoMap.get("tstbMathineParkingLogDao")).save(this.getTmpl());
+            CommandSchedule();
+
             return 0;
+
         } catch (Exception e) {
             e.printStackTrace();
             return 1;
@@ -381,7 +417,7 @@
      * @param scheduleMap 同步日程Map对象
      * @throws JsonProcessingException
      */
-    private void updateSchedule(Map scheduleMap) throws JsonProcessingException, Exception {
+    public void updateSchedule(Map scheduleMap) throws JsonProcessingException, Exception {
         ScheduleService scheduleService = (ScheduleService) serviceMap.get("scheduleService");
         //01.删除已经同步完成的对象
 
@@ -394,7 +430,7 @@
         iftbScheduleAction.setIsaUpdatedate(SkylotUtils.getStrDate());
         iftbScheduleAction.setIsaCreatedate(SkylotUtils.getStrDate());
         iftbScheduleAction.setIsaStatus(SCHEDULEACTION_TYPE_ADD);
-        iftbScheduleAction.setIsaModuleId(GetProperties.getProperties("system.properties", "skylot.machine.id"));
+        iftbScheduleAction.setIsaModuleId(SkylotUtils.imaId);
         iftbScheduleAction.setIsaScheduleDate(SkylotUtils.getStrDate());
         iftbScheduleAction.setIsaScheduleType(MapUtils.getString(scheduleMap, SCHEDULEACTION_TYPE_HEARTBEAT, ""));
         iftbScheduleAction.setIsaItemId(MapUtils.getString(scheduleMap, SCHEDULEACTION_TYPE_ITEM));
@@ -413,6 +449,7 @@
                 scheduleService.update(iftbScheduleAction, iftbScheduleActionCriteria);
             }
         } else {
+            iftbScheduleAction.setIsaBusinessObj(SCHEDULEACTION_BUSINESSOBJ_CUSTOMER);
             scheduleService.add(iftbScheduleAction);
         }
 
@@ -438,174 +475,174 @@
         }
     }
 
-    /**
-     * 获取服务器端的物业设备信息,增量更新
-     */
-    private void getUpdateActionItems() throws Exception {
-        Object[] resultArr = client.invoke("toReturnMachineAction", GetProperties.getProperties("system.properties", "skylot.machine.id"), SkylotUtils.getStrDate());
-        if (resultArr != null) {
-            if (resultArr[0] != null) {
-                String items = resultArr[0].toString();
-                Map itemList = SingletonObjectMapper.getInstance().readValue(items, Map.class);
-                if (MapUtils.isNotEmpty(itemList)) {
-                    List<String> ids = new ArrayList<String>();
-                    List objs = (List) MapUtils.getObject(itemList, "update");//只需要更新update对象
-                    if (CollectionUtils.isNotEmpty(objs)) {//有需要更新的物业设备信息
-                        Map next = (Map) objs.get(0);
-                        IftbMachineAction iftbMachineAction = IftbMachineAction.builder().build();
-                        BeanUtils.populate(iftbMachineAction, next);
-                        IftbMachineActionCriteria criteria = new IftbMachineActionCriteria();
-                        criteria.or().andImaIdEqualTo(iftbMachineAction.getImaId());
-                        daoMap.get("iftbMachineActionDao").updatewithoutNull(iftbMachineAction, criteria);
-                    }
-                }
-            }
-        }
-    }
-
-    /**
-     * 获取服务器端的用户信息
-     */
-    private void getUpdateCustomers() throws Exception {
-        Object[] resultArr = client.invoke("toReturnCustomer", SkylotUtils.getStrDate());
-        if (resultArr != null) {
-            if (resultArr[0] != null) {
-                String items = resultArr[0].toString();
-                Map itemList = SingletonObjectMapper.getInstance().readValue(items, Map.class);
-                if (MapUtils.isNotEmpty(itemList)) {
-                    List<Integer> ids = new ArrayList<Integer>();
-                    List addList = (List) MapUtils.getObject(itemList, "add");
-                    List updateList = (List) MapUtils.getObject(itemList, "update");
-                    if (CollectionUtils.isNotEmpty(addList)) {//新增数据
-                        for (int i = 0; i < addList.size(); i++) {
-                            Map o = (Map) addList.get(i);
-                            MstbCustomer next = MstbCustomer.builder().build();
-                            BeanUtils.populate(next, o);
-                            daoMap.get("mstbCustomerDao").save(next);
-                        }
-                    }
-                    if (CollectionUtils.isNotEmpty(updateList)) {//更新数据
-                        for (int i = 0; i < updateList.size(); i++) {
-                            Map o = (Map) updateList.get(i);
-                            MstbCustomer next = MstbCustomer.builder().build();
-                            BeanUtils.populate(next, o);
-                            MstbCustomerCriteria customerCriteria = new MstbCustomerCriteria();
-                            customerCriteria.createCriteria().andMcIdEqualTo(next.getMcId());
-                            daoMap.get("mstbCustomerDao").updatewithoutNull(next, customerCriteria);
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-    /**
-     * 获取服务器端的用户车牌信息
-     */
-    private void getUpdateCustomersCar() throws Exception {
-        Object[] resultArr = client.invoke("toReturnCustomerCar", SkylotUtils.getStrDate());
-        if (resultArr != null) {
-            if (resultArr[0] != null) {
-                String items = resultArr[0].toString();
-                Map itemList = SingletonObjectMapper.getInstance().readValue(items, Map.class);
-                if (MapUtils.isNotEmpty(itemList)) {
-                    List<Integer> ids = new ArrayList<Integer>();
-                    List addList = (List) MapUtils.getObject(itemList, "add");
-                    List updateList = (List) MapUtils.getObject(itemList, "update");
-                    if (CollectionUtils.isNotEmpty(addList)) {//新增数据
-                        for (int i = 0; i < addList.size(); i++) {
-                            Map o = (Map) addList.get(i);
-                            OftbCustomerCar oftbCustomerCar = OftbCustomerCar.builder().build();
-                            BeanUtils.populate(oftbCustomerCar, o);
-                            daoMap.get("oftbCustomerCarDao").save(oftbCustomerCar);
-                        }
-                    }
-                    if (CollectionUtils.isNotEmpty(updateList)) {//更新数据
-                        for (int i = 0; i < updateList.size(); i++) {
-                            Map o = (Map) updateList.get(i);
-                            OftbCustomerCar oftbCustomerCar = OftbCustomerCar.builder().build();
-                            BeanUtils.populate(oftbCustomerCar, o);
-                            OftbCustomerCarCriteria customerCriteria = new OftbCustomerCarCriteria();
-                            customerCriteria.createCriteria().andOccIdEqualTo(oftbCustomerCar.getOccId());
-                            daoMap.get("oftbCustomerCarDao").updatewithoutNull(oftbCustomerCar, customerCriteria);
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-    /**
-     * 获取服务器端的实体车位数据
-     */
-    private void getUpdateMathineItem() throws Exception {
-        Object[] resultArr = client.invoke("toReturnMathineItem", GetProperties.getProperties("system.properties", "skylot.machine.id"), SkylotUtils.getStrDate());
-        if (resultArr != null) {
-            if (resultArr[0] != null) {
-                String items = resultArr[0].toString();
-                Map itemList = SingletonObjectMapper.getInstance().readValue(items, Map.class);
-                if (MapUtils.isNotEmpty(itemList)) {
-                    List<Integer> ids = new ArrayList<Integer>();
-                    List addList = (List) MapUtils.getObject(itemList, "add");
-                    List updateList = (List) MapUtils.getObject(itemList, "update");
-                    if (CollectionUtils.isNotEmpty(addList)) {//新增数据
-                        for (int i = 0; i < addList.size(); i++) {
-                            Map o = (Map) addList.get(i);
-                            OftbMathineItem oftbMathineItem = OftbMathineItem.builder().build();
-                            BeanUtils.populate(oftbMathineItem, o);
-                            daoMap.get("oftbMathineItemDao").save(oftbMathineItem);
-                        }
-                    }
-                    if (CollectionUtils.isNotEmpty(updateList)) {//更新数据
-                        for (int i = 0; i < updateList.size(); i++) {
-                            Map o = (Map) updateList.get(i);
-                            OftbMathineItem oftbMathineItem = OftbMathineItem.builder().build();
-                            BeanUtils.populate(oftbMathineItem, o);
-                            OftbMathineItemCriteria criteria = new OftbMathineItemCriteria();
-                            criteria.createCriteria().andOmiIdEqualTo(oftbMathineItem.getOmiId());
-                            daoMap.get("oftbMathineItemDao").updatewithoutNull(oftbMathineItem, criteria);
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-    /**
-     * 获取服务器端的用户车牌绑定信息
-     */
-    private void getUpdateCustomersItem() throws Exception {
-        Object[] resultArr = client.invoke("toReturnItemCustomer", GetProperties.getProperties("system.properties", "skylot.machine.id"), SkylotUtils.getStrDate());
-        if (resultArr != null) {
-            if (resultArr[0] != null) {
-                String items = resultArr[0].toString();
-                Map itemList = SingletonObjectMapper.getInstance().readValue(items, Map.class);
-                if (MapUtils.isNotEmpty(itemList)) {
-                    List<Integer> ids = new ArrayList<Integer>();
-                    List addList = (List) MapUtils.getObject(itemList, "add");
-                    List updateList = (List) MapUtils.getObject(itemList, "update");
-                    if (CollectionUtils.isNotEmpty(addList)) {//新增数据
-                        for (int i = 0; i < addList.size(); i++) {
-                            Map o = (Map) addList.get(i);
-                            IftbItemCustomer iftbItemCustomer = IftbItemCustomer.builder().build();
-                            BeanUtils.populate(iftbItemCustomer, o);
-                            daoMap.get("iftbItemCustomerDao").save(iftbItemCustomer);
-                        }
-                    }
-                    if (CollectionUtils.isNotEmpty(updateList)) {//更新数据
-                        for (int i = 0; i < updateList.size(); i++) {
-                            Map o = (Map) updateList.get(i);
-                            IftbItemCustomer iftbItemCustomer = IftbItemCustomer.builder().build();
-                            BeanUtils.populate(iftbItemCustomer, o);
-                            IftbItemCustomerCriteria criteria = new IftbItemCustomerCriteria();
-                            criteria.createCriteria().andIicIdEqualTo(iftbItemCustomer.getIicId());
-                            daoMap.get("oftbCustomerCarDao").updatewithoutNull(iftbItemCustomer, criteria);
-                        }
-                    }
-                }
-            }
-        }
-    }
+//    /**
+//     * 获取服务器端的物业设备信息,增量更新
+//     */
+//    private void getUpdateActionItems() throws Exception {
+//        Object[] resultArr = client.invoke("toReturnMachineAction", GetProperties.getProperties("system.properties", "skylot.machine.id"), SkylotUtils.getStrDate());
+//        if (resultArr != null) {
+//            if (resultArr[0] != null) {
+//                String items = resultArr[0].toString();
+//                Map itemList = SingletonObjectMapper.getInstance().readValue(items, Map.class);
+//                if (MapUtils.isNotEmpty(itemList)) {
+//                    List<String> ids = new ArrayList<String>();
+//                    List objs = (List) MapUtils.getObject(itemList, "update");//只需要更新update对象
+//                    if (CollectionUtils.isNotEmpty(objs)) {//有需要更新的物业设备信息
+//                        Map next = (Map) objs.get(0);
+//                        IftbMachineAction iftbMachineAction = IftbMachineAction.builder().build();
+//                        BeanUtils.populate(iftbMachineAction, next);
+//                        IftbMachineActionCriteria criteria = new IftbMachineActionCriteria();
+//                        criteria.or().andImaIdEqualTo(iftbMachineAction.getImaId());
+//                        daoMap.get("iftbMachineActionDao").updatewithoutNull(iftbMachineAction, criteria);
+//                    }
+//                }
+//            }
+//        }
+//    }
+//
+//    /**
+//     * 获取服务器端的用户信息
+//     */
+//    private void getUpdateCustomers() throws Exception {
+//        Object[] resultArr = client.invoke("toReturnCustomer", SkylotUtils.getStrDate());
+//        if (resultArr != null) {
+//            if (resultArr[0] != null) {
+//                String items = resultArr[0].toString();
+//                Map itemList = SingletonObjectMapper.getInstance().readValue(items, Map.class);
+//                if (MapUtils.isNotEmpty(itemList)) {
+//                    List<Integer> ids = new ArrayList<Integer>();
+//                    List addList = (List) MapUtils.getObject(itemList, "add");
+//                    List updateList = (List) MapUtils.getObject(itemList, "update");
+//                    if (CollectionUtils.isNotEmpty(addList)) {//新增数据
+//                        for (int i = 0; i < addList.size(); i++) {
+//                            Map o = (Map) addList.get(i);
+//                            MstbCustomer next = MstbCustomer.builder().build();
+//                            BeanUtils.populate(next, o);
+//                            daoMap.get("mstbCustomerDao").save(next);
+//                        }
+//                    }
+//                    if (CollectionUtils.isNotEmpty(updateList)) {//更新数据
+//                        for (int i = 0; i < updateList.size(); i++) {
+//                            Map o = (Map) updateList.get(i);
+//                            MstbCustomer next = MstbCustomer.builder().build();
+//                            BeanUtils.populate(next, o);
+//                            MstbCustomerCriteria customerCriteria = new MstbCustomerCriteria();
+//                            customerCriteria.createCriteria().andMcIdEqualTo(next.getMcId());
+//                            daoMap.get("mstbCustomerDao").updatewithoutNull(next, customerCriteria);
+//                        }
+//                    }
+//                }
+//            }
+//        }
+//    }
+//
+//    /**
+//     * 获取服务器端的用户车牌信息
+//     */
+//    private void getUpdateCustomersCar() throws Exception {
+//        Object[] resultArr = client.invoke("toReturnCustomerCar", SkylotUtils.getStrDate());
+//        if (resultArr != null) {
+//            if (resultArr[0] != null) {
+//                String items = resultArr[0].toString();
+//                Map itemList = SingletonObjectMapper.getInstance().readValue(items, Map.class);
+//                if (MapUtils.isNotEmpty(itemList)) {
+//                    List<Integer> ids = new ArrayList<Integer>();
+//                    List addList = (List) MapUtils.getObject(itemList, "add");
+//                    List updateList = (List) MapUtils.getObject(itemList, "update");
+//                    if (CollectionUtils.isNotEmpty(addList)) {//新增数据
+//                        for (int i = 0; i < addList.size(); i++) {
+//                            Map o = (Map) addList.get(i);
+//                            OftbCustomerCar oftbCustomerCar = OftbCustomerCar.builder().build();
+//                            BeanUtils.populate(oftbCustomerCar, o);
+//                            daoMap.get("oftbCustomerCarDao").save(oftbCustomerCar);
+//                        }
+//                    }
+//                    if (CollectionUtils.isNotEmpty(updateList)) {//更新数据
+//                        for (int i = 0; i < updateList.size(); i++) {
+//                            Map o = (Map) updateList.get(i);
+//                            OftbCustomerCar oftbCustomerCar = OftbCustomerCar.builder().build();
+//                            BeanUtils.populate(oftbCustomerCar, o);
+//                            OftbCustomerCarCriteria customerCriteria = new OftbCustomerCarCriteria();
+//                            customerCriteria.createCriteria().andOccIdEqualTo(oftbCustomerCar.getOccId());
+//                            daoMap.get("oftbCustomerCarDao").updatewithoutNull(oftbCustomerCar, customerCriteria);
+//                        }
+//                    }
+//                }
+//            }
+//        }
+//    }
+//
+//    /**
+//     * 获取服务器端的实体车位数据
+//     */
+//    private void getUpdateMathineItem() throws Exception {
+//        Object[] resultArr = client.invoke("toReturnMathineItem", GetProperties.getProperties("system.properties", "skylot.machine.id"), SkylotUtils.getStrDate());
+//        if (resultArr != null) {
+//            if (resultArr[0] != null) {
+//                String items = resultArr[0].toString();
+//                Map itemList = SingletonObjectMapper.getInstance().readValue(items, Map.class);
+//                if (MapUtils.isNotEmpty(itemList)) {
+//                    List<Integer> ids = new ArrayList<Integer>();
+//                    List addList = (List) MapUtils.getObject(itemList, "add");
+//                    List updateList = (List) MapUtils.getObject(itemList, "update");
+//                    if (CollectionUtils.isNotEmpty(addList)) {//新增数据
+//                        for (int i = 0; i < addList.size(); i++) {
+//                            Map o = (Map) addList.get(i);
+//                            OftbMathineItem oftbMathineItem = OftbMathineItem.builder().build();
+//                            BeanUtils.populate(oftbMathineItem, o);
+//                            daoMap.get("oftbMathineItemDao").save(oftbMathineItem);
+//                        }
+//                    }
+//                    if (CollectionUtils.isNotEmpty(updateList)) {//更新数据
+//                        for (int i = 0; i < updateList.size(); i++) {
+//                            Map o = (Map) updateList.get(i);
+//                            OftbMathineItem oftbMathineItem = OftbMathineItem.builder().build();
+//                            BeanUtils.populate(oftbMathineItem, o);
+//                            OftbMathineItemCriteria criteria = new OftbMathineItemCriteria();
+//                            criteria.createCriteria().andOmiIdEqualTo(oftbMathineItem.getOmiId());
+//                            daoMap.get("oftbMathineItemDao").updatewithoutNull(oftbMathineItem, criteria);
+//                        }
+//                    }
+//                }
+//            }
+//        }
+//    }
+//
+//    /**
+//     * 获取服务器端的用户车牌绑定信息
+//     */
+//    private void getUpdateCustomersItem() throws Exception {
+//        Object[] resultArr = client.invoke("toReturnItemCustomer", GetProperties.getProperties("system.properties", "skylot.machine.id"), SkylotUtils.getStrDate());
+//        if (resultArr != null) {
+//            if (resultArr[0] != null) {
+//                String items = resultArr[0].toString();
+//                Map itemList = SingletonObjectMapper.getInstance().readValue(items, Map.class);
+//                if (MapUtils.isNotEmpty(itemList)) {
+//                    List<Integer> ids = new ArrayList<Integer>();
+//                    List addList = (List) MapUtils.getObject(itemList, "add");
+//                    List updateList = (List) MapUtils.getObject(itemList, "update");
+//                    if (CollectionUtils.isNotEmpty(addList)) {//新增数据
+//                        for (int i = 0; i < addList.size(); i++) {
+//                            Map o = (Map) addList.get(i);
+//                            IftbItemCustomer iftbItemCustomer = IftbItemCustomer.builder().build();
+//                            BeanUtils.populate(iftbItemCustomer, o);
+//                            daoMap.get("iftbItemCustomerDao").save(iftbItemCustomer);
+//                        }
+//                    }
+//                    if (CollectionUtils.isNotEmpty(updateList)) {//更新数据
+//                        for (int i = 0; i < updateList.size(); i++) {
+//                            Map o = (Map) updateList.get(i);
+//                            IftbItemCustomer iftbItemCustomer = IftbItemCustomer.builder().build();
+//                            BeanUtils.populate(iftbItemCustomer, o);
+//                            IftbItemCustomerCriteria criteria = new IftbItemCustomerCriteria();
+//                            criteria.createCriteria().andIicIdEqualTo(iftbItemCustomer.getIicId());
+//                            daoMap.get("oftbCustomerCarDao").updatewithoutNull(iftbItemCustomer, criteria);
+//                        }
+//                    }
+//                }
+//            }
+//        }
+//    }
 
     /**
      * 同步当前设备状态信息到后台
@@ -616,6 +653,9 @@
         iftbScheduleActionCriteria.createCriteria().andIsaStatusEqualTo(SCHEDULEACTION_STATUS_PLAN);
         List<IftbScheduleAction> iftbScheduleActions = scheduleService.queryForAll(iftbScheduleActionCriteria);
         List<IftbScheduleAction> list = iftbScheduleActions;
+        IftbMachineActionCriteria criteria = new IftbMachineActionCriteria();
+        criteria.createCriteria().andImaIdEqualTo(SkylotUtils.imaId);
+        IftbMachineAction iftbMachineAction = IftbMachineAction.builder().build();
         if (CollectionUtils.isNotEmpty(list)) {
             for (Iterator<IftbScheduleAction> iterator = list.iterator(); iterator.hasNext(); ) {
                 IftbScheduleAction next = iterator.next();
@@ -625,9 +665,30 @@
                 try {
                     wsThreadMgtSend.putCommander(next);
                     String data = sendSync(next);
-                    wsThreadMgtSend.getCommands();
+                    if (StringUtils.equals(data, FN_RETURN_STATUS_SUCCESS)) {
+                        iftbMachineAction.setImaStatus(FN_RETURN_STATUS_SUCCESS);
+                        iftbScheduleActionCriteria.createCriteria().andIsaIdEqualTo(next.getIsaId());
+                        next.setIsaStatus(SCHEDULEACTION_STATUS_FINISH);
+                        ((ScheduleService) serviceMap.get("scheduleService")).update(next, iftbScheduleActionCriteria);
+                        OftbSyncLogCriteria oftbSyncLogCriteria = new OftbSyncLogCriteria();
+                        oftbSyncLogCriteria.createCriteria().andOslTypeEqualTo("0");
+                        if (hasSyncError("0", false)) {
+                            //comparePLC2Local();//上一次有同步失败记录
+                            hasSyncError("0", true);
+                        }
+                        iftbMachineAction.setImaPhysicalStatus(FN_RETURN_STATUS_SUCCESS);
+                    } else {//和SaaS同步失败,放置一条失败的信息
+                        addSyncError("0");
+                        iftbMachineAction.setImaPhysicalStatus(FN_RETURN_STATUS_ERROR);
+                    }
+                    if (StringUtils.equals(SCHEDULEACTION_BUSINESSOBJ_MACHINE, next.getIsaBusinessObj())) {//如果是IMA对象的同步
+                        serviceMap.get("machineActionService").update(iftbMachineAction, criteria);
+                    }
+
                 } catch (Exception e) {//已有队列正在运行e
                     throw new SkyLotException(e);
+                } finally {
+                    wsThreadMgtSend.getCommands();
                 }
             }
         }
@@ -644,17 +705,16 @@
         final Integer[] result = {-1};
         FutureTask<Integer> future =
                 new FutureTask<Integer>(new Callable<Integer>() {//使用Callable接口作为构造参数
-                    public Integer call() throws SkyLotException, IOException {
+                    public Integer call() throws SkyLotException, IOException, InvocationTargetException, IllegalAccessException {
                         Map maps = new HashMap();
-                        System.out.println(iftbScheduleAction.getIsaScheduleMessage());
                         maps = SkylotUtils.jsonToMap(iftbScheduleAction.getIsaScheduleMessage());
-                        String url = GetProperties.getProperties("system.properties", "skylot.webservice.heartbeat");
+                        String url = GetProperties.getProperties("system.properties", "skylot.webservice.parking");
                         if (StringUtils.equals(iftbScheduleAction.getIsaBusinessObj(), SCHEDULEACTION_BUSINESSOBJ_MACHINE)) {
-                            url = GetProperties.getProperties("system.properties", "skylot.webservice.parking");
+
+                            url = GetProperties.getProperties("system.properties", "skylot.webservice.heartbeat");
                         }
-                        HttpClientUtil.getInstance()
-                                .sendHttpPost(url, maps);
-                        result[0] = 0;
+                        result[0] = NumberUtils.toInt(HttpClientUtil.getInstance()
+                                .sendHttpPost(url, maps));
                         return result[0];
                     }
                 });
@@ -681,4 +741,84 @@
         }
     }
 
+    /**
+     * 比较本地库和PLC返回的停车记录,更新本地停车记录为PLC的停车记录
+     */
+    private void comparePLC2Local() throws Exception {
+        Map mapPLC = socketService.getParkingStatus(1);
+        Map mapDB = socketService.getParkingStatus(0);
+        StringBuilder stringBuilder = new StringBuilder();
+        Iterator<Map.Entry<Integer, String>> itPLC = mapPLC.entrySet().iterator();
+        Iterator<Map.Entry<Integer, String>> itDB = mapDB.entrySet().iterator();
+        List missedCar = Lists.newArrayList();
+        while (itDB.hasNext()) {
+            Map.Entry<Integer, String> pairDB = itDB.next();
+            boolean find = false;
+            while (itPLC.hasNext()) {
+                Map.Entry<Integer, String> pairPLC = itPLC.next();
+                if (pairPLC.getKey().equals(pairDB.getKey())) {
+                    find = true;
+                    break;
+                }
+            }
+            if (!find) {
+                missedCar.add(pairDB.getKey() + "");
+            }
+        }
+        if (CollectionUtils.isNotEmpty(missedCar)) {//PLC没有的停车记录
+            TstbMathineParkingCriteria criteria = new TstbMathineParkingCriteria();
+            criteria.createCriteria().andTmpPhysicalCodeIn(missedCar);
+            List<TstbMathineParking> missList = serviceMap.get("parkingService").queryForAll(criteria);
+            if (CollectionUtils.isNotEmpty(missList)) {
+                for (int i = 0; i < missList.size(); i++) {
+                    TstbMathineParking tstbMathineParking = missList.get(i);
+                    TstbMathineParkingLog tstbMathineParkingLog = TstbMathineParkingLog.builder().build();
+                    tstbMathineParkingLog.setImaId(SkylotUtils.imaId);
+                    tstbMathineParkingLog.setTmplCar(tstbMathineParking.getTmpCarCode());
+                    tstbMathineParkingLog.setTmplCreatedate(SkylotUtils.getStrDate());
+                    tstbMathineParkingLog.setTmplPhysicalCode(tstbMathineParking.getTmpPhysicalCode());
+                    tstbMathineParkingLog.setTmplCreateuser("system");
+                    tstbMathineParkingLog.setTmplType(MACHINEPARKING_TYPE_TAKE);
+                    tstbMathineParkingLog.setTmplStatus(PARKING_PULLING_STATUS_FINISH);
+                    this.daoMap.get("tstbMathineParkingLogDao").save(tstbMathineParkingLog);
+                    CommandSchedule();
+                }
+            }
+        }
+    }
+
+    /**
+     * 新增一条错误待同步信息
+     *
+     * @param errorType
+     * @throws Exception
+     */
+    private void addSyncError(String errorType) throws Exception {
+        OftbSyncLog oftbSyncLog = OftbSyncLog.builder().build();
+        oftbSyncLog.setOslStatus(FN_RETURN_STATUS_ERROR);
+        oftbSyncLog.setOslCreatedate(SkylotUtils.getStrDate());
+        oftbSyncLog.setOslType(errorType);
+        this.daoMap.get("oftbSyncLogDao").save(oftbSyncLog);
+    }
+
+    /**
+     * 是否有错误信息
+     *
+     * @param errorType
+     * @return
+     * @throws Exception
+     */
+    private boolean hasSyncError(String errorType, boolean delete) throws Exception {
+        OftbSyncLogCriteria oftbSyncLogCriteria = new OftbSyncLogCriteria();
+        oftbSyncLogCriteria.createCriteria().andOslTypeEqualTo(errorType);
+        List errorList = Lists.newArrayList();
+        errorList = this.daoMap.get("oftbSyncLogDao").ReadAll(oftbSyncLogCriteria);
+        if (CollectionUtils.isNotEmpty(errorList)) {
+            if (delete) {
+                this.daoMap.get("oftbSyncLogDao").delete(oftbSyncLogCriteria);//删除同步日志中上一次完成同步的信息
+            }
+            return true;
+        }
+        return false;
+    }
 }
Index: src/main/java/com/fangda/skylot/mathine/service/impl/BaseCommandUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/service/impl/BaseCommandUtils.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/service/impl/BaseCommandUtils.java	(date 1517639156000)
@@ -22,6 +22,7 @@
     protected StringBuilder stringBuilderto = new StringBuilder();
 
     public static String encode(String str) {
+
         byte[] bytes = str.getBytes();
         StringBuilder sb = new StringBuilder(bytes.length * 2);
         for (int i = 0; i < bytes.length; i++) {
@@ -77,21 +78,28 @@
      * @param returnStr PLC返回的字符串
      */
     protected void convertArraytoCalc(String returnStr) throws SkyLotException {
+        StringBuilder stringBuildernew = new StringBuilder();
         if (StringUtils.split(returnStr, " ").length == 32) {
-            stringBuilder = new StringBuilder();
-            stringBuilder.append(StringUtils.leftPad(StringUtils.split(returnStr, " ")[30], 2, "0"));
-            stringBuilder.append(StringUtils.leftPad(StringUtils.split(returnStr, " ")[31], 2, "0"));
-            calculateStatus(stringBuilder.toString());
-        } else if (StringUtils.split(returnStr, " ").length == 34) {//获取故障代码相关长度
-            stringBuilder = new StringBuilder();
-            stringBuilder.append(StringUtils.leftPad(StringUtils.split(returnStr, " ")[32], 2, "0"));
-            stringBuilder.append(StringUtils.leftPad(StringUtils.split(returnStr, " ")[33], 2, "0"));
-            calculateStatus(stringBuilder.toString());
+            stringBuildernew = new StringBuilder();
+            stringBuildernew.append(StringUtils.leftPad(StringUtils.split(returnStr, " ")[30], 2, "0"));
+            stringBuildernew.append(StringUtils.leftPad(StringUtils.split(returnStr, " ")[31], 2, "0"));
+            calculateStatus(stringBuildernew.toString());
+        } else if (StringUtils.split(returnStr, " ").length == 34) {//获取故障代码相关长度,状态信息
+            stringBuildernew = new StringBuilder();
+            stringBuildernew.append(StringUtils.leftPad(StringUtils.split(returnStr, " ")[32], 2, "0"));
+            stringBuildernew.append(StringUtils.leftPad(StringUtils.split(returnStr, " ")[33], 2, "0"));
+            calculateStatus(stringBuildernew.toString());
             setValueMapAppend(this.valueMap);
-            stringBuilder = new StringBuilder();
-            stringBuilder.append(StringUtils.leftPad(StringUtils.split(returnStr, " ")[30], 2, "0"));
-            stringBuilder.append(StringUtils.leftPad(StringUtils.split(returnStr, " ")[31], 2, "0"));
-            calculateStatus(stringBuilder.toString());
+            stringBuildernew = null;
+            stringBuildernew = new StringBuilder();
+            stringBuildernew.append(StringUtils.leftPad(StringUtils.split(returnStr, " ")[30], 2, "0"));
+            stringBuildernew.append(StringUtils.leftPad(StringUtils.split(returnStr, " ")[31], 2, "0"));
+            calculateStatus(stringBuildernew.toString());
+        } else if (StringUtils.split(returnStr, " ").length == 30) {//获取故障代码相关长度,状态信息
+            stringBuildernew = new StringBuilder();
+            stringBuildernew.append(StringUtils.leftPad(StringUtils.split(returnStr, " ")[28], 2, "0"));
+            stringBuildernew.append(StringUtils.leftPad(StringUtils.split(returnStr, " ")[29], 2, "0"));
+            calculateStatus(stringBuildernew.toString());
         } else {
             throw new SkyLotException(PLC_EXCEPTION_COMMUNACAITON_LENGTH_ERROR);
         }
Index: src/main/java/com/fangda/skylot/mathine/service/impl/SocketServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/service/impl/SocketServiceImpl.java	(revision 6842)
+++ src/main/java/com/fangda/skylot/mathine/service/impl/SocketServiceImpl.java	(date 1517646249000)
@@ -1,6 +1,14 @@
 package com.fangda.skylot.mathine.service.impl;
 
+import com.fangda.skylot.mathine.dao.IBaseDao;
+import com.fangda.skylot.mathine.dao.parking.TstbMathineParkingDAO;
 import com.fangda.skylot.mathine.model.parking.IftbMachineAction;
+import com.fangda.skylot.mathine.model.parking.IftbMachineActionCriteria;
+import com.fangda.skylot.mathine.model.parking.TstbMathineParking;
+import com.fangda.skylot.mathine.model.parking.TstbMathineParkingCriteria;
+import com.fangda.skylot.mathine.model.utils.ErrorCode;
+import com.fangda.skylot.mathine.scheduler.springtask.MainThreadMgt;
+import com.fangda.skylot.mathine.scheduler.springtask.MainThreadUtil;
 import com.fangda.skylot.mathine.service.SocketService;
 import com.fangda.skylot.mathine.utils.GetProperties;
 import com.fangda.skylot.mathine.utils.SingletonObjectMapper;
@@ -42,7 +50,14 @@
 @Data
 @Slf4j
 public class SocketServiceImpl extends BaseCommandUtils implements SocketService {
-
+    @Autowired
+    private MainThreadMgt mainThreadMgt;
+    @Autowired
+    private ErrorCode code;
+    @Autowired
+    private MainThreadUtil mainThreadUtil;
+    @Autowired
+    private Map<String, IBaseDao> daoMap;
     private Socket client = null;
     private String ip = "";
     private String tempCSVbasenum = "";//临时测试用,保存最下方车位编号用
@@ -78,6 +93,33 @@
     private byte[] buffer = null;
     @Autowired
     private BaseCommander baseCommander;
+    private Logger loggerParking = Logger.getLogger("Parking");
+
+
+    /**
+     * 取消存取车,操作
+     *
+     * @param actionType 0,存车;1:取车
+     * @return 0, 操作成功,-1操作失败,-2,操作超时
+     * @throws SkyLotException
+     */
+    public int cancelAction(String actionType) throws SkyLotException {
+        int returnint = -1;
+        try {
+            StringBuilder stringBuilder = new StringBuilder();
+            stringBuilder.append("00000102820C8300000100");
+            if (StringUtils.equals(actionType, "0")) {
+                stringBuilder.append("01");
+            } else {
+                stringBuilder.append("02");
+            }
+            returnint = CommandExectue(PLC_COMMUNACAITON_HEAD_CANCEL_ACTION, stringBuilder.toString());
+            convertArraytoCalc(stringBuilderto.toString());
+        } catch (Exception e) {
+            log.error(e.getMessage());
+        }
+        return returnint;
+    }
 
 
     /**
@@ -95,7 +137,7 @@
             if (StringUtils.equals(actionType, "0")) {
                 stringBuilder.append("01");
             } else {
-                stringBuilder.append("10");
+                stringBuilder.append("02");
             }
             returnint = CommandExectue(PLC_COMMUNACAITON_HEAD_CAR_DOOR, stringBuilder.toString());
             convertArraytoCalc(stringBuilderto.toString());
@@ -105,6 +147,51 @@
         return returnint;
     }
 
+    /**
+     * 获取告警信息之和1005位置
+     *
+     * @return 0, 操作成功,-1操作失败,-2,操作超时
+     * @throws SkyLotException
+     */
+    public Map getIndexError() throws SkyLotException {
+        int returnint = -1;
+        try {
+            StringBuilder stringBuilder = new StringBuilder();
+            stringBuilder.append("000001018203ED000002");
+            returnint = CommandExectue(PLC_COMMUNACAITON_HEAD_ALL_INDEX_STATUS, stringBuilder.toString());
+            convertArraytoCalc(stringBuilderto.toString());
+
+        } catch (Exception e) {
+            log.error(e.getMessage());
+        }
+        Map map = Maps.newHashMap();
+        map.put("valueMap", this.valueMap);
+        map.put("valueAppendMap", this.valueMapAppend);
+        return map;
+    }
+
+    /**
+     * 获取告警信息之和1007位置
+     *
+     * @return 0, 操作成功,-1操作失败,-2,操作超时
+     * @throws SkyLotException
+     */
+    public Map pullIndexError() throws SkyLotException {
+        int returnint = -1;
+        try {
+            StringBuilder stringBuilder = new StringBuilder();
+            stringBuilder.append("000001018203EF000002");
+            returnint = CommandExectue(PLC_COMMUNACAITON_HEAD_ALL_INDEX_STATUS, stringBuilder.toString());
+            convertArraytoCalc(stringBuilderto.toString());
+        } catch (Exception e) {
+            log.error(e.getMessage());
+        }
+        Map map = Maps.newHashMap();
+        map.put("valueMap", this.valueMap);
+        map.put("valueAppendMap", this.valueMapAppend);
+        return map;
+    }
+
     /**
      * 行人门,操作
      *
@@ -120,7 +207,7 @@
             if (StringUtils.equals(actionType, "0")) {
                 stringBuilder.append("01");
             } else {
-                stringBuilder.append("10");
+                stringBuilder.append("02");
             }
             returnint = CommandExectue(PLC_COMMUNACAITON_HEAD_PEOPLE_DOOR, stringBuilder.toString());
             convertArraytoCalc(stringBuilderto.toString());
@@ -156,7 +243,7 @@
         try {
             StringBuilder stringBuilder = new StringBuilder();
             //一般
-            stringBuilder.append("000001018203EB000002");
+            stringBuilder.append("000001018203EC000001");
             returnint = CommandExectue(PLC_COMMUNACAITON_HEAD_ERROR_NORMAL_STATUS, stringBuilder.toString());
             convertArraytoCalc(stringBuilderto.toString());
         } catch (Exception e) {
@@ -217,7 +304,7 @@
         try {
             StringBuilder stringBuilder = new StringBuilder();
             //整体故障
-            stringBuilder.append("000001018203E9000002");
+            stringBuilder.append("000001018203EA000002");
             returnint = CommandExectue(PLC_COMMUNACAITON_HEAD_ERROR_STATUS, stringBuilder.toString());
             convertArraytoCalc(stringBuilderto.toString());
         } catch (Exception e) {
@@ -225,6 +312,26 @@
         }
         return returnint;
     }
+
+    /**
+     * 写车牌
+     *
+     * @return 0, 操作成功,-1操作失败,-2,操作超时
+     * @throws SkyLotException
+     */
+    public int writeCarcode(String carCode) throws SkyLotException {
+        int returnint = -1;
+        try {
+            StringBuilder stringBuilder = new StringBuilder();
+            stringBuilder = new StringBuilder();
+            stringBuilder.append("00000102820BBB00000A");
+            stringBuilder.append(StringUtils.rightPad(encode(carCode), 40, "0"));
+            returnint = CommandExectue(PLC_COMMUNACAITON_HEAD_CAR_CODE, stringBuilder.toString(), null);
+        } catch (Exception e) {
+            throw new SkyLotException(e);
+        }
+        return returnint;
+    }
 
     /**
      * 获取整体状态
@@ -237,7 +344,7 @@
         try {
             StringBuilder stringBuilder = new StringBuilder();
             //整体状态
-            stringBuilder.append("000001018203E8000001");
+            stringBuilder.append("000001018203E8000002");
             returnint = CommandExectue(PLC_COMMUNACAITON_HEAD_STATUS, stringBuilder.toString());
             convertArraytoCalc(stringBuilderto.toString());
         } catch (Exception e) {
@@ -278,6 +385,12 @@
         try {
             StringBuilder stringBuilder = new StringBuilder();
             //旋转
+            getBaseNumber();//获取最下方停车板编号
+            getParkingStatus(1);//获取停车状态
+            parkingLogic.setBaseNum(getBaseNum());
+            parkingLogic.setMachineTotalItmes(MACHINEPARKING_QUANTITY);
+            parkingLogic.setParkingStatusMap(this.getValueMap());
+            parkingLogic.getStoreNum(1);
             stringBuilder.append("00000102820C1C000003");
             stringBuilder.append("0001");
             stringBuilder.append(StringUtils.leftPad(Integer.toHexString(number), 4, "0"));
@@ -318,21 +431,34 @@
     /**
      * 获取停车状态列表
      *
+     * @param Type 0:获取数据来自停车数据库,1:获取数据来自PLC
      * @return 0, 操作成功,-1操作失败,-2,操作超时
      * @throws SkyLotException
      */
-    public int getParkingStatus() throws SkyLotException {
+    public Map getParkingStatus(int Type) throws SkyLotException {
+        Map dataMap = Maps.newHashMap();
         int returnint = -1;
         try {
-            StringBuilder stringBuilder = new StringBuilder();
-            //查询车位停车状态
-            stringBuilder.append("000001018203F2000001");
-            returnint = CommandExectue(PLC_COMMUNACAITON_HEAD_PARKING_STATUS, stringBuilder.toString());
-            convertArraytoCalc(stringBuilderto.toString());
+            if (Type == 1) {
+                StringBuilder stringBuilder = new StringBuilder();
+                //查询车位停车状态
+                stringBuilder.append("000001018203F2000001");
+                returnint = CommandExectue(PLC_COMMUNACAITON_HEAD_PARKING_STATUS, stringBuilder.toString());
+                convertArraytoCalc(stringBuilderto.toString());
+                dataMap = valueMap;
+            } else if (Type == 0) {
+                List dataList = ((TstbMathineParkingDAO) this.daoMap.get("tstbMathineParkingDao")).ReadAll(new TstbMathineParkingCriteria());
+                for (int i = 0; i < dataList.size(); i++) {
+                    TstbMathineParking o = (TstbMathineParking) dataList.get(i);
+                    dataMap.put(NumberUtils.toInt(o.getTmpPhysicalCode()), "1");
+                }
+                valueMap = (HashMap) dataMap;
+            }
         } catch (Exception e) {
             throw new SkyLotException(e);
         }
-        return returnint;
+
+        return dataMap;
     }
 
     /**
@@ -343,7 +469,7 @@
      * @param parkingLogic 停车算法对象
      * @return 0, 存成成功,-1存车失败,-2,操作超时
      */
-    public int ParkingCar(int Number, String carCode, ParkingLogic parkingLogic) {
+    public int ParkingCar(int Number, String carCode, ParkingLogic parkingLogic) throws SkyLotException {
         int returnint = -1;
         try {
             StringBuilder stringBuilder = new StringBuilder();
@@ -353,34 +479,38 @@
             stringBuilder.append(StringUtils.leftPad(parkingLogic.getActionDirect() + "", 4, "0"));//正反转参数
             returnint = CommandExectue(PLC_COMMUNACAITON_HEAD_PARKING, stringBuilder.toString(), null);//旋转车台
             if (returnint == 0) {//存车
-                if (confirmStatus(0) == 0) {//设备旋转完成
-                    getEnergy();//获取旋转电量
+                int status = confirmStatus(0);
+                if (status == NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS)) {//设备旋转完成
+                    log.warn("设备旋转完成");
+                    loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[存车],设备旋转完成");
+//                    getEnergy();//获取旋转电量
                     //旋转车台结束,进行计时
                     if (getDirectionBeforeTime() == 0) {
                         setDirectionBeforeTime(0);
                     } else {
                         setDirectionBeforeTime(System.currentTimeMillis() - getDirectionBeforeTime());//旋转计时结束
                     }
-                    //计时结束
-
                     //打开车库门
                     if (carDoor(FN_RETURN_STATUS_SUCCESS) == NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS)) {//车库门开门指令发送成功
+                        log.warn("车库门打开指令已发,等待车库门打开");
+                        loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[存车],车库门打开指令已发,等待车库门打开");
                         //等待车库门已开
-                        if (confirmStatus(3) == 0) {//车库门已经打开
-                            //获取内置摄像头数据 // TODO: 12/01/2018 获取内置摄像头数据
-                            //写车牌
-                            stringBuilder = new StringBuilder();
-                            stringBuilder.append("00000102820BBB00000A");
-                            stringBuilder.append(StringUtils.rightPad(encode(carCode), 40, "0"));
-                            returnint = CommandExectue(PLC_COMMUNACAITON_HEAD_CAR_CODE, stringBuilder.toString(), null);
-                            if (returnint != 0) {//写车牌
-                                return returnint;
-                            }
+                        status = confirmStatus(3);
+                        if (status == 0) {//车库门已经打开
+                            log.warn("车库门打开完成");
+                            loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[存车],车库门打开完成!");
+                            return returnint;
                         } else {
-                            return returnint;
-                        }
-                    } else {
-                        return returnint;
+                            if (NumberUtils.toInt(FN_RETURN_STATUS_HANDLE) == status) {//系统急停,严重错误
+                                return NumberUtils.toInt(FN_RETURN_STATUS_HANDLE);
+                            }
+                        }
+                    } else {
+                        return returnint;
+                    }
+                } else {
+                    if (NumberUtils.toInt(FN_RETURN_STATUS_HANDLE) == status) {//系统急停,严重错误
+                        return NumberUtils.toInt(FN_RETURN_STATUS_HANDLE);
                     }
                 }
             } else {
@@ -401,29 +531,47 @@
      * @param parkingLogic
      * @return -1.故障信息,0,可以继续停车
      */
-    public int ParkingCarConfirm() {
+    public int ParkingCarConfirm(String carCode) {
         int returnint = -1;
         try {
             getHighErrorStatus();//查询是否有故障码
             if (MapUtils.isNotEmpty(valueMapAppend) || MapUtils.isNotEmpty(valueMap)) {//有故障码
                 return returnint;
             }
-            if (confirmStatus(2) == 0) {//PLC是否空闲
-                //关闭车库门
+            int status = confirmStatus(3);
+            if (status == 0) {//车库门打开状态
+                //获取当前设备是否有主要故障信息
                 if (carDoor(FN_RETURN_STATUS_ERROR) == NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS)) {//车库门关门指令发送成功
                     //等待车库门已关
-                    if (confirmStatus(4) == 0) {//车库门已经关闭
-                        if (confirmStatus(2) == 0) {//PLC是否空闲
+                    status = confirmStatus(3);
+                    if (status == 0) {//车库门已经关闭
+                        //写车牌
+                        stringBuilder = new StringBuilder();
+                        stringBuilder.append("00000102820BBB00000A");
+                        stringBuilder.append(StringUtils.rightPad(encode(carCode), 40, "0"));
+                        returnint = CommandExectue(PLC_COMMUNACAITON_HEAD_CAR_CODE, stringBuilder.toString(), null);
+                        status = confirmStatus(2);
+                        if (status == 0) {//PLC是否空闲
                             return NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS);
                         } else {
+                            if (NumberUtils.toInt(FN_RETURN_STATUS_HANDLE) == status) {//系统急停,严重错误
+                                return NumberUtils.toInt(FN_RETURN_STATUS_HANDLE);
+                            }
                             return returnint;
                         }
                     } else {
-                        return returnint;
-                    }
-                } else {
-                    return returnint;
-                }
+                        if (NumberUtils.toInt(FN_RETURN_STATUS_HANDLE) == status) {//系统急停,严重错误
+                            return NumberUtils.toInt(FN_RETURN_STATUS_HANDLE);
+                        }
+                    }
+                } else {
+                    return returnint;
+                }
+            } else {
+                if (NumberUtils.toInt(FN_RETURN_STATUS_HANDLE) == status) {//系统急停,严重错误
+                    return NumberUtils.toInt(FN_RETURN_STATUS_HANDLE);
+                }
+                return returnint;
             }
         } catch (Exception e) {
             return -1;
@@ -488,40 +636,30 @@
             if (MapUtils.isNotEmpty(valueMapAppend) || MapUtils.isNotEmpty(valueMap)) {//有故障码
                 return returnint;
             }
-            if (confirmStatus(2) == 0) {//PLC是否空闲
-                //打开车库门
-                if (carDoor(FN_RETURN_STATUS_SUCCESS) == NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS)) {//车库门开门指令发送成功
-                    //等待车库门已开
-                    if (confirmStatus(4) == 0) {//车库门已经开
-                        if (confirmStatus(2) == 0) {//PLC是否空闲
-                            getHighErrorStatus();//查询是否有故障码
-                            if (MapUtils.isEmpty(valueMapAppend) && MapUtils.isEmpty(valueMap)) {//没故障码
-                                //尝试关闭车库门
-                                //关闭车库门
-                                if (carDoor(FN_RETURN_STATUS_ERROR) == NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS)) {//车库门关门指令发送成功
-                                    //等待车库门已关
-                                    if (confirmStatus(4) == 0) {//车库门已经关闭
-                                        if (confirmStatus(2) == 0) {//PLC是否空闲
-                                            return NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS);
-                                        } else {
-                                            return returnint;
-                                        }
-                                    } else {
-                                        return returnint;
-                                    }
-                                } else {
-                                    return returnint;
-                                }
-                            }
-                        } else {
-                            return returnint;
-                        }
-                    } else {
-                        return returnint;
-                    }
-                } else {
-                    return returnint;
-                }
+            //打开车库门
+            if (carDoor(FN_RETURN_STATUS_SUCCESS) == NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS)) {//车库门开门指令发送成功
+                //等待车库门已开
+                if (confirmStatus(4) == 0) {//车库门已经开
+                    getHighErrorStatus();//查询是否有故障码
+                    if (MapUtils.isEmpty(valueMapAppend) && MapUtils.isEmpty(valueMap)) {//没故障码
+                        //尝试关闭车库门
+                        //关闭车库门
+                        if (carDoor(FN_RETURN_STATUS_ERROR) == NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS)) {//车库门关门指令发送成功
+                            //等待车库门已关
+                            if (confirmStatus(4) == 0) {//车库门已经关闭
+                                return NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS);
+                            } else {
+                                return returnint;
+                            }
+                        } else {
+                            return returnint;
+                        }
+                    }
+                } else {
+                    return returnint;
+                }
+            } else {
+                return returnint;
             }
 
         } catch (Exception e) {
@@ -534,28 +672,42 @@
     private int getStatus(int bType) throws SkyLotException {
         getStatusPrivate();
         if (MapUtils.isNotEmpty(this.valueMap)) {
+            if (!valueMap.keySet().contains(2)) {//手动模式
+                return NumberUtils.toInt(FN_RETURN_STATUS_EXCEPTION);
+            }
             for (Object o : valueMap.keySet()) {
                 if (displayDetail) {
-
+                    log.warn(valueMap.toString());
                 }
                 int pNum = (Integer) o;
+                //增加急停,严重错误判断
+                if (pNum == 11) {
+                    return NumberUtils.toInt(FN_RETURN_STATUS_HANDLE);
+                }
+                if (bType == 9) {
+                    return NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS);
+                }
                 if (bType == 0) {//存车
-                    if (pNum == 13) {//运行中状态
-                        setDirectionBeforeTime(System.currentTimeMillis());//停车前,旋转计时开始
-                        this.setStatusCheck(0);//运行中状态
-                        return NumberUtils.toInt(FN_RETURN_STATUS_ERROR);
-                    } else if (pNum == 14) {//运行完成状态
-                        if (this.getStatusCheck() == 0) {//验证运行中状态存在
-                            setDirectionBeforeTime(System.currentTimeMillis() - getFinishParkingTime());//停车前,旋转计时结束
-                            // TODO: 14/08/2017 需要增加存车完成之后,最下方车位不是所需车位,告知PLC告警
-                            this.setStatusCheck(1);//继续侦测运行空闲状态
-                            return NumberUtils.toInt(FN_RETURN_STATUS_ERROR);
-                        } else if (this.getStatusCheck() == -1) {//当前最下方已经是待旋转车位
-                            setDirectionBeforeTime(0);//设置旋转计时为0
-                            // TODO: 14/08/2017 需要增加存车完成之后,最下方车位不是所需车位,告知PLC告警
-                            this.setStatusCheck(1);//继续侦测空闲状态
-                            return NumberUtils.toInt(FN_RETURN_STATUS_ERROR);
-                        }
+                    if (pNum == 14) {//运行完成状态
+//                        if (this.getStatusCheck() == 0) {//验证运行中状态存在
+//                            setDirectionBeforeTime(System.currentTimeMillis() - getFinishParkingTime());//停车前,旋转计时结束
+//                            // TODO: 14/08/2017 需要增加存车完成之后,最下方车位不是所需车位,告知PLC告警
+//                            this.setStatusCheck(1);//继续侦测运行空闲状态
+//                            return NumberUtils.toInt(FN_RETURN_STATUS_ERROR);
+//                        } else if (this.getStatusCheck() == -1) {//当前最下方已经是待旋转车位
+//                            setDirectionBeforeTime(0);//设置旋转计时为0
+//                            // TODO: 14/08/2017 需要增加存车完成之后,最下方车位不是所需车位,告知PLC告警
+//                            this.setStatusCheck(1);//继续侦测空闲状态
+//                            return NumberUtils.toInt(FN_RETURN_STATUS_ERROR);
+//                        } else if (this.getStatusCheck() == 1) {//验证运行完成状态存在
+//                            this.setStatusCheck(-1);//完成停车操作
+//                            try {
+//                                Thread.sleep(1000);//停车完成时,等待空闲,附加延迟1秒
+//                            } catch (InterruptedException e) {
+//                                e.printStackTrace();
+//                            }
+//                        }
+                        return NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS);
                     } else if (pNum == 10) {//停车完成状态
                         if (this.getStatusCheck() == 1) {//验证运行完成状态存在
                             this.setStatusCheck(-1);//完成停车操作
@@ -574,34 +726,43 @@
                         this.setStatusCheck(0);//运行中状态
                         return 1;
                     } else if (pNum == 14) {//运行完成状态
-                        if (this.getStatusCheck() == 0) {//验证运行中状态存在
-                            setDirectionBeforeTime(System.currentTimeMillis() - getFinishParkingTime());//停车前,旋转计时结束
-                            // TODO: 14/08/2017 需要增加取车完成之后,最下方车位不是所需车位,告知PLC告警
-                            this.setStatusCheck(1);//继续侦测运行完成状态
-                            return NumberUtils.toInt(FN_RETURN_STATUS_ERROR);
-                        } else if (this.getStatusCheck() == -1) {//当前最下方已经是待旋转车位
-                            setDirectionBeforeTime(0);//设置旋转计时为0
-                            // TODO: 14/08/2017 需要增加存车完成之后,最下方车位不是所需车位,告知PLC告警
-                            this.setStatusCheck(1);//继续侦测空闲状态
-                            try {
-                                Thread.sleep(1000);//停车完成时,等待空闲,附加延迟1秒
-                            } catch (InterruptedException e) {
-                                throw new SkyLotException(e);
-                            }
-                            return NumberUtils.toInt(FN_RETURN_STATUS_ERROR);
-                        }
+//                        if (this.getStatusCheck() == 0) {//验证运行中状态存在
+//                            setDirectionBeforeTime(System.currentTimeMillis() - getFinishParkingTime());//停车前,旋转计时结束
+//                            // TODO: 14/08/2017 需要增加取车完成之后,最下方车位不是所需车位,告知PLC告警
+//                            this.setStatusCheck(1);//继续侦测运行完成状态
+//                            return NumberUtils.toInt(FN_RETURN_STATUS_ERROR);
+//                        } else if (this.getStatusCheck() == -1) {//当前最下方已经是待旋转车位
+//                            setDirectionBeforeTime(0);//设置旋转计时为0
+//                            // TODO: 14/08/2017 需要增加存车完成之后,最下方车位不是所需车位,告知PLC告警
+//                            this.setStatusCheck(1);//继续侦测空闲状态
+//                            try {
+//                                Thread.sleep(1000);//停车完成时,等待空闲,附加延迟1秒
+//                            } catch (InterruptedException e) {
+//                                throw new SkyLotException(e);
+//                            }
+//                            return NumberUtils.toInt(FN_RETURN_STATUS_ERROR);
+//                        }
+                        return NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS);
                     } else if (pNum == 10) {//停车完成状态
                         if (this.getStatusCheck() == 1) {//验证运行完成状态存在
                             this.setStatusCheck(-1);//完成停车操作
                             return NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS);
                         }
                     }
-                } else if (bType == 2) {//空闲状
-                    if (pNum == 10) {//设备空闲
+                } else if (bType == 2) {//查询PLC状态
+                    if (pNum == 10) {//空闲
                         return NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS);
                     }
                 } else if (bType == 3) {//车库门打开状态
-                    if (pNum == 7) {//设备空闲
+                    if (pNum == 7) {//车库门打开
+                        return NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS);
+                    }
+                } else if (bType == 4) {//车库门关闭
+                    if (pNum == 8) {//车库门关闭
+                        return NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS);
+                    }
+                } else if (bType == 5) {//人行门开
+                    if (pNum == 9) {//人行门开
                         return NumberUtils.toInt(FN_RETURN_STATUS_SUCCESS);
                     }
                 }
@@ -621,7 +782,7 @@
      */
     @Override
     public int enableParking() throws SkyLotException {
-        getParkingStatus();
+        getParkingStatus(1);
         if (MapUtils.isNotEmpty(this.valueMap)) {
             if (this.valueMap.keySet().size() == NumberUtils.toInt(MACHINEPARKING_QUANTITY)) {
                 return 1;
@@ -639,7 +800,7 @@
      * @throws SkyLotException
      */
     @Override
-    public Map doParking(String carNumber) throws SkyLotException {
+    public Map doParking(String carNumber, boolean firstPark) throws SkyLotException {
         Logger loggerParking = Logger.getLogger("Parking");
         Map returnMap = new HashMap();
         setTimeCounter(0);
@@ -647,39 +808,55 @@
         setDirectionAfterTime(0);
         setFinishParkingTime(0);
         try {
-            getParkingStatus();
-            //首先检查,PLC状态是否可以停车
-            if (confirmStatus(2) > 0) {
-                returnMap.put(MAP_PARKING_STATUS, 1);
-                return returnMap;
-            }
-            ParkingLogic parkingLogic = new ParkingLogic();
-            //判断系统是否可以进行存取车
-            getBaseNumber();//获取最下方停车板编号
-            loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[存车],当前车辆是[" + carNumber + "],当前最下方车位:[" + getBaseNum() + "]");
-            log.warn("当前最下方车位:" + getBaseNum());
-            getParkingStatus();//获取停车状态
-            returnMap.put(MAP_PARKING_BASENUMBER, getBaseNum());
-            returnMap.put("basenumber_save", tempCSVbasenum);
-            parkingLogic.setBaseNum(getBaseNum());
-            parkingLogic.setMachineTotalItmes(MACHINEPARKING_QUANTITY);
-            returnMap.put(MAP_PARKING_CAR_PARKING_STATUS, SingletonObjectMapper.getInstance().writeValueAsString(this.getValueMap()));
-            parkingLogic.setParkingStatusMap(this.getValueMap());
-            int parkingNumber = parkingLogic.getStoreNum(0);
-            log.warn("准备停车位置:" + parkingNumber);
-            loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[存车],当前车辆是[" + carNumber + "],准备停车位置:[" + parkingNumber + "]");
-            log.warn(parkingLogic.getActionDirect() + "旋转方向:" + (parkingLogic.getActionDirect() == 2 ? "反向" : "正向"));
-            loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[存车],当前车辆是[" + carNumber + "],准备旋转方向:[" + (parkingLogic.getActionDirect() == 2 ? "反向" : "正向") + "]");
-            setTimeCounter(System.currentTimeMillis());//停车耗时计时器
-            returnMap.put(MAP_PARKING_LOCATION, parkingNumber);
-            if (ParkingCar(parkingNumber, carNumber, parkingLogic) == 0) {
-                setParkdirectionAfterTime(System.currentTimeMillis() - getTimeCounter());//停车之前,旋转耗时
-                returnMap.put(MAP_PARKING_STATUS, 0);
-                returnMap.put(MAP_ENERGY, getDirectionEnergy());
-                setFinishParkingTime(System.currentTimeMillis() - getTimeCounter() - getDirectionBeforeTime());//实际完成停车耗时,等于当前时间减去旋转车台耗时,再减去开始计时的时间点
-                returnMap.put(MAP_PARKING_DIRECTION, parkingLogic.getFinalPostionNumer());
+
+            ParkingLogic parkingLogic = new ParkingLogic();
+            int parkingNumber = 0;
+            if (firstPark) {
+                //首先检查,PLC状态是否可以停车
+                if (confirmStatus(2) > 0) {
+                    returnMap.put(MAP_PARKING_STATUS, 1);
+                    return returnMap;
+                }
+                //判断系统是否可以进行存取车
+                getBaseNumber();//获取最下方停车板编号
+                loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[存车],当前车辆是[" + carNumber + "],当前最下方车位:[" + getBaseNum() + "]");
+                log.warn("当前最下方车位:" + getBaseNum());
+                getParkingStatus(0);//获取停车状态
+                returnMap.put(MAP_PARKING_BASENUMBER, getBaseNum());
+                returnMap.put("basenumber_save", tempCSVbasenum);
+                parkingLogic.setBaseNum(getBaseNum());
+                parkingLogic.setMachineTotalItmes(MACHINEPARKING_QUANTITY);
+                returnMap.put(MAP_PARKING_CAR_PARKING_STATUS, SingletonObjectMapper.getInstance().writeValueAsString(this.getValueMap()));
+                parkingLogic.setParkingStatusMap(this.getValueMap());
+                parkingNumber = parkingLogic.getStoreNum(0);
+                code.setTargetLot(parkingNumber + "");
+                try {
+                    mainThreadUtil.heartBeatPLC("3", "1");
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+                log.warn("准备停车位置:" + parkingNumber);
+                loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[存车],当前车辆是[" + carNumber + "],准备停车位置:[" + parkingNumber + "]");
+                log.warn(parkingLogic.getActionDirect() + "旋转方向:" + (parkingLogic.getActionDirect() == 2 ? "反向" : "正向"));
+                loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[存车],当前车辆是[" + carNumber + "],准备旋转方向:[" + (parkingLogic.getActionDirect() == 2 ? "反向" : "正向") + "]");
+                setTimeCounter(System.currentTimeMillis());//停车耗时计时器
+                returnMap.put(MAP_PARKING_LOCATION, parkingNumber);
+                int status = ParkingCar(parkingNumber, carNumber, parkingLogic);
+                if (status == 0) {
+                    setParkdirectionAfterTime(System.currentTimeMillis() - getTimeCounter());//停车之前,旋转耗时
+                    returnMap.put(MAP_PARKING_STATUS, 0);
+                    returnMap.put(MAP_ENERGY, getDirectionEnergy());
+                    setFinishParkingTime(System.currentTimeMillis() - getTimeCounter() - getDirectionBeforeTime());//实际完成停车耗时,等于当前时间减去旋转车台耗时,再减去开始计时的时间点
+                    returnMap.put(MAP_PARKING_DIRECTION, parkingLogic.getFinalPostionNumer());
+                } else {
+                    if (NumberUtils.toInt(FN_RETURN_STATUS_HANDLE) == status) {//系统急停,严重错误
+                        returnMap.put(MAP_PARKING_STATUS, NumberUtils.toInt(FN_RETURN_STATUS_HANDLE));
+                    }
+                }
+            } else {
                 //停车确认
-                if (ParkingCarConfirm() == 0) {
+                int status = ParkingCarConfirm(carNumber);
+                if (status == 0) {
                     loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[存车],当前车辆是[" + carNumber + "],存车操作完成!");
                     loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[存车],存车耗费电量:[" + getDirectionEnergy() + "]");
                     if (parkingLogic.getFinalPostionNumer() != parkingNumber && NumberUtils.toInt(parkingLogic.getFinalPostionNumer() + "", 0) != 0) {//判断是否需要再次旋转
@@ -700,9 +877,13 @@
                     returnMap.put(MAP_TIME_SPEND_DIRECTION, (getDirectionBeforeTime()) / 1000);
                     returnMap.put(MAP_TIME_SPEND_DOING, (getFinishParkingTime()) / 1000);
                     returnMap.put(MAP_TIME_SPEND_WEIGHT, (getDirectionAfterTime()) / 1000);
+                } else {
+                    if (NumberUtils.toInt(FN_RETURN_STATUS_HANDLE) == status) {//系统急停,严重错误
+                        returnMap.put(MAP_PARKING_STATUS, NumberUtils.toInt(FN_RETURN_STATUS_HANDLE));
+                    }
                 }
+            }
 
-            }
         } catch (SkyLotException e) {
             returnMap.put(MAP_PARKING_STATUS, -1);
         } catch (JsonProcessingException e) {
@@ -717,7 +898,7 @@
      * @throws SkyLotException
      */
     @Override
-    public Map doPulling(String positionNumber) throws SkyLotException {
+    public Map doPulling(String positionNumber, boolean firstPull) throws SkyLotException {
         Map returnMap = new HashMap();
         Logger loggerParking = Logger.getLogger("Parking");
         setTimeCounter(0);
@@ -730,21 +911,29 @@
                 returnMap.put(MAP_PARKING_STATUS, -1);
             }
             setTimeCounter(System.currentTimeMillis());//取车耗时计时器
-            getBaseNumber();
-            List positionList = ListUtils.sum(parkingLogic.getRightPositionNumber(NumberUtils.toInt(getBaseNum()), 0), parkingLogic.getRightPositionNumber(NumberUtils.toInt(getBaseNum()), 2));//依次查找,下方和左侧;上方和左侧
-            if (ArrayUtils.contains(positionList.toArray(), NumberUtils.toInt(positionNumber))) {
-                parkingLogic.setActionDirect(2);
-            } else {
-                parkingLogic.setActionDirect(1);
-            }
-            loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[取车],当前最下方车位:[" + getBaseNum() + "]");
-            loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[取车],准备取车位置:[" + positionNumber + "]");
-            loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[取车],旋转方向:[" + (parkingLogic.getActionDirect() == 2 ? "反向" : "正向") + "]");
-            log.warn("当前最下方车位:" + getBaseNum());
-            log.warn("准备取车位置:" + positionNumber);
-            log.warn("旋转方向:" + (parkingLogic.getActionDirect() == 2 ? "反向" : "正向"));
-            returnMap.put(MACHINEACTION_DIRECTION_CODE_CLOCKWISE, (parkingLogic.getActionDirect() == 2 ? MACHINEACTION_DIRECTION_CODE_ANTICLOCKWISE : MACHINEACTION_DIRECTION_CODE_CLOCKWISE));
-            if (PullCar(NumberUtils.toInt(positionNumber), parkingLogic) == 0) {
+            if (firstPull) {
+                getBaseNumber();
+                List positionList = ListUtils.sum(parkingLogic.getRightPositionNumber(NumberUtils.toInt(getBaseNum()), 0), parkingLogic.getRightPositionNumber(NumberUtils.toInt(getBaseNum()), 2));//依次查找,下方和左侧;上方和左侧
+                if (ArrayUtils.contains(positionList.toArray(), NumberUtils.toInt(positionNumber))) {
+                    parkingLogic.setActionDirect(2);
+                } else {
+                    parkingLogic.setActionDirect(1);
+                }
+                loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[取车],当前最下方车位:[" + getBaseNum() + "]");
+                loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[取车],准备取车位置:[" + positionNumber + "]");
+                loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[取车],旋转方向:[" + (parkingLogic.getActionDirect() == 2 ? "反向" : "正向") + "]");
+                log.warn("当前最下方车位:" + getBaseNum());
+                log.warn("准备取车位置:" + positionNumber);
+                log.warn("旋转方向:" + (parkingLogic.getActionDirect() == 2 ? "反向" : "正向"));
+                returnMap.put(MACHINEACTION_DIRECTION_CODE_CLOCKWISE, (parkingLogic.getActionDirect() == 2 ? MACHINEACTION_DIRECTION_CODE_ANTICLOCKWISE : MACHINEACTION_DIRECTION_CODE_CLOCKWISE));
+                if (PullCar(NumberUtils.toInt(positionNumber), parkingLogic) == 0) {
+                    returnMap.put(MAP_PARKING_STATUS, 0);
+                    getBaseNumber();//获取最下方停车板编号
+                    getParkingStatus(1);//获取停车状态
+                    returnMap.put(MAP_PARKING_BASENUMBER, getBaseNum());
+                    returnMap.put(MAP_PARKING_LOCATION, positionNumber);
+                }
+            } else {
                 if (PullCarComfirm() == 0) {
                     loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[取车],取车操作完成!");
                     loggerParking.warn("当前时间:[" + SkylotUtils.getStrDate() + "],当前操作[取车],取车耗费电量:[" + getDirectionEnergy() + "]");
@@ -752,7 +941,7 @@
                     setFinishParkingTime(System.currentTimeMillis() - getTimeCounter() - getDirectionBeforeTime());//实际完成停车耗时,等于当前时间减去旋转车台耗时,再减去开始计时的时间点
                     returnMap.put(MAP_PARKING_STATUS, 0);
                     getBaseNumber();//获取最下方停车板编号
-                    getParkingStatus();//获取停车状态
+                    getParkingStatus(1);//获取停车状态
                     returnMap.put(MAP_PARKING_BASENUMBER, getBaseNum());
                     returnMap.put(MAP_PARKING_LOCATION, positionNumber);
                     parkingLogic.setBaseNum(getBaseNum());
@@ -765,7 +954,9 @@
                     returnMap.put(MAP_TIME_SPEND_DOING, (getFinishParkingTime()) / 1000);
                     returnMap.put(MAP_TIME_SPEND_WEIGHT, (getDirectionAfterTime()) / 1000);
                 }
+
             }
+
         } catch (Exception e) {
             returnMap.put(MAP_PARKING_STATUS, -1);
             throw new SkyLotException(e);
@@ -777,26 +968,34 @@
     /**
      * 确认是否可以
      *
-     * @param type 状态查询:2,查询停车:0,查询取车:1,车库门打开:3,车库门关闭:4,人行门打开:5
+     * @param type 状态查询:2,查询停车:0,查询取车:1,车库门打开:3,车库门关闭:4,人行门打开:5,获取整体状态:6,心跳查询:9
      * @return
      * @throws SkyLotException
      */
-    public int confirmStatus(int type) throws SkyLotException {
+    public int confirmStatus(int type, boolean... followLoop) throws SkyLotException {
         int a = 1;
         int looptimes = 0;
         setStatusCheck(-1);
         //check status
         try {
             while (a != 0) {//验证状态过程
-                if (looptimes > NumberUtils.toInt(opeartionTimeout)) {
-                    break;
-                }
-                a = getStatus(type);
+                if (type != 6) {
+                    a = getStatus(type);
+                }
+                if (a == NumberUtils.toInt(FN_RETURN_STATUS_HANDLE)) {//严重错误,急停
+                    return NumberUtils.toInt(FN_RETURN_STATUS_HANDLE);
+                }
+                if (a == NumberUtils.toInt(FN_RETURN_STATUS_EXCEPTION)) {//手动模式
+                    return NumberUtils.toInt(FN_RETURN_STATUS_EXCEPTION);
+                }
                 try {
                     Thread.sleep(1000);
                 } catch (InterruptedException e) {
                     throw new SkyLotException(e);
                 }
+                if (followLoop != null && followLoop.length > 0) {
+                    break;
+                }
                 looptimes++;
             }
             if (looptimes > NumberUtils.toInt(opeartionTimeout)) {
@@ -805,7 +1004,7 @@
         } catch (Exception e) {
             return -1;
         }
-        return 0;
+        return a;
     }
 
     /**
@@ -815,38 +1014,46 @@
      * @throws SkyLotException
      */
     @Override
-    public Map getAllStatus() throws SkyLotException {
+    public Map getAllStatus(boolean... getDirection) throws SkyLotException {
         String operationStatus = "0";
         String businessStatus = "0";
+        IftbMachineAction iftbMachineAction = IftbMachineAction.builder().build();
         try {
-            getStatusPrivate();
-        } catch (SkyLotException e) {
-        }
-        //获取当前PLC运行状态
-        if (null == MapUtils.getString(this.valueMap, 10)) {
-            if (null != MapUtils.getString(this.valueMap, 5) || null != MapUtils.getString(this.valueMap, 6)) {
-                businessStatus = null != MapUtils.getString(this.valueMap, 5) ? "0" : "1";
-                operationStatus = "1";
-            } else if (null != MapUtils.getString(this.valueMap, 11) || null != MapUtils.getString(this.valueMap, 12)) {
-                operationStatus = "2";
+            if (getDirection.length == 0) {
+                getStatusPrivate();
+                //获取当前PLC运行状态
+                if (null == MapUtils.getString(this.valueMap, 10)) {//空闲状态丢失
+                    if (null != MapUtils.getString(this.valueMap, 11) || null != MapUtils.getString(this.valueMap, 12)) {
+                        operationStatus = FN_RETURN_STATUS_HANDLE;
+                    } else if (null != MapUtils.getString(this.valueMap, 13)) {
+                        operationStatus = FN_RETURN_STATUS_ERROR;
+                    }
+                }
+                iftbMachineAction.setImaStatus(operationStatus);
+            } else {
+                IftbMachineActionCriteria criteria = new IftbMachineActionCriteria();
+                criteria.createCriteria().andImaIdEqualTo(SkylotUtils.imaId);
+                iftbMachineAction = (IftbMachineAction) daoMap.get("iftbMachineActionDao").ReadSingle(criteria);
             }
+        } catch (Exception e) {
         }
         Map resultMap = new HashMap();
         Map returnMap = Maps.newHashMap();
-        resultMap.put("operationStatus", operationStatus);
-        resultMap.put("businessStatus", businessStatus);
-        IftbMachineAction iftbMachineAction = IftbMachineAction.builder().build();
+        if (iftbMachineAction == null) {
+            iftbMachineAction = IftbMachineAction.builder().build();
+        }
         iftbMachineAction.setImaAddress(GetProperties.getProperties("system.properties", "skylot.machine.address"));
         iftbMachineAction.setImaId(SkylotUtils.imaId);
         iftbMachineAction.setImaPort(GetProperties.getProperties("system.properties", "skylot.machine.port"));
         try {
-            iftbMachineAction.setImaStatus(SingletonObjectMapper.getInstance().writeValueAsString(resultMap));
-            iftbMachineAction.setImaCreatetime(SkylotUtils.getStrDate());
-            iftbMachineAction.setImaStatus(FN_RETURN_STATUS_SUCCESS);
-
+            iftbMachineAction.setImaUpdatetime(SkylotUtils.getStrDate());
             returnMap = SkylotUtils.beanToMap(iftbMachineAction);
+            returnMap.put("valueMap", this.valueMap);
+            returnMap.put("valueAppendMap", this.valueMapAppend);
+            resultMap.put("operationStatus", operationStatus);
+            resultMap.put("businessStatus", businessStatus);
             SkylotUtils.removeNullValue(returnMap);
-        } catch (JsonProcessingException e) {
+        } catch (Exception e) {
             throw new SkyLotException(e);
         }
 
Index: src/main/java/com/fangda/skylot/mathine/service/parking/ParkingLogService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/service/parking/ParkingLogService.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/service/parking/ParkingLogService.java	(date 1516068276000)
@@ -31,9 +31,12 @@
     /**
      * 主停车方法
      *
+     * @param parkingCar 待停车车牌
+     * @param firstPark 是否是首次停车吗,true is 是
      * @return 0, 操作成功, 1, 有车正在进行停车, 2, 故障或者异常
+     * @throws Exception
      */
-    int parkingAction(String parkingCar) throws Exception;
+    int parkingAction(String parkingCar, boolean firstPark) throws Exception;
 
     /**
      * 处理消息的显示
Index: src/main/java/com/fangda/skylot/mathine/service/sync/SyncService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/service/sync/SyncService.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/service/sync/SyncService.java	(date 1517390600000)
@@ -29,7 +29,7 @@
      * @param carNumber 车牌
      * @return iStatus:0, 停车成功, 1, 停车失败;iParkingLocation:停车位置;iDirection:待旋转到最下方车位;BaseNumber:操作之前最下方车位编号;iParkingStatus:当前停车状态
      */
-    Map parkCar(String carNumber) throws SkyLotException, Exception;
+    Map parkCar(String carNumber, boolean firstPark) throws SkyLotException, Exception;
 
     /**
      * 取车指令
@@ -37,4 +37,49 @@
      * @return iStatus:0, 停车成功, 1, 停车失败;iParkingLocation:停车位置;iDirection:待旋转到最下方车位;BaseNumber:操作之前最下方车位编号;iParkingStatus:当前停车状态
      */
     Map pullCar(String carNumber) throws SkyLotException, Exception;
+
+    /**
+     * 检查车辆是否授权
+     *
+     * @param carNumber 车牌号
+     * @return 0, 车辆已授权, 1, 车辆非经授权
+     * @throws Exception
+     */
+    int checkCarFromDB(String carNumber) throws Exception;
+
+    /**
+     * 检查PLC状态
+     *
+     * @param checkType 检查类型,0,状态检查,1,状态和空闲车位检查,9:心跳检查
+     * @param check     是否自动循环
+     * @return 0, 检查成功, 1, 检查失败,2,没有空位可以停车
+     * @throws Exception
+     */
+    int checkPLC(int checkType, boolean... check) throws Exception;
+
+    /**
+     * 获取待取车的停车位置
+     *
+     * @param carNumber 车牌
+     * @return 0, 没有位置, 其他就是位置信息
+     */
+    int getParkingPhysicalCode(String carNumber) throws Exception;
+
+    /**
+     * 更新同步日程
+     *
+     * @param scheduleMap
+     * @throws Exception
+     */
+    void updateSchedule(Map scheduleMap) throws Exception;
+
+    /**
+     * 创建存取车流程
+     *
+     * @param carNumber
+     * @param parkingMap
+     * @param isParking
+     * @return
+     */
+    int createParkinglog(String carNumber, Map parkingMap, int isParking);
 }
Index: src/main/java/com/fangda/skylot/mathine/service/SocketService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/service/SocketService.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/service/SocketService.java	(date 1517548590000)
@@ -1,6 +1,7 @@
 package com.fangda.skylot.mathine.service;
 
 import com.fangda.skylot.mathine.utils.exception.SkyLotException;
+import com.fangda.skylot.mathine.utils.math.ParkingLogic;
 
 import java.util.Map;
 
@@ -11,11 +12,12 @@
     /**
      * 获取当前PLC的状态
      *
-     * @param bType 定义查询业务的类型,0,停车,1,取车,2,空闲状态
+     * @param bType      状态查询:2,查询停车:0,查询取车:1,车库门打开:3,车库门关闭:4,人行门打开:5,获取整体状态:6,心跳查询:9
+     * @param followLoop 是否使用自身循环
      * @return 0, 正常, 1, 无法使用
      * @throws SkyLotException
      */
-    int confirmStatus(int bType) throws SkyLotException;
+    int confirmStatus(int bType, boolean... followLoop) throws SkyLotException;
 
     /**
      * 获取当前PLC设备的全部状态
@@ -23,7 +25,7 @@
      * @return operationStatus:{0,空闲;1:运作中;2:异常故障},businessStatus:{0,停车中;1:取车中;2:荷载中}
      * @throws SkyLotException
      */
-    Map getAllStatus() throws SkyLotException;
+    Map getAllStatus(boolean... getDirection) throws SkyLotException;
 
     /**
      * 获取当前停车状态
@@ -36,14 +38,87 @@
      * 进行停车
      *
      * @return iStatus:0, 停车成功, 1, 停车失败;iParkingLocation:停车位置;iDirection:待旋转到最下方车位;BaseNumber:操作之前最下方车位编号;iParkingStatus:当前停车状态
-     *
      */
-    Map doParking(String carNumber) throws SkyLotException;
+    Map doParking(String carNumber, boolean firstPark) throws SkyLotException;
 
     /**
      * 进行取车
      *
      * @return iStatus:0, 停车成功, 1, 停车失败;iDirection:待旋转到最下方车位;BaseNumber:操作之前最下方车位编号;iParkingStatus:当前停车状态
      */
-    Map doPulling(String positionNumber) throws SkyLotException;
+    Map doPulling(String positionNumber, boolean firstPull) throws SkyLotException;
+
+
+    /**
+     * 获取1005号位置的,错误信息,依据此判断是否可以进行存车完成状态
+     *
+     * @return
+     * @throws SkyLotException
+     */
+    Map getIndexError() throws SkyLotException;
+
+    /**
+     * * 获取1007号位置的,错误信息,依据此判断是否可以进行存车完成状态
+     *
+     * @return
+     * @throws SkyLotException
+     */
+    Map pullIndexError() throws SkyLotException;
+
+
+    /**
+     * 车库门开关
+     *
+     * @param actionType 0,开门,1,关门
+     * @return
+     * @throws SkyLotException
+     */
+    int carDoor(String actionType) throws SkyLotException;
+
+    int peopleDoor(String actionType) throws SkyLotException;
+
+    /**
+     * 配重
+     *
+     * @param number
+     * @param parkingLogic
+     * @return
+     */
+    int doDirection(int number, ParkingLogic parkingLogic);
+
+    /**
+     * 获取严重故障
+     *
+     * @return
+     * @throws SkyLotException
+     */
+    int getHighErrorStatus() throws SkyLotException;
+
+    /**
+     * 写车牌
+     *
+     * @param carCode 车牌
+     * @return
+     * @throws SkyLotException
+     */
+    int writeCarcode(String carCode) throws SkyLotException;
+
+
+    /**
+     * 取消存取车,操作
+     *
+     * @param actionType 0,存车;1:取车
+     * @return 0, 操作成功,-1操作失败,-2,操作超时
+     * @throws SkyLotException
+     */
+    int cancelAction(String actionType) throws SkyLotException;
+
+    /**
+     * 获取停车状态列表
+     *
+     * @param Type 0:获取数据来自停车数据库,1:获取数据来自PLC
+     * @return 0, 操作成功,-1操作失败,-2,操作超时
+     * @throws SkyLotException
+     */
+    Map getParkingStatus(int Type) throws SkyLotException;
 }
Index: src/main/java/com/fangda/skylot/mathine/utils/constant/Constant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/utils/constant/Constant.java	(revision 6842)
+++ src/main/java/com/fangda/skylot/mathine/utils/constant/Constant.java	(date 1517194915000)
@@ -333,6 +333,10 @@
      */
     public static final String PLC_COMMUNACAITON_HEAD_ERROR_NORMAL_STATUS = "46494E530000001A000000020000000080000200010000";
     /**
+     * PLC通信,头信息_故障状态
+     */
+    public static final String PLC_COMMUNACAITON_HEAD_ALL_INDEX_STATUS = "46494E530000001A000000020000000080000200010000";
+    /**
      * PLC通信,模式改变
      */
     public static final String PLC_COMMUNACAITON_HEAD_MODEL_CHANGE = "46494E530000001C000000020000000080000200010000";
@@ -341,6 +345,10 @@
      */
     public static final String PLC_COMMUNACAITON_HEAD_CAR_DOOR = "46494E530000001C000000020000000080000200010000";
     /**
+     * PLC通信,取消指令
+     */
+    public static final String PLC_COMMUNACAITON_HEAD_CANCEL_ACTION = "46494E530000001C000000020000000080000200010000";
+    /**
      * PLC通信,人行门
      */
     public static final String PLC_COMMUNACAITON_HEAD_PEOPLE_DOOR = "46494E530000001C000000020000000080000200010000";
Index: src/main/java/com/fangda/skylot/mathine/utils/socket/BaseCommander.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/utils/socket/BaseCommander.java	(revision 6842)
+++ src/main/java/com/fangda/skylot/mathine/utils/socket/BaseCommander.java	(date 1517555907000)
@@ -66,7 +66,7 @@
             stringBuilder = new StringBuilder();
             stringBuilderto = new StringBuilder();
             stringBuilder.append(HeadCommand.toUpperCase());//通信头
-            stringBuilder.append(Integer.toHexString(NumberUtils.toInt(StringUtils.substringAfterLast(GetProperties.getProperties("system.properties", "skylot.machine.ip"), "."))).toUpperCase());// TODO: 01/07/2017 195环境ip写死
+            stringBuilder.append(StringUtils.leftPad(Integer.toHexString(NumberUtils.toInt(StringUtils.substringAfterLast(GetProperties.getProperties("system.properties", "skylot.machine.ip"), "."))).toUpperCase(), 2, "0"));// TODO: 01/07/2017 195环境ip写死
 //            stringBuilder.append(Integer.toHexString(NumberUtils.toInt(StringUtils.substringAfterLast(SkylotUtils.resolveLocalIps().iterator().next().toString(), "."))).toUpperCase());//本地IP
             stringBuilder.append(append_Command.toUpperCase());//附加命令
             for (int i = 0; i <= stringBuilder.toString().length(); i++) {
Index: src/main/java/com/fangda/skylot/mathine/utils/socket/WSThreadMgt.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/utils/socket/WSThreadMgt.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/utils/socket/WSThreadMgt.java	(date 1517651178000)
@@ -1,6 +1,9 @@
 package com.fangda.skylot.mathine.utils.socket;
 
+import com.fangda.skylot.mathine.utils.GetProperties;
+import com.fangda.skylot.mathine.utils.exception.SkyLotException;
 import lombok.extern.slf4j.Slf4j;
+import org.apache.commons.lang3.math.NumberUtils;
 import org.springframework.stereotype.Component;
 
 import java.util.Map;
@@ -20,17 +23,29 @@
     private BlockingQueue<Map> connection = new ArrayBlockingQueue(1);
 
     /**
-     * 将执行命令放入连接池
+     * 将执行命令放入连接池,阻塞
      *
      * @param map
      */
     public void putCommander(Map map) throws Exception {
         try {
-            connection.put(map);
+            connection.offer(map, NumberUtils.toLong(GetProperties.getProperties("system.properties", "skylot.plc.thread.timeout")), TimeUnit.SECONDS);
+        } catch (Exception e) {
+            throw new SkyLotException(e);
+        }
+    }
+
+    /**
+     * 检查队列中是否有执行命令
+     *
+     * @return 0>no,1>yes
+     */
+    public int checkCommander() {
+        try {
+            return connection.size();
         } catch (Exception e) {
-            throw e;
+            return 0;
         }
-        log.warn("当前命令已经成功放入线程池,等待执行完毕");
     }
 
     /**
@@ -38,17 +53,15 @@
      *
      * @return 命令名称
      */
-    public Map getCommands() {
+    public Map getCommands() throws SkyLotException {
         Map map = null;
         try {
-            map = connection.poll(1, TimeUnit.SECONDS);//从线程池中拿出一个命令
-        } catch (InterruptedException e) {
-            e.printStackTrace();
+            map = connection.poll(NumberUtils.toInt(GetProperties.getProperties("system.properties", "skylot.plc.thread.timeout")), TimeUnit.SECONDS);//从线程池中拿出一个命令
+        } catch (Exception e) {
+            throw new SkyLotException(e);
         }
         if (map != null) {
-            log.warn("最后一条命令已经成功取出");
         } else {
-            log.warn("命令池没有存放的命令");
         }
         return map;
     }
Index: src/main/java/com/fangda/skylot/mathine/utils/socket/WSThreadMgtSend.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/utils/socket/WSThreadMgtSend.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/utils/socket/WSThreadMgtSend.java	(date 1516098038000)
@@ -30,7 +30,6 @@
         } catch (Exception e) {
             throw e;
         }
-        log.warn("当前命令已经成功放入线程池,等待执行完毕");
     }
 
     /**
@@ -46,9 +45,7 @@
             e.printStackTrace();
         }
         if (map != null) {
-            log.warn("最后一条命令已经成功取出");
         } else {
-            log.warn("命令池没有存放的命令");
         }
         return map;
     }
Index: src/main/java/com/fangda/skylot/mathine/utils/HttpClientUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/utils/HttpClientUtil.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/utils/HttpClientUtil.java	(date 1517303238000)
@@ -1,5 +1,11 @@
 package com.fangda.skylot.mathine.utils;
 
+import com.fangda.skylot.mathine.model.utils.InterfaceReturn;
+import com.fangda.skylot.mathine.utils.exception.SkyLotException;
+import com.google.common.collect.Lists;
+import org.apache.commons.beanutils.BeanUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.http.HttpEntity;
 import org.apache.http.NameValuePair;
 import org.apache.http.client.config.RequestConfig;
 import org.apache.http.client.entity.UrlEncodedFormEntity;
@@ -8,8 +14,11 @@
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.http.impl.client.HttpClients;
 import org.apache.http.message.BasicNameValuePair;
+import org.apache.http.protocol.HTTP;
+import org.apache.http.util.EntityUtils;
 
 import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
@@ -40,21 +49,43 @@
      * @param httpUrl 地址
      * @param maps    参数
      */
-    public String sendHttpPost(String httpUrl, Map maps) throws IOException {
+    public String sendHttpPost(String httpUrl, Map maps) throws IOException, SkyLotException, InvocationTargetException, IllegalAccessException {
         CloseableHttpClient client = HttpClients.createDefault();
         HttpPost httpPost = new HttpPost(httpUrl);
         httpPost.setConfig(requestConfig);
         List<NameValuePair> params = new ArrayList<NameValuePair>();
-        Iterator it = maps.entrySet().iterator();
-        while (it.hasNext()) {
-            Map.Entry pair = (Map.Entry) it.next();
-            params.add(new BasicNameValuePair(String.valueOf(pair.getKey()), String.valueOf(pair.getValue())));
-            it.remove(); // avoids a ConcurrentModificationException
+        if (StringUtils.equals(httpUrl, GetProperties.getProperties("system.properties", "skylot.webservice.parking"))) {
+            List datalist = Lists.newArrayList();
+            datalist.add(maps);
+            params.add(new BasicNameValuePair("parkingLog", SingletonObjectMapper.getInstance().writeValueAsString(datalist)));
+        } else {
+            Iterator it = maps.entrySet().iterator();
+            while (it.hasNext()) {
+                Map.Entry pair = (Map.Entry) it.next();
+                params.add(new BasicNameValuePair(String.valueOf(pair.getKey()), String.valueOf(pair.getValue())));
+                it.remove(); // avoids a ConcurrentModificationException
+            }
         }
-        httpPost.setEntity(new UrlEncodedFormEntity(params));
-        CloseableHttpResponse response = client.execute(httpPost);
-        client.close();
-        return null;
+        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(params, HTTP.UTF_8);
+        httpPost.setEntity(entity);
+//        httpPost.setHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
+        try {
+            CloseableHttpResponse response = client.execute(httpPost);
+            if (response.getStatusLine().getStatusCode() == 200) {
+                HttpEntity httpEntity = response.getEntity();
+                String resu = EntityUtils.toString(httpEntity);//取出应答字符串
+                InterfaceReturn interfaceReturn = InterfaceReturn.builder().build();
+                BeanUtils.populate(interfaceReturn, SkylotUtils.jsonToMap(resu));
+                client.close();
+                return interfaceReturn.isResultType() ? "0" : "2";
+            } else {
+                return "1";
+            }
+        } catch (Exception e) {
+            throw new SkyLotException(e);
+        } finally {
+            client.close();
+        }
     }
 
 
Index: src/main/java/com/fangda/skylot/mathine/utils/SkylotUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/utils/SkylotUtils.java	(revision 6842)
+++ src/main/java/com/fangda/skylot/mathine/utils/SkylotUtils.java	(date 1517045042000)
@@ -20,6 +20,7 @@
 import javax.crypto.spec.SecretKeySpec;
 import java.beans.PropertyDescriptor;
 import java.io.ByteArrayOutputStream;
+import java.io.IOException;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.net.InetAddress;
@@ -235,6 +236,14 @@
             }
             return result;
         } catch (Exception e) {
+            if (!StringUtils.isBlank(json)) {
+                try {
+                    List datalist = SingletonObjectMapper.getInstance().readValue(json, List.class);
+                    return (Map<String, String>) datalist.get(0);
+                } catch (IOException e1) {
+                    e1.printStackTrace();
+                }
+            }
             throw new SkyLotException("PMSUtil-Exception-jsonToMap", e.getCause());
         }
     }
@@ -643,13 +652,14 @@
      *
      * @param map
      */
-    public static void removeNullValue(Map map) {
+    public static Map removeNullValue(Map map) {
         Set set = map.keySet();
         for (Iterator iterator = set.iterator(); iterator.hasNext(); ) {
             Object obj = (Object) iterator.next();
             Object value = (Object) map.get(obj);
             remove(value, iterator);
         }
+        return map;
     }
 
     /**
@@ -709,7 +719,15 @@
      */
     public static Map verifyCode(String Qcode) {
         Map map = Maps.newHashMap();
-        String decodeStr = BaseCommandUtils.decode(Qcode);
+        String decodeStr = null;
+        try {
+            decodeStr = BaseCommandUtils.decode(Qcode);
+            if (!StringUtils.contains(decodeStr, ":00")) {
+                decodeStr = Qcode;
+            }
+        } catch (Exception e) {
+            decodeStr = Qcode;
+        }
         String[] strings = StringUtils.split(decodeStr, "|");
         if (strings.length != 7) {
             return null;
Index: src/main/java/com/fangda/skylot/mathine/web/console/GetCarController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/web/console/GetCarController.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/web/console/GetCarController.java	(date 1517466545000)
@@ -5,10 +5,10 @@
 import com.fangda.skylot.mathine.model.utils.JsonDataResult;
 import com.fangda.skylot.mathine.model.utils.JsonResult;
 import com.fangda.skylot.mathine.service.IBaseService;
-import com.fangda.skylot.mathine.service.parking.ParkingLogService;
-import com.fangda.skylot.mathine.service.sync.SyncService;
+import com.fangda.skylot.mathine.service.SocketService;
 import com.fangda.skylot.mathine.utils.SkylotUtils;
 import com.fangda.skylot.mathine.utils.exception.SkyLotException;
+import com.fangda.skylot.mathine.web.BaseController;
 import com.google.common.collect.Maps;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.StringUtils;
@@ -19,21 +19,21 @@
 
 import java.util.Map;
 
-import static com.fangda.skylot.mathine.utils.constant.Constant.BUSINESS_ACTION_TYPE_PULL;
+import static com.fangda.skylot.mathine.utils.constant.Constant.FN_RETURN_STATUS_SUCCESS;
 import static com.fangda.skylot.mathine.utils.constant.Constant.STR_EXCEPTION_BUSINESS_CODE;
 
 @RestController
-@RequestMapping(value = "/getCar")
+@RequestMapping(value = "/door")
 @Slf4j
-public class GetCarController {
+public class GetCarController extends BaseController {
     @Autowired
     private Map<String, IBaseService> serviceMap;
     @Autowired
-    private SyncService syncServiceImpl;
+    private SocketService socketService;
     @Autowired
     private ErrorCode code;
 
-    @RequestMapping(value = "/now", method = RequestMethod.POST,
+    @RequestMapping(value = "/open", method = RequestMethod.POST,
             produces = "application/json")
     public Map getJSON(ConsoleParamater consoleParamater) throws Exception {
         Map resultMap = Maps.newHashMap();
@@ -43,27 +43,20 @@
         exceptionBuilder.append(STR_EXCEPTION_BUSINESS_CODE);
         try {
             Map subMap = Maps.newHashMap();
-            if (StringUtils.isNotEmpty(consoleParamater.getCarCode())) {
-                Map dataMap = syncServiceImpl.pullCar(consoleParamater.getCarCode());
-                StringBuilder message = ((ParkingLogService) serviceMap.get("parkinglogService")).layoutMessage(dataMap, BUSINESS_ACTION_TYPE_PULL);
-                if (StringUtils.contains(message, "成功")) {
-                    result.setResultType(true);
-                    jsonDataResult.setResult("0");
-                } else {
-                    exceptionBuilder.append("request.confirm.getcar.fail");
-                    throw new SkyLotException(exceptionBuilder.toString());
-                }
+            if (StringUtils.equals(socketService.peopleDoor(FN_RETURN_STATUS_SUCCESS) + "", FN_RETURN_STATUS_SUCCESS)) {
+                result.setResultType(true);
+                jsonDataResult.setResult("0");
+            } else {
+                result.setResultType(false);
+                exceptionBuilder.append("request.confirm.getcar.fail");
+                throw new SkyLotException(exceptionBuilder.toString());
             }
             subMap = SkylotUtils.beanToHashMap(jsonDataResult);
             SkylotUtils.removeNullValue(subMap);
             result.setData(subMap);
             resultMap = SkylotUtils.beanToHashMap(result);
         } catch (Exception e) {
-            if (StringUtils.contains(e.getMessage(), STR_EXCEPTION_BUSINESS_CODE)) {
-                code.doErrorLogic(result, resultMap, StringUtils.substringAfterLast(e.getMessage(), STR_EXCEPTION_BUSINESS_CODE));
-            } else {
-                throw new SkyLotException(e);
-            }
+            doException(code, result, jsonDataResult, resultMap, e);
         }
         return resultMap;
     }
Index: src/main/java/com/fangda/skylot/mathine/web/console/ParkCarController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/web/console/ParkCarController.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/web/console/ParkCarController.java	(date 1517649588000)
@@ -1,12 +1,12 @@
 package com.fangda.skylot.mathine.web.console;
 
+import com.fangda.skylot.mathine.model.parking.TstbFtpCarInformation;
 import com.fangda.skylot.mathine.model.utils.ConsoleParamater;
 import com.fangda.skylot.mathine.model.utils.ErrorCode;
 import com.fangda.skylot.mathine.model.utils.JsonDataResult;
 import com.fangda.skylot.mathine.model.utils.JsonResult;
-import com.fangda.skylot.mathine.service.IBaseService;
-import com.fangda.skylot.mathine.service.parking.ParkingLogService;
-import com.fangda.skylot.mathine.service.sync.SyncService;
+import com.fangda.skylot.mathine.scheduler.springtask.MainThreadMgt;
+import com.fangda.skylot.mathine.service.impl.BaseCommandUtils;
 import com.fangda.skylot.mathine.utils.SkylotUtils;
 import com.fangda.skylot.mathine.utils.exception.SkyLotException;
 import com.google.common.collect.Maps;
@@ -19,17 +19,14 @@
 
 import java.util.Map;
 
-import static com.fangda.skylot.mathine.utils.constant.Constant.BUSINESS_ACTION_TYPE_PULL;
 import static com.fangda.skylot.mathine.utils.constant.Constant.STR_EXCEPTION_BUSINESS_CODE;
 
 @RestController
 @RequestMapping(value = "/parkCar")
 @Slf4j
-public class ParkCarController {
-    @Autowired
-    private Map<String, IBaseService> serviceMap;
+public class ParkCarController extends ControllerUntil {
     @Autowired
-    private SyncService syncServiceImpl;
+    private MainThreadMgt mainThreadMgt;
     @Autowired
     private ErrorCode code;
 
@@ -44,14 +41,17 @@
         try {
             Map subMap = Maps.newHashMap();
             if (StringUtils.isNotEmpty(consoleParamater.getCarCode())) {
-                Map dataMap = syncServiceImpl.parkCar(consoleParamater.getCarCode());
-                StringBuilder message = ((ParkingLogService) serviceMap.get("parkinglogService")).layoutMessage(dataMap, BUSINESS_ACTION_TYPE_PULL);
-                if (StringUtils.contains(message, "成功")) {
-                    result.setResultType(true);
-                    jsonDataResult.setResult("0");
-                } else {
-                    exceptionBuilder.append("request.user.parking.fail");
-                    throw new SkyLotException(exceptionBuilder.toString());
+                if (mainThreadMgt.hasTasktodo()) {
+                    TstbFtpCarInformation tstbFtpCarInformation = mainThreadMgt.getTstbFtpCarInformation();
+                    tstbFtpCarInformation.setTfcCarInCode(BaseCommandUtils.decode(consoleParamater.getCarCode()));
+                    if (mainThreadMgt.userconfirmCar(tstbFtpCarInformation)) {
+                        result.setResultType(true);
+                        jsonDataResult.setResult("0");
+                    } else {
+                        exceptionBuilder.append("request.user.parking.fail");
+                        result.setResultType(false);
+                        throw new SkyLotException(exceptionBuilder.toString());
+                    }
                 }
             }
             subMap = SkylotUtils.beanToHashMap(jsonDataResult);
@@ -62,7 +62,10 @@
             if (StringUtils.contains(e.getMessage(), STR_EXCEPTION_BUSINESS_CODE)) {
                 code.doErrorLogic(result, resultMap, StringUtils.substringAfterLast(e.getMessage(), STR_EXCEPTION_BUSINESS_CODE));
             } else {
-                throw new SkyLotException(e);
+                result.setResultType(false);
+                result.setData(Maps.newHashMap());
+                resultMap = SkylotUtils.beanToHashMap(result);
+//                throw new SkyLotException(e);
             }
         }
         return resultMap;
Index: src/main/java/com/fangda/skylot/mathine/web/console/PasswordController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/web/console/PasswordController.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/web/console/PasswordController.java	(date 1517651178000)
@@ -1,17 +1,24 @@
 package com.fangda.skylot.mathine.web.console;
 
+import com.fangda.skylot.mathine.model.parking.TstbFtpCarInformation;
+import com.fangda.skylot.mathine.model.parking.TstbFtpCarInformationCriteria;
 import com.fangda.skylot.mathine.model.utils.ConsoleParamater;
 import com.fangda.skylot.mathine.model.utils.ErrorCode;
 import com.fangda.skylot.mathine.model.utils.JsonDataResult;
 import com.fangda.skylot.mathine.model.utils.JsonResult;
+import com.fangda.skylot.mathine.scheduler.springtask.MainThreadUtil;
 import com.fangda.skylot.mathine.service.IBaseService;
+import com.fangda.skylot.mathine.service.SocketService;
 import com.fangda.skylot.mathine.service.customer.CodeInfoService;
+import com.fangda.skylot.mathine.utils.GetProperties;
 import com.fangda.skylot.mathine.utils.SkylotUtils;
 import com.fangda.skylot.mathine.utils.exception.SkyLotException;
+import com.fangda.skylot.mathine.web.BaseController;
 import com.google.common.collect.Maps;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.collections.MapUtils;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.math.NumberUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
@@ -19,18 +26,20 @@
 
 import java.util.Map;
 
-import static com.fangda.skylot.mathine.utils.constant.Constant.MAP_QRCODE_CARCODE;
-import static com.fangda.skylot.mathine.utils.constant.Constant.STR_EXCEPTION_BUSINESS_CODE;
+import static com.fangda.skylot.mathine.utils.constant.Constant.*;
 
 @RestController
 @RequestMapping(value = "/password")
 @Slf4j
-public class PasswordController {
+public class PasswordController extends BaseController {
     @Autowired
     private Map<String, IBaseService> serviceMap;
     @Autowired
     private ErrorCode code;
-
+    @Autowired
+    private SocketService socketService;
+    @Autowired
+    private MainThreadUtil mainThreadUtil;
 
     /**
      * 密码取车
@@ -45,6 +54,8 @@
         Map resultMap = Maps.newHashMap();
         JsonResult result = new JsonResult();
         JsonDataResult jsonDataResult = new JsonDataResult();
+        StringBuilder exceptionBuilder = new StringBuilder();
+        exceptionBuilder.append(STR_EXCEPTION_BUSINESS_CODE);
         try {
             result.setResultType(true);
             Map subMap = Maps.newHashMap();
@@ -53,7 +64,22 @@
                 consoleParamater.setScanCode(consoleParamater.getPassword());
             }
             if (StringUtils.isNotEmpty(consoleParamater.getScanCode())) {
-                jsonDataResult.setResult(((CodeInfoService) serviceMap.get("codeInfoService")).verifyCode(consoleParamater.getScanCode()) + "");
+                Map subMapData = ((CodeInfoService) serviceMap.get("codeInfoService")).verifyCode(consoleParamater.getScanCode(), false);
+                jsonDataResult.setResult(MapUtils.getString(subMapData, MAP_PARKING_STATUS));
+                if (StringUtils.equals(jsonDataResult.getResult(), FN_RETURN_STATUS_SUCCESS)) {//验证成功,可以取车
+                    TstbFtpCarInformationCriteria carInformationCriteria = new TstbFtpCarInformationCriteria();
+                    TstbFtpCarInformation tstbFtpCarInformation = TstbFtpCarInformation.builder().build();
+                    tstbFtpCarInformation.setTfcCarCode(MapUtils.getString(subMapData, SCHEDULEACTION_BUSINESSOBJ_CUSTOMER));
+                    tstbFtpCarInformation.setTfcCreatetime(SkylotUtils.getStrDate());
+                    tstbFtpCarInformation.setTfcStatus(NumberUtils.toInt(PARKING_PULLING_STATUS_PROGRESS));//进入取车流程
+                    tstbFtpCarInformation.setTfcCarAction(PARKING_PULLING_STATUS_PROGRESS);
+                    tstbFtpCarInformation.setTfcCreateuser("auto");
+                    tstbFtpCarInformation.setImaId(GetProperties.getProperties("system.properties", "skylot.machine.id"));
+                    serviceMap.get("ftpcarService").add(tstbFtpCarInformation);//存储识别到的车牌号
+                } else {
+                    exceptionBuilder.append("request.confirm.getcar.fail");
+                    throw new SkyLotException(exceptionBuilder.toString());
+                }
                 jsonDataResult.setCarCode(MapUtils.getString(SkylotUtils.verifyCode(consoleParamater.getScanCode()), MAP_QRCODE_CARCODE));
             }
             subMap = SkylotUtils.beanToHashMap(jsonDataResult);
@@ -61,11 +87,7 @@
             result.setData(subMap);
             resultMap = SkylotUtils.beanToHashMap(result);
         } catch (Exception e) {
-            if (StringUtils.contains(e.getMessage(), STR_EXCEPTION_BUSINESS_CODE)) {
-                code.doErrorLogic(result, resultMap, StringUtils.substringAfterLast(e.getMessage(), STR_EXCEPTION_BUSINESS_CODE));
-            } else {
-                throw new SkyLotException(e);
-            }
+            doException(code, result, jsonDataResult, resultMap, e);
         }
         return resultMap;
     }
@@ -83,7 +105,21 @@
         Map resultMap = Maps.newHashMap();
         JsonResult result = new JsonResult();
         JsonDataResult jsonDataResult = new JsonDataResult();
+        StringBuilder exceptionBuilder = new StringBuilder();
+        exceptionBuilder.append(STR_EXCEPTION_BUSINESS_CODE);
         try {
+            Map subMap = Maps.newHashMap();
+            if (StringUtils.isNotEmpty(consoleParamater.getPassword()) &&
+                    StringUtils.isEmpty(consoleParamater.getScanCode())) {
+                consoleParamater.setScanCode(consoleParamater.getPassword());
+            }
+            if (StringUtils.isNotEmpty(consoleParamater.getScanCode())) {
+                Map subMapData = ((CodeInfoService) serviceMap.get("codeInfoService")).verifyCode(consoleParamater.getScanCode(), false);
+                jsonDataResult.setResult(MapUtils.getString(subMapData, MAP_PARKING_STATUS));
+                cancelCar(jsonDataResult, socketService, mainThreadUtil, result, exceptionBuilder);
+                jsonDataResult.setCarCode(MapUtils.getString(SkylotUtils.verifyCode(consoleParamater.getScanCode()), MAP_QRCODE_CARCODE));
+            }
+
         } catch (Exception e) {
         }
         return resultMap;
Index: src/main/java/com/fangda/skylot/mathine/web/console/QRCodeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/web/console/QRCodeController.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/web/console/QRCodeController.java	(date 1517469911000)
@@ -1,17 +1,23 @@
 package com.fangda.skylot.mathine.web.console;
 
+import com.fangda.skylot.mathine.model.parking.TstbFtpCarInformation;
+import com.fangda.skylot.mathine.model.parking.TstbFtpCarInformationCriteria;
 import com.fangda.skylot.mathine.model.utils.ConsoleParamater;
 import com.fangda.skylot.mathine.model.utils.ErrorCode;
 import com.fangda.skylot.mathine.model.utils.JsonDataResult;
 import com.fangda.skylot.mathine.model.utils.JsonResult;
+import com.fangda.skylot.mathine.scheduler.springtask.MainThreadUtil;
 import com.fangda.skylot.mathine.service.IBaseService;
+import com.fangda.skylot.mathine.service.SocketService;
 import com.fangda.skylot.mathine.service.customer.CodeInfoService;
+import com.fangda.skylot.mathine.utils.GetProperties;
 import com.fangda.skylot.mathine.utils.SkylotUtils;
-import com.fangda.skylot.mathine.utils.exception.SkyLotException;
+import com.fangda.skylot.mathine.web.BaseController;
 import com.google.common.collect.Maps;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.collections.MapUtils;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.math.NumberUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
@@ -19,17 +25,20 @@
 
 import java.util.Map;
 
-import static com.fangda.skylot.mathine.utils.constant.Constant.MAP_QRCODE_CARCODE;
-import static com.fangda.skylot.mathine.utils.constant.Constant.STR_EXCEPTION_BUSINESS_CODE;
+import static com.fangda.skylot.mathine.utils.constant.Constant.*;
 
 @RestController
 @RequestMapping(value = "/qrcode")
 @Slf4j
-public class QRCodeController {
+public class QRCodeController extends BaseController {
     @Autowired
     private Map<String, IBaseService> serviceMap;
     @Autowired
     private ErrorCode code;
+    @Autowired
+    private SocketService socketService;
+    @Autowired
+    private MainThreadUtil mainThreadUtil;
 
     @RequestMapping(value = "/getCar", method = RequestMethod.POST,
             produces = "application/json")
@@ -39,20 +48,30 @@
         JsonDataResult jsonDataResult = new JsonDataResult();
         try {
             Map subMap = Maps.newHashMap();
-            if (StringUtils.isNotEmpty(consoleParamater.getPassword())) {
-                jsonDataResult.setResult(((CodeInfoService) serviceMap.get("codeInfoService")).verifyCode(consoleParamater.getScanCode()) + "");
+            result.setResultType(false);
+            if (StringUtils.isNotEmpty(consoleParamater.getScanCode())) {
+                Map subMapData = ((CodeInfoService) serviceMap.get("codeInfoService")).verifyCode(consoleParamater.getScanCode(), false);
+                jsonDataResult.setResult(MapUtils.getString(subMapData, MAP_PARKING_STATUS));
                 jsonDataResult.setCarCode(MapUtils.getString(SkylotUtils.verifyCode(consoleParamater.getScanCode()), MAP_QRCODE_CARCODE));
+                if (StringUtils.equals(jsonDataResult.getResult(), FN_RETURN_STATUS_SUCCESS)) {//验证成功,可以取车
+                    TstbFtpCarInformationCriteria carInformationCriteria = new TstbFtpCarInformationCriteria();
+                    TstbFtpCarInformation tstbFtpCarInformation = TstbFtpCarInformation.builder().build();
+                    tstbFtpCarInformation.setTfcCarCode(MapUtils.getString(subMapData, SCHEDULEACTION_BUSINESSOBJ_CUSTOMER));
+                    tstbFtpCarInformation.setTfcCreatetime(SkylotUtils.getStrDate());
+                    tstbFtpCarInformation.setTfcStatus(NumberUtils.toInt(PARKING_PULLING_STATUS_PROGRESS));//进入取车流程
+                    tstbFtpCarInformation.setTfcCarAction(PARKING_PULLING_STATUS_PROGRESS);
+                    tstbFtpCarInformation.setTfcCreateuser("auto");
+                    tstbFtpCarInformation.setImaId(GetProperties.getProperties("system.properties", "skylot.machine.id"));
+                    serviceMap.get("ftpcarService").add(tstbFtpCarInformation);//存储识别到的车牌号
+                    result.setResultType(true);
+                }
             }
             subMap = SkylotUtils.beanToHashMap(jsonDataResult);
             SkylotUtils.removeNullValue(subMap);
             result.setData(subMap);
             resultMap = SkylotUtils.beanToHashMap(result);
         } catch (Exception e) {
-            if (StringUtils.contains(e.getMessage(), STR_EXCEPTION_BUSINESS_CODE)) {
-                code.doErrorLogic(result, resultMap, StringUtils.substringAfterLast(e.getMessage(), STR_EXCEPTION_BUSINESS_CODE));
-            } else {
-                throw new SkyLotException(e);
-            }
+            doException(code, result, jsonDataResult, resultMap, e);
         }
         return resultMap;
     }
@@ -60,8 +79,18 @@
     @RequestMapping(value = "/cancelCar", method = RequestMethod.POST,
             produces = "application/json")
     public Map getJSON2(ConsoleParamater consoleParamater) throws Exception {
+        Map resultMap = Maps.newHashMap();
+        JsonResult result = new JsonResult();
+        JsonDataResult jsonDataResult = new JsonDataResult();
+        StringBuilder exceptionBuilder = new StringBuilder();
+        exceptionBuilder.append(STR_EXCEPTION_BUSINESS_CODE);
         try {
-            // TODO: 27/12/2017 取消取车
+            if (StringUtils.isNotEmpty(consoleParamater.getScanCode())) {
+                Map subMapData = ((CodeInfoService) serviceMap.get("codeInfoService")).verifyCode(consoleParamater.getScanCode(), true);
+                jsonDataResult.setResult(MapUtils.getString(subMapData, MAP_PARKING_STATUS));
+                jsonDataResult.setCarCode(MapUtils.getString(SkylotUtils.verifyCode(consoleParamater.getScanCode()), MAP_QRCODE_CARCODE));
+                cancelCar(jsonDataResult, socketService, mainThreadUtil, result, exceptionBuilder);
+            }
         } catch (Exception e) {
         }
         return null;
Index: src/main/java/com/fangda/skylot/mathine/web/console/StatusController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/web/console/StatusController.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/web/console/StatusController.java	(date 1517651178000)
@@ -1,63 +1,38 @@
 package com.fangda.skylot.mathine.web.console;
 
-import com.fangda.skylot.mathine.model.utils.*;
+import com.fangda.skylot.mathine.model.parking.IftbMachineAction;
+import com.fangda.skylot.mathine.model.parking.IftbMachineActionCriteria;
+import com.fangda.skylot.mathine.model.utils.ConsoleParamater;
 import com.fangda.skylot.mathine.service.IBaseService;
-import com.fangda.skylot.mathine.service.utils.ScheduleService;
-import com.fangda.skylot.mathine.utils.SingletonObjectMapper;
 import com.fangda.skylot.mathine.utils.SkylotUtils;
 import com.fangda.skylot.mathine.utils.exception.SkyLotException;
 import com.google.common.collect.Maps;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.collections.MapUtils;
-import org.apache.commons.lang3.StringUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
 
-import java.util.HashMap;
 import java.util.Map;
 
-import static com.fangda.skylot.mathine.utils.constant.Constant.SCHEDULEACTION_TYPE_HEARTBEAT_PLC;
-
 @RestController
 @RequestMapping(value = "/console")
 @Slf4j
 public class StatusController {
     @Autowired
     private Map<String, IBaseService> serviceMap;
-    @Autowired
-    private ErrorCode code;
 
     @RequestMapping(value = "/status", method = RequestMethod.POST,
             produces = "application/json")
     public Map getJSON(ConsoleParamater consoleParamater) throws Exception {
         Map resultMap = Maps.newHashMap();
-        JsonResult result = new JsonResult();
-        JsonDataResult jsonDataResult = new JsonDataResult();
         try {
-            Map subMap = Maps.newHashMap();
-            result.setResultType(true);
-            ScheduleService scheduleService = (ScheduleService) serviceMap.get("scheduleService");
-            IftbScheduleActionCriteria iftbScheduleActionCriteria = new IftbScheduleActionCriteria();
-            iftbScheduleActionCriteria.createCriteria().andIsaScheduleTypeEqualTo(SCHEDULEACTION_TYPE_HEARTBEAT_PLC);
-            IftbScheduleAction scheduleAction = scheduleService.query(iftbScheduleActionCriteria);
-            String message = scheduleAction.getIsaScheduleMessage();
-            Map messageMap = SingletonObjectMapper.getInstance().readValue(message, Map.class);
-            Map machineStatusMap = new HashMap();
-            machineStatusMap = SingletonObjectMapper.getInstance().readValue(MapUtils.getString(messageMap, "isaScheduleMessage"), Map.class);
-            jsonDataResult.setMachineStatus(MapUtils.getString(machineStatusMap, "businessStatus"));
-            jsonDataResult.setOperatingType(MapUtils.getString(machineStatusMap, "operationStatus"));
-            subMap = SkylotUtils.beanToHashMap(jsonDataResult);
-            SkylotUtils.removeNullValue(subMap);
-            result.setData(subMap);
-            resultMap = SkylotUtils.beanToHashMap(result);
+            IftbMachineActionCriteria criteria = new IftbMachineActionCriteria();
+            criteria.createCriteria().andImaIdEqualTo(SkylotUtils.imaId);
+            IftbMachineAction iftbMachineAction = (IftbMachineAction) serviceMap.get("machineActionService").queryForAll(criteria).get(0);
+            resultMap = SkylotUtils.jsonToMap(iftbMachineAction.getImaErrorJson());
         } catch (Exception e) {
-            if (StringUtils.contains(e.getMessage(), "business_code")) {
-                code.doErrorLogic(result, resultMap, StringUtils.substringAfterLast(e.getMessage(), "business_code"));
-            } else {
-                throw new SkyLotException(e);
-            }
+            throw new SkyLotException(e);
         }
         return resultMap;
     }
Index: src/main/java/com/fangda/skylot/mathine/web/IndexController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/fangda/skylot/mathine/web/IndexController.java	(revision 6809)
+++ src/main/java/com/fangda/skylot/mathine/web/IndexController.java	(date 1516245466000)
@@ -13,6 +13,7 @@
 import com.fangda.skylot.mathine.service.parking.ParkingLogService;
 import com.fangda.skylot.mathine.utils.SingletonObjectMapper;
 import com.fangda.skylot.mathine.utils.exception.SkyLotException;
+import com.fangda.skylot.mathine.utils.socket.WSThreadMgt;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
@@ -36,6 +37,8 @@
 public class IndexController extends BaseController {
     @Autowired
     public Map<String, IBaseService> serviceMap;
+    @Autowired
+    private WSThreadMgt wsThreadMgt;
     /**
      * 监控摄像机发来的图片识别信息,HTTP方式
      *
@@ -60,7 +63,6 @@
             }
             Map map = SingletonObjectMapper.getInstance().readValue(jb.toString(), Map.class);
             ((ParkingLogService) serviceMap.get("parkinglogService")).parkingFromCallbak(map);
-
         } catch (Exception e) {
             throw new SkyLotException(e);
         }
Index: src/main/resources/db/migration/V3__test_data.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/db/migration/V3__test_data.sql	(revision 6809)
+++ src/main/resources/db/migration/V3__test_data.sql	(date 1516245468000)
@@ -205,6 +205,41 @@
 DELIMITER ;
 
 
+DROP TRIGGER IF EXISTS TR_after_save_tstb_ftp_car_carinformation;
+CREATE TRIGGER TR_after_save_tstb_ftp_car_carinformation
+  AFTER INSERT
+  ON tstb_ftp_car_information
+  FOR EACH ROW
+  BEGIN
+
+    CALL sp_tstb_ftp_car_information(
+
+    );
+  END;
+;
+;
+DELIMITER ;
+
+
+DROP PROCEDURE IF EXISTS sp_tstb_ftp_car_information;
+CREATE PROCEDURE sp_tstb_ftp_car_information()
+  BEGIN
+    -- 验证当前停车表是否拥有的记录数大于2条
+    DECLARE tmp_count INT;
+
+    SET tmp_count = (SELECT count(*)
+                     FROM tstb_ftp_car_information);
+    IF (tmp_count > 2)
+    THEN
+      SIGNAL SQLSTATE 'HY000'
+      SET MESSAGE_TEXT = 'allow_parking_count_over';
+    END IF;
+  END;
+
+;
+;
+DELIMITER ;
+
 DROP TABLE IF EXISTS iftb_schedule_action;
 DELIMITER ;;
 CREATE TABLE iftb_schedule_action
Index: src/main/resources/db/migration/V4__new_table.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/db/migration/V4__new_table.sql	(revision 6809)
+++ src/main/resources/db/migration/V4__new_table.sql	(date 1517651182000)
@@ -73,3 +73,127 @@
         NEW.tmpl_createdate
     );
   END;
+
+
+;
+;
+DELIMITER ;
+TRUNCATE TABLE iftb_item_customer;
+TRUNCATE TABLE iftb_machine_action;
+TRUNCATE TABLE iftb_schedule_action;
+TRUNCATE TABLE mstb_customer;
+TRUNCATE TABLE oftb_code_info;
+TRUNCATE TABLE oftb_customer_car;
+TRUNCATE TABLE oftb_mathine_item;
+TRUNCATE TABLE oftb_reserve_taking;
+TRUNCATE TABLE oftb_sync_log;
+TRUNCATE TABLE schema_version;
+TRUNCATE TABLE tstb_ftp_car_information;
+TRUNCATE TABLE tstb_log;
+TRUNCATE TABLE tstb_mathine_parking;
+TRUNCATE TABLE tstb_mathine_parking_log;
+
+
+;
+;
+DELIMITER ;
+ALTER TABLE tstb_ftp_car_information
+  ADD tfc_car_color VARCHAR(4) NULL
+COMMENT '车辆颜色';
+ALTER TABLE tstb_ftp_car_information
+  ADD tfc_car_type VARCHAR(1) NULL
+COMMENT '车辆类型
+0:小型
+1:中型
+2:大型';
+ALTER TABLE tstb_ftp_car_information
+  ADD tfc_car_in_code VARCHAR(20) NULL
+COMMENT '车台识别
+车辆牌照';
+ALTER TABLE tstb_ftp_car_information
+  ADD tfc_car_in_type VARCHAR(1) NULL
+COMMENT '车台识别
+车辆类型
+0:小型
+1:中型
+2:大型';
+ALTER TABLE tstb_ftp_car_information
+  ADD tfc_car_in_color VARCHAR(4) NULL
+COMMENT '车台识别
+车辆颜色';
+
+
+ALTER TABLE tstb_ftp_car_information
+  ADD tfc_car_action VARCHAR(1) NULL
+COMMENT '停取车判断
+0:停车
+1:取车';
+ALTER TABLE tstb_ftp_car_information
+  MODIFY COLUMN tfc_car_action VARCHAR(1) COMMENT '停取车判断
+0:停车
+1:取车'
+  AFTER tfc_car_color;
+ALTER TABLE tstb_ftp_car_information
+  MODIFY tfc_car_action VARCHAR(1) COMMENT '停取车判断
+0:停车
+1:取车
+2:预约取车';
+
+
+DELIMITER ;;
+CREATE PROCEDURE `sp_tstb_ftp_car_information`()
+  BEGIN
+    -- 验证当前停车表是否拥有的记录数大于2条
+    DECLARE tmp_count INT;
+
+    SET tmp_count = (SELECT count(*)
+                     FROM tstb_ftp_car_information);
+    IF (tmp_count > 2)
+    THEN
+      SIGNAL SQLSTATE 'HY000'
+      SET MESSAGE_TEXT = 'allow_parking_count_over';
+    END IF;
+  END ;;
+DELIMITER ;;;
+DELIMITER ;
+ALTER TABLE iftb_machine_action
+  ADD ima_error_json TEXT NULL
+COMMENT '错误信息JSON对象';
+
+ALTER TABLE tstb_ftp_car_information
+  ADD tfc_is_canceled VARCHAR(1) NULL
+COMMENT '取消指令';
+ALTER TABLE tstb_ftp_car_information
+  MODIFY tfc_is_canceled VARCHAR(1) COMMENT '取消指令
+0:取消';
+
+
+DROP TRIGGER IF EXISTS TR_after_save_tstb_mathine_parking_log;
+DELIMITER ;;
+CREATE TRIGGER TR_after_save_tstb_mathine_parking_log
+  AFTER INSERT
+  ON tstb_mathine_parking_log
+  FOR EACH ROW
+  BEGIN
+
+    CALL sp_tstb_mathine_parking_log(
+        NEW.ima_id,
+        NEW.tmpl_car,
+        NEW.tmpl_type,
+        NEW.tmpl_status,
+        NEW.tmpl_physical_code,
+        NEW.tmpl_createuser,
+        NEW.tmpl_createdate
+    );
+  END;
+;;
+DELIMITER ;
+
+
+ALTER TABLE iftb_machine_action
+  ADD ima_physical_status VARCHAR(1) NULL
+COMMENT '设备物理状态
+0:正常
+1:设备运转中
+2:设备严重故障
+3:设备一般故障';
\ No newline at end of file
Index: src/main/resources/errorcode/index.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/errorcode/index.xml	(revision 6809)
+++ src/main/resources/errorcode/index.xml	(date 1517651156000)
@@ -20,7 +20,7 @@
                 <entry key="request.scancode.cancel.timeout" value="请求超时"/>
                 <entry key="request.scancode.usercancel.fail" value="请求失败"/>
                 <entry key="system.scancode.usercancel.fail" value="二维码识别有误"/>
-                <entry key="request.password.usercancel.timeout" value="请求超时"/>
+                <entry key="request.password.usercancel.not.auth" value="验证失败"/>
                 <entry key="request.password.usercancel.fail" value="请求失败"/>
                 <entry key="request.admin.login.timeout" value="请求超时"/>
                 <entry key="request.admin.login.fail" value="请求失败"/>
@@ -30,7 +30,22 @@
                 <entry key="request.admin.cancel.getcar.timeout" value="请求超时"/>
                 <entry key="request.admin.cancel.getcar.fail" value="请求失败"/>
                 <entry key="request.user.parking.timeout" value="请求超时"/>
-                <entry key="request.user.parking.fail" value="请求失败"/>
+                <entry key="request.user.parking.1005" value="1005故障"/>
+                <entry key="request.user.parking.platform" value="停车位置不正确"/>
+                <entry key="request.user.parking.scanner" value="停车区域或者行人通道有异物!"/>
+                <entry key="request.user.parking.peopledoor" value="人行门未关闭!"/>
+                <entry key="request.user.parking.cardoor" value="车库门检测到异物,无法关闭!"/>
+                <entry key="request.user.parking.emtryCar" value="车台上没有车"/>
+                <entry key="request.user.parking.peopledoorwithoutOC" value="人行门没有开关一次"/>
+                <entry key="request.user.parking.inside.car.notauth" value="当前车辆非月租车辆,无法完成停车"/>
+                <entry key="request.user.parking.other" value="其他错误"/>
+                <entry key="request.user.extract.1007" value="1007故障"/>
+                <entry key="request.user.extract.platform" value="车台传感器故障,车台上依然有车!"/>
+                <entry key="request.user.extract.scanner" value="停车区域或者行人通道有异物!"/>
+                <entry key="request.user.extract.peopledoor" value="人行门未关闭!"/>
+                <entry key="request.user.extract.cardoor" value="车库门检测到异物,无法关闭!"/>
+                <entry key="request.user.extract.carexist" value="车台上还有车"/>
+                <entry key="request.user.extract.other" value="其他错误"/>
                 <entry key="system.machine.break" value="系统故障"/>
                 <entry key="management.login.parameter.error" value="管理员登录,参数错误"/>
                 <entry key="management.getcar.parameter.error" value="管理员取车,参数错误"/>
@@ -42,6 +57,77 @@
                 <entry key="webservice.execute.timeout" value="webservice,执行超时!"/>
             </map>
         </property>
+        <property name="codePLC">
+            <map>
+                <!-- console related error code p=存车,e=取车 -->
+                <entry key="p1" value="request.user.parking.platform"/>
+                <entry key="p2" value="request.user.parking.scanner"/>
+                <entry key="p3" value="request.user.parking.peopledoor"/>
+                <entry key="p4" value="request.user.parking.cardoor"/>
+                <entry key="p5" value="request.user.parking.emtryCar"/>
+                <entry key="p6" value="request.user.parking.peopledoorwithoutOC"/>
+                <entry key="p7" value="request.user.parking.other"/>
+                <entry key="p8" value="request.user.parking.other"/>
+                <entry key="p9" value="request.user.parking.other"/>
+                <entry key="p10" value="request.user.parking.other"/>
+                <entry key="p11" value="request.user.parking.other"/>
+                <entry key="p12" value="request.user.parking.other"/>
+                <entry key="p13" value="request.user.parking.other"/>
+                <entry key="p14" value="request.user.parking.other"/>
+                <entry key="p15" value="request.user.parking.other"/>
+                <entry key="p16" value="request.user.parking.other"/>
+                <entry key="pp1" value="request.user.parking.platform"/>
+                <entry key="pp2" value="request.user.parking.scanner"/>
+                <entry key="pp3" value="request.user.parking.peopledoor"/>
+                <entry key="pp4" value="request.user.parking.cardoor"/>
+                <entry key="pp5" value="request.user.parking.other"/>
+                <entry key="pp6" value="request.user.parking.other"/>
+                <entry key="pp7" value="request.user.parking.other"/>
+                <entry key="pp8" value="request.user.parking.other"/>
+                <entry key="pp9" value="request.user.parking.other"/>
+                <entry key="pp10" value="request.user.parking.other"/>
+                <entry key="pp11" value="request.user.parking.other"/>
+                <entry key="pp12" value="request.user.parking.other"/>
+                <entry key="pp13" value="request.user.parking.other"/>
+                <entry key="pp14" value="request.user.parking.other"/>
+                <entry key="pp15" value="request.user.parking.other"/>
+                <entry key="pp16" value="request.user.parking.inside.car.notauth"/>
+
+
+                <entry key="e1" value="request.user.extract.platform"/>
+                <entry key="e2" value="request.user.extract.scanner"/>
+                <entry key="e3" value="request.user.extract.peopledoor"/>
+                <entry key="e4" value="request.user.extract.cardoor"/>
+                <entry key="e5" value="request.user.extract.carexist"/>
+                <entry key="e6" value="request.user.extract.other"/>
+                <entry key="e7" value="request.user.extract.other"/>
+                <entry key="e8" value="request.user.extract.other"/>
+                <entry key="e9" value="request.user.extract.other"/>
+                <entry key="e10" value="request.user.extract.other"/>
+                <entry key="e11" value="request.user.extract.other"/>
+                <entry key="e12" value="request.user.extract.other"/>
+                <entry key="e13" value="request.user.extract.other"/>
+                <entry key="e14" value="request.user.extract.other"/>
+                <entry key="e15" value="request.user.extract.other"/>
+                <entry key="e16" value="request.user.extract.other"/>
+                <entry key="ee1" value="request.user.extract.platform"/>
+                <entry key="ee2" value="request.user.extract.scanner"/>
+                <entry key="ee3" value="request.user.extract.peopledoor"/>
+                <entry key="ee4" value="request.user.extract.cardoor"/>
+                <entry key="ee5" value="request.user.extract.other"/>
+                <entry key="ee6" value="request.user.extract.other"/>
+                <entry key="ee7" value="request.user.extract.other"/>
+                <entry key="ee8" value="request.user.extract.other"/>
+                <entry key="ee9" value="request.user.extract.other"/>
+                <entry key="ee10" value="request.user.extract.other"/>
+                <entry key="ee11" value="request.user.extract.other"/>
+                <entry key="ee12" value="request.user.extract.other"/>
+                <entry key="ee13" value="request.user.extract.other"/>
+                <entry key="ee14" value="request.user.extract.other"/>
+                <entry key="ee15" value="request.user.extract.other"/>
+                <entry key="ee16" value="request.user.extract.other"/>
+            </map>
+        </property>
 
     </bean>
 </beans>
\ No newline at end of file
Index: src/main/resources/message/messages_en_US.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>NATIVE_TO_ASCII_UTF-8
===================================================================
--- src/main/resources/message/messages_en_US.properties	(revision 6809)
+++ src/main/resources/message/messages_en_US.properties	(date 1516532552000)
@@ -1,4 +1,6 @@
 # common text show
+request.user.parking.1007=
+reuqest.user.pulling.1007=
 common.menu.text=菜单
 common.button.add.text=添加
 common.button.mod.text=修改
Index: src/main/resources/message/messages_zh_CN.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>NATIVE_TO_ASCII_UTF-8
===================================================================
--- src/main/resources/message/messages_zh_CN.properties	(revision 6809)
+++ src/main/resources/message/messages_zh_CN.properties	(date 1517037567000)
@@ -1,4 +1,5 @@
 # common text show
+reuqest.user.pulling.1007=1007故障
 common.menu.text=菜单
 common.button.add.text=添加
 common.button.mod.text=修改
@@ -60,3 +61,34 @@
 common.button.print.text=打印
 common.title.site=Skylot后台管理系统
 common.layout.main=主工作区
+request.system.init.timeout=请求超时
+request.system.init.fail=
+request.scancode.getcar.timeout=请求超时
+request.scancode.getcar.fail=请求超时
+system.scancode.getcar.notexit=车辆已取出/车牌号不存在
+system.scancode.getcar.fail=二维码识别有误
+request.password.getcar.timeout=请求超时
+request.password.getcar.fail=请求超时
+system.password.getcar.notexit=车辆已取出/车牌号不存在
+request.confirm.getcar.timeout=请求超时
+request.confirm.getcar.fail=请求超时
+request.scancode.cancel.timeout=请求超时
+request.scancode.usercancel.fail=请求超时
+system.scancode.usercancel.fail=二维码识别有误
+request.password.usercancel.timeout=请求超时
+request.password.usercancel.fail=请求超时
+request.admin.login.timeout=请求超时
+request.admin.login.fail=请求超时
+request.admin.getcar.timeout=请求超时
+request.admin.getcar.fail=请求超时
+system.admin.getcar.notexit=请求超时
+request.admin.cancel.getcar.timeout=请求超时
+request.admin.cancel.getcar.fail=车辆已取出/车牌号不存在
+request.user.parking.timeout=请求超时
+request.user.parking.1005=1005故障
+request.user.parking.1007=1007故障
+request.user.parking.people=人行门故障
+request.user.parking.fail=请求超时
+system.machine.break=系统故障
+management.login.parameter.error=管理员登录,参数错误
+management.getcar.parameter.error=管理员取车,参数错误
\ No newline at end of file
Index: src/main/resources/log4j.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>NATIVE_TO_ASCII_UTF-8
===================================================================
--- src/main/resources/log4j.properties	(revision 6809)
+++ src/main/resources/log4j.properties	(date 1516344972000)
@@ -55,7 +55,7 @@
 log4j.appender.parkingfile.File=/Users/Saul/Desktop/logs/skylotmachine.log
 log4j.appender.parkingfile.Append=true
 log4j.appender.parkingfile.Threshold=warn
-log4j.appender.parkingfile.MaxFileSize=200kB
+log4j.appender.parkingfile.MaxFileSize=100kB
 #log4j.appender.logfile.Threshold=DEBUG
 log4j.appender.parkingfile.layout=org.apache.log4j.PatternLayout
 log4j.appender.parkingfile.layout.ConversionPattern=%m%n
Index: src/main/resources/spring-timertask.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/spring-timertask.xml	(revision 6809)
+++ src/main/resources/spring-timertask.xml	(date 1517549917000)
@@ -5,15 +5,24 @@
            http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">
 
     <task:scheduler id="plcSync" pool-size="1"/>
-    <task:scheduler id="serverSync" pool-size="2"/>
-
+    <task:scheduler id="serverSync" pool-size="1"/>
+    <task:scheduler id="ftpProcess" pool-size="1"/>
+    <task:scheduler id="mainThread" pool-size="1"/>
+    <!-- PLC 心跳定期任务 -->
     <task:scheduled-tasks scheduler="plcSync">
-        <task:scheduled ref="syncHeartbeatPLCTask" method="syncPLC" cron="0/10 * * * * ?"/>
+        <task:scheduled ref="syncHeartbeatPLCTask" method="syncPLC" cron="0/30 * * * * ?"/>
     </task:scheduled-tasks>
-
+    <!-- SaaS后台定期任务 -->
     <task:scheduled-tasks scheduler="serverSync">
         <task:scheduled ref="syncParkingLogicServer" method="run" cron="0/10 * * * * ?"/>
-        <task:scheduled ref="syncFTPUtil" method="ftp" cron="0/30 * * * * ?"/>
+    </task:scheduled-tasks>
+    <!-- FTP 定期扫描 -->
+    <task:scheduled-tasks scheduler="ftpProcess">
+        <task:scheduled ref="syncFTPUtil" method="ftp" cron="0/5 * * * * ?"/>
+    </task:scheduled-tasks>
+    <!-- 停取车主线程 -->
+    <task:scheduled-tasks scheduler="mainThread">
+        <task:scheduled ref="mainThreadMgt" method="go" cron="0/3 * * * * ?"/>
     </task:scheduled-tasks>
 
 </beans>
\ No newline at end of file
Index: src/main/resources/system.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>NATIVE_TO_ASCII_UTF-8
===================================================================
--- src/main/resources/system.properties	(revision 6809)
+++ src/main/resources/system.properties	(date 1516862553000)
@@ -6,11 +6,15 @@
 skylot.webservice.parking=${pom.parking.url}
 skylot.webservice.heartbeat=${pom.heartbeat.url}
 skylot.machine.ip=${pom.machine.ip}
+#PLC
 skylot.plc.ip=${pom.plc.ip}
 skylot.plc.port=${pom.plc.port}
 skylot.plc.operation.timeout=${pom.plc.operation.timeout}
+skylot.plc.thread.timeout=${pom.plc.thread.timeout}
 skylot.machine.operation.timeout=${pom.machine.operation.timeout}
-
+#Marquee
+skylot.marquee.ip=${pom.marquee.ip}
+skylot.marquee.port=${pom.marquee.port}
 
 download.file.path=${pom.download.file.path}
 ftp.ip=${pom.ftp.ip}
Index: src/main/webapp/index.jsp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/webapp/index.jsp	(revision 6809)
+++ src/main/webapp/index.jsp	(date 1517560135000)
@@ -36,7 +36,7 @@
     $(document).ready(function () {
         // 指定websocket路径
 //        var websocket = new WebSocket('ws://10.3.13.13:8080/skymachine/log');
-        var websocket = new WebSocket('ws://10.8.0.060:8080/skylotmachine/log');
+        var websocket = new WebSocket('ws://192.168.10.17:8080/skymachine/log');
         websocket.onmessage = function (event) {
             // 接收服务端的实时日志并添加到HTML页面中
             $("#log-container div").append(event.data + "<p> </p>");
Index: src/main/filters-dev.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>NATIVE_TO_ASCII_UTF-8
===================================================================
--- src/main/filters-dev.properties	(revision 6842)
+++ src/main/filters-dev.properties	(date 1517641821000)
@@ -1,37 +1,43 @@
 #database env
-pom.jdbc.url=jdbc:mysql://10.8.0.190:3306/fangda_skylot_mathinemgt_test_02?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true
+pom.jdbc.url=jdbc:mysql://192.168.10.11:3306/fangda_skylot_mathinemgt_test_02?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true
 pom.jdbc.username=root
-pom.jdbc.password=123456
+pom.jdbc.password=123
 #upload.filepath
 pom.upload.file.path=/Users/Saul/Desktop
 #upload.filepath
 pom.download.file.path=/Users/Saul/Desktop/ftp
 #sync path
-pom.parking.machine.id=a2a29a34a1314a82ac0bb2382d505azz
-pom.parking.machine.port=802
+pom.parking.machine.id=4741e635636545eeadf41188b8010d5f
+pom.parking.machine.port=803
 pom.parking.machine.address=123.207.244.20
-pom.parking.url=http://wx.belimked.com/saas/machineActionSynchronize/heartbeat/login
-pom.heartbeat.url=http://wx.belimked.com/saas/parkingLogSynchronize/update/login
+pom.heartbeat.url=http://wx-test02.belimked.com/saas02/machineActionSynchronize/heartbeat/login
+pom.parking.url=http://wx-test02.belimked.com/saas02/parkingLogSynchronize/update/login
 #ftp env
 #pom.ftp.ip=192.168.1.2
-pom.ftp.ip=10.8.0.60
+pom.ftp.ip=192.168.10.11
 pom.ftp.port=21
 pom.ftp.username=yy
 pom.ftp.password=1
 #扩展名
 pom.ftp.image.file.extension=.jpg
 #存放目录
-pom.ftp.image.file.directory=/f/IVS(10.8.0.221)/channel_0/plate/
+pom.ftp.image.file.directory=/f/IVS(192.168.10.119)/channel_0/plate/
 #车牌文件分隔符
 pom.ftp.image.file.split=_
-#超时时间
-pom.plc.operation.timeout=240
+#超时时间-PLC连接,并且执行超时时间
+pom.plc.operation.timeout=4800
+#超时时间-主线程,阻塞队列排队时间
+pom.plc.thread.timeout=30
 pom.machine.operation.timeout=60
 #plc
 #pom.plc.ip=192.168.1.189
-pom.machine.ip=10.8.0.13
-pom.plc.ip=10.8.0.220
+pom.machine.ip=192.168.10.14
+pom.plc.ip=192.168.10.250
 pom.plc.port=9600
+#marquee
+#pom.plc.ip=192.168.1.189
+pom.marquee.ip=192.168.10.230
+pom.marquee.port=8888
 #console
 pom.console.detail.status=true
 #识别模式,#0:csv,#1,ftp和camera
Index: src/main/filters-product.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>NATIVE_TO_ASCII_UTF-8
===================================================================
--- src/main/filters-product.properties	(revision 6842)
+++ src/main/filters-product.properties	(date 1516684208000)
@@ -1,36 +1,38 @@
 #database env
-pom.jdbc.url=jdbc:mysql://db:3306/fangda_skylot_mathinemgt_test_02?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true
+pom.jdbc.url=jdbc:mysql://192.168.10.10:3306/fangda_skylot_mathinemgt_test_02?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true
 pom.jdbc.username=root
-pom.jdbc.password=bn4g&P@jk*yylXKxeM*8IVP#%WlEYJ0h
+pom.jdbc.password=123
 #upload.filepath
 pom.upload.file.path=/Users/Saul/Desktop
 #upload.filepath
 pom.download.file.path=/Users/Saul/Desktop/ftp
 #sync path
-pom.parking.machine.id=1baa7b9857824acca3f784234bf07899
+pom.parking.machine.id=aca1cef4c76e40af978338cdde2067f7
 pom.parking.machine.port=802
 pom.parking.machine.address=123.207.244.20
-pom.parking.url=http://wx.belimked.com/saas/machineActionSynchronize/heartbeat/login
-pom.heartbeat.url=http://wx.belimked.com/saas/parkingLogSynchronize/update/login
+pom.heartbeat.url=http://wx-test02.belimked.com/saas02/machineActionSynchronize/heartbeat/login
+pom.parking.url=http://wx-test02.belimked.com/saas02/parkingLogSynchronize/update/login
 #ftp env
 #pom.ftp.ip=192.168.1.2
-pom.ftp.ip=10.8.0.60
+pom.ftp.ip=192.168.10.10
 pom.ftp.port=21
 pom.ftp.username=yy
 pom.ftp.password=1
 #扩展名
 pom.ftp.image.file.extension=.jpg
 #存放目录
-pom.ftp.image.file.directory=/f/IVS(10.8.0.221)/channel_0/plate/
+pom.ftp.image.file.directory=/f/IVS(192.168.10.119)/channel_0/plate/
 #车牌文件分隔符
 pom.ftp.image.file.split=_
-#超时时间
-pom.plc.operation.timeout=240
-pom.machine.operation.timeout=60
+#超时时间-PLC连接,并且执行超时时间
+pom.plc.operation.timeout=24000
+#超时时间-主线程,阻塞队列排队时间
+pom.plc.thread.timeout=300
+pom.machine.operation.timeout=600
 #plc
 #pom.plc.ip=192.168.1.189
-pom.machine.ip=10.8.0.13
-pom.plc.ip=10.8.0.220
+pom.machine.ip=192.168.10.10
+pom.plc.ip=192.168.10.250
 pom.plc.port=9600
 #console
 pom.console.detail.status=true
Index: src/test/java/FTPTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/FTPTest.java	(revision 6809)
+++ src/test/java/FTPTest.java	(date 1516876176000)
@@ -96,7 +96,7 @@
             try {
                 for (int i = 0; i < 100000; i++) {
                     if (go == 1) {
-                        socketService.getParkingStatus();
+                        socketService.getParkingStatus(1);
                         log.warn(socketService.getStringBuilder().toString());
                     } else if (go == 2) {
                         socketService.getBaseNumber();
Index: src/test/java/TestU.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/TestU.java	(revision 6809)
+++ src/test/java/TestU.java	(date 1517651178000)
@@ -10,6 +10,7 @@
 import com.fangda.skylot.mathine.utils.exception.SkyLotException;
 import com.fangda.skylot.mathine.utils.ftp.FtpUtils;
 import com.fangda.skylot.mathine.utils.math.ParkingLogic;
+import com.fangda.skylot.mathine.utils.socket.BaseCommanderMarquee;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.collections.ListUtils;
 import org.apache.commons.lang3.ArrayUtils;
@@ -21,6 +22,7 @@
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -52,7 +54,8 @@
     private SyncFTPUtil syncFTPUtil;
     @Autowired
     private Map<String, IBaseDao> daoMap;
-
+    @Autowired
+    private BaseCommanderMarquee baseCommanderMarquee;
 
     private static double EARTH_RADIUS = 6378.137;// 单位千米
 
@@ -155,12 +158,15 @@
 
     @Test
 //    @Ignore
-    public void Test() throws SkyLotException {
+    public void Test() throws IOException, SkyLotException {
+//        String com = "FE 5C 4B 89 41 00 00 00 61 00 00 00 00 2E 00 00 00 05 00 00 08 00 05 03 09 23 30 30 33 32 23 30 30 31 36 23 31 23 36 36 23 31 23 30 23 30 23 30 30 23 35 37 3B 2F 38 31 32 34 32 23 30 30 23 FF FF";
+//        baseCommanderMarquee.run(com);
 //        ParkingLogic parkingLogic = new ParkingLogic();
 //        parkingLogic.setActionDirect(2);
 //        socketService.doDirection(1,parkingLogic);
+//        socketService.getHighErrorStatus();
         for (int i = 1; i <= 12; i++) {
-            socketService.getParkingStatus();
+            socketService.getParkingStatus(1);
             log.warn("未取车,当前车板停车状态:" + socketService.getValueMap());
             if (socketService.confirmStatus(2) == 0) {
                 log.warn("当前取车位置:" + (i));
@@ -174,11 +180,25 @@
                 log.warn("取车耗时:" + (socketService.getFinishParkingTime()) / 1000);
                 log.warn("取车旋转耗时:" + (socketService.getDirectionBeforeTime()) / 1000);
                 log.warn("取车荷载耗时:" + (socketService.getDirectionAfterTime()) / 1000);
-                socketService.getParkingStatus();
+                socketService.getParkingStatus(1);
                 log.warn("已取车,当前车板停车状态:" + socketService.getValueMap());
             }
 
         }
+//        socketService.confirmStatus(2);
+//        socketService.carDoor("0");
+//        socketService.peopleDoor("0");
+//        String s = "{\"data\":{\"machineStatus\":\"0\"},\"error\":[],\"resultType\":true,\"resultType2\":null}";
+//        String w = "4|沪HW5998|1|41532ea88c964c83917a76936f1e618d|7|507835|2018-02-18 00:00:00";
+//        System.out.println(BaseCommandUtils.encode(w));
+//        socketService.carDoor("0");
+//        System.out.println(SkylotUtils.verifyCode(BaseCommandUtils.encode(w)));
+//        try {
+//            System.out.println(SingletonObjectMapper.getInstance().readValue(s, Map.class));
+//        } catch (IOException e) {
+//            e.printStackTrace();
+//        }
+//        code.doErrorLogic(new JsonResult(), Maps.newHashMap(),"request.user.parking.1005");
 //        for (int i = 7; i <= 12; i++) {
 //            socketService.getParkingStatus();
 //            log.warn("未停车,当前车板停车状态:" + socketService.getValueMap());
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision 6809)
+++ pom.xml	(date 1516520997000)
@@ -375,7 +375,7 @@
         </dependency>
     </dependencies>
     <build>
-        <finalName>SkylotMachine</finalName>
+        <finalName>skymachine</finalName>
         <filters>
             <filter>src/main/filters-${active.profile}.properties</filter>
         </filters>
@@ -471,9 +471,9 @@
                 <artifactId>flyway-maven-plugin</artifactId>
                 <version>4.2.0</version>
                 <configuration>
-                    <url>jdbc:mysql://10.8.0.190:3306/fangda_skylot_mathinemgt_test_02?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true</url>
-                    <user>fangda</user>
-                    <password>123456</password>
+                    <url>jdbc:mysql://192.168.10.4:3306/fangda_skylot_mathinemgt_test_02?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true</url>
+                    <user>root</user>
+                    <password>123</password>
                 </configuration>
                 <dependencies>
                     <dependency>
